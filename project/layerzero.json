{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "layerzero",
      "slug": "layerzero",
      "project": "LayerZero (The World's Largest Bounty)",
      "maxBounty": 15000000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/3UXQcPOIAaOkE2QBCasSKa/14893bedf55bdb191e4cf99a67203e85/LayerZero_logo.jpeg",
      "launchDate": "2023-05-17T13:00-04:00",
      "updatedDate": "2023-05-17T16:15:29.054Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Group 1: USD 250,000 up to USD 15,000,000 or Group 2: USD 25,000 up to USD 1,500,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "Group 1: USD 25,000 up to USD 250,000 or Group 2: USD 10,000 up to USD 25,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "Group 1: USD 10,000 up to USD 25, 000 or Group 2: USD 5,000 up to USD 10,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "Group 1: USD 1,000 up to USD 10,000 or Group 2: USD 1,000 up to USD 5,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "1AvnTSvbtUxxvYcp9OfsJr",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x4d73adb72bc3dd368966edd0f0b2148401a178e2#code",
          "description": "UltraLightNodeV2.sol"
        },
        {
          "id": "3jRvKowncWDepaN7o3VSLK",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x07245eEa05826F5984c7c3C8F478b04892e4df89",
          "description": "FPValidator.sol"
        },
        {
          "id": "6Itr1QUL53zDVYAvPk96O4",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675#code",
          "description": "Endpoint.sol"
        },
        {
          "id": "7FeS0awcjrIfyzba238uEv",
          "type": "smart_contract",
          "url": "https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol",
          "description": "OFT.sol"
        },
        {
          "id": "16ifjbsTu7mBK21fEUgze7",
          "type": "smart_contract",
          "url": "https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/v2/OFTV2.sol",
          "description": "OFTV2.sol"
        },
        {
          "id": "53l6TK3bLcSHYiovX9S7sB",
          "type": "smart_contract",
          "url": "https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/onft/ONFT721.sol",
          "description": "ONFT721.sol"
        },
        {
          "id": "6x2Vg1PG1pkdiij36fU1E",
          "type": "smart_contract",
          "url": "https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/onft/ONFT1155.sol",
          "description": "ONFT1155.sol"
        }
      ],
      "impacts": [
        {
          "id": "1oNSPInwS2yZ34ElKfxFWp",
          "title": "Exploits resulting in the permanent locking, loss, or theft of user funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4VIxHcOCWj0Oi6XF3YFCZi",
          "title": "Permanent DoS attacks (excluding volumetric attacks)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2DqiVShsuiUGIt7ndUE3uY",
          "title": "Attacker ability to set or modify LayerZero default settings for another UA",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6Qh8PIu7Ha261uloIFZ6D9",
          "title": "Any governance voting result manipulation",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "18sJYY3W47nKvvWJ8vifB9",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4W8ZyfdCYcOMA1FWy1B4G4",
          "title": "All above impacts for OFT & ONFT related contracts",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "LayerZero is an omnichain interoperability protocol that allows developers to seamlessly interact with contracts across dozens of blockchains. LayerZero Endpoints rely on an innovative architecture leveraging Ultra Light Nodes and independent Oracles and Relayers to securely relay messages between chains.\n\nFor more information about LayerZero, please visit [https://layerzero.network/](https://layerzero.network/).  \n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the  [Immunefi Vulnerability Severity Classification System V2.2. ](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/)This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \n\nSmart Contract rewards are classified by Group 1 and Group 2. Group 1 consists of: Ethereum, BNB Chain, Avalanche, Polygon, Arbitrum, Optimism, Fantom. Group 2 consists of all other chains. Group 1 rewards are notated in the rewards table by the higher ranges listed by severity level, while Group 2 rewards are notated by the lower ranges listed by severity level. \n\nAll bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.\n\nAll vulnerabilities marked in the [https://github.com/LayerZero-Labs/Audits ](https://github.com/LayerZero-Labs/Audits) are not eligible for a reward.\n\nAll Impacts for OFT and [ONFT](https://github.com/LayerZero-Labs/solidity-examples/tree/main/contracts/token/onft) related contracts will be treated as low severity classifications and respective rewards. \n\nCritical smart contract vulnerability payouts for Group 1 are a minimum of __USD $250,000__, or 10% of the value at risk at the time of report submission, with a hard cap of __USD $15,000,000__, whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $250,000 or 10% of value at risk is at the discretion of the team.\n\nCritical smart contract vulnerability payouts for Group 2 are a minimum of __USD $25,000__, or 10% of the value at risk at the time of report submission, with a hard cap of __USD $1,500,000__, whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $25,000 or 10% of value at risk is at the discretion of the team.\n\nAll non-critical rewards for the project bug bounty program are scaled based on an internally established team criteria, taking into account the exploitability of the bug, the impact it causes, and the likelihood of the vulnerability presenting itself, which is especially factored in with bug reports requiring multiple conditions to be met that are currently not in-place. Rewards will be provided at the determined fair value by the team depending on these conditions, assuming that the bug report is in-scope of the bug bounty program.\n\nLayerZero requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed are: \n- Invoice is required with Name, Address, and Payment Instructions\n- Proof of address (either a redacted bank statement with your address or a recent utility bill with your name, address, and issuer of the bill)\n- Copy of your passport or other Government ID will be required\n- Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list \n\nThe collection of this information will be done by the project team.\n\nPayouts are handled by __LayerZero Labs__  directly and are denominated in USD. However, payouts are done in __Fiat USD via wire transfer, or USDC, USDT and BUSD__, with the choice of ratio at the discretion of the team.\n",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n- Incorrect data supplied by third party oracles\n   - Not to exclude oracle manipulation/flash loan attacks\n- Basic economic governance attacks (e.g. 51% attack)\n- Lack of liquidity\n- Best practice critiques\n- Sybil attacks\n- Centralization risks\n- DoS of LayerZero infrastructure is not eligible for bug bounty rewards\n- Reports regarding bugs that LayerZero Labs was previously aware of are not eligible for a reward\n- Griefing DoS (i.e. attacker spends as much in gas as damage to the contract)\n- Dependencies & Third Party Code\n\nThe following activities are prohibited by this bug bounty program:\n\n- Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n- Any testing with pricing oracles or third party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n- The following person(s) are ineligible to receive bug bounty payout rewards: Staff, Auditors, Contractors, persons in possession of privileged information, and all associated parties.\n",
      "assetsBodyV2": "All smart contracts of LayerZero can be found at [https://github.com/LayerZero-Labs.](https://github.com/LayerZero-Labs) However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nImpacts found in contracts which are deployed to multiple chains will be treated as one singular issue.\n\nDocumentation and instruction for PoC can be found here:\n- GitHub README:[ https://github.com/LayerZero-Labs/LayerZero](https://github.com/LayerZero-Labs/LayerZero)\n- Gitbook: [https://layerzero.gitbook.io/docs/](https://layerzero.gitbook.io/docs/)\n\nIf an impact can be caused to any other asset managed by LayerZero that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. The vulnerability will then be evaluated by LayerZero Labs in good faith to determine where it would lie on the vulnerability scale.\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": null,
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": null,
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Group 1: USD 250,000 up to USD 15,000,000 or Group 2: USD 25,000 up to USD 1,500,000"
          },
          {
            "level": "High",
            "payout": "Group 1: USD 25,000 up to USD 250,000 or Group 2: USD 10,000 up to USD 25,000"
          },
          {
            "level": "Medium",
            "payout": "Group 1: USD 10,000 up to USD 25, 000 or Group 2: USD 5,000 up to USD 10,000"
          },
          {
            "level": "Low",
            "payout": "Group 1: USD 1,000 up to USD 10,000 or Group 2: USD 1,000 up to USD 5,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"LayerZero is an omnichain interoperability protocol that allows developers to seamlessly interact with contracts across dozens of blockchains. LayerZero Endpoints rely on an innovative architecture leveraging Ultra Light Nodes and independent Oracles and Relayers to securely relay messages between chains.\"), mdx(\"p\", null, \"For more information about LayerZero, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://layerzero.network/\"\n  }, \"https://layerzero.network/\"), \".  \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>LayerZero is an omnichain interoperability protocol that allows developers to seamlessly interact with contracts across dozens of blockchains. LayerZero Endpoints rely on an innovative architecture leveraging Ultra Light Nodes and independent Oracles and Relayers to securely relay messages between chains.</p><p>For more information about LayerZero, please visit <a href=\"https://layerzero.network/\">https://layerzero.network/</a>.  </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2. \"), \"This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \"), mdx(\"p\", null, \"Smart Contract rewards are classified by Group 1 and Group 2. Group 1 consists of: Ethereum, BNB Chain, Avalanche, Polygon, Arbitrum, Optimism, Fantom. Group 2 consists of all other chains. Group 1 rewards are notated in the rewards table by the higher ranges listed by severity level, while Group 2 rewards are notated by the lower ranges listed by severity level. \"), mdx(\"p\", null, \"All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.\"), mdx(\"p\", null, \"All vulnerabilities marked in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/LayerZero-Labs/Audits\"\n  }, \"https://github.com/LayerZero-Labs/Audits \"), \" are not eligible for a reward.\"), mdx(\"p\", null, \"All Impacts for OFT and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/LayerZero-Labs/solidity-examples/tree/main/contracts/token/onft\"\n  }, \"ONFT\"), \" related contracts will be treated as low severity classifications and respective rewards. \"), mdx(\"p\", null, \"Critical smart contract vulnerability payouts for Group 1 are a minimum of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD $250,000\"), \", or 10% of the value at risk at the time of report submission, with a hard cap of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD $15,000,000\"), \", whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $250,000 or 10% of value at risk is at the discretion of the team.\"), mdx(\"p\", null, \"Critical smart contract vulnerability payouts for Group 2 are a minimum of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD $25,000\"), \", or 10% of the value at risk at the time of report submission, with a hard cap of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD $1,500,000\"), \", whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $25,000 or 10% of value at risk is at the discretion of the team.\"), mdx(\"p\", null, \"All non-critical rewards for the project bug bounty program are scaled based on an internally established team criteria, taking into account the exploitability of the bug, the impact it causes, and the likelihood of the vulnerability presenting itself, which is especially factored in with bug reports requiring multiple conditions to be met that are currently not in-place. Rewards will be provided at the determined fair value by the team depending on these conditions, assuming that the bug report is in-scope of the bug bounty program.\"), mdx(\"p\", null, \"LayerZero requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed are: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Invoice is required with Name, Address, and Payment Instructions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Proof of address (either a redacted bank statement with your address or a recent utility bill with your name, address, and issuer of the bill)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy of your passport or other Government ID will be required\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list \")), mdx(\"p\", null, \"The collection of this information will be done by the project team.\"), mdx(\"p\", null, \"Payouts are handled by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LayerZero Labs\"), \"  directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fiat USD via wire transfer, or USDC, USDT and BUSD\"), \", with the choice of ratio at the discretion of the team.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the  <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\">Immunefi Vulnerability Severity Classification System V2.2. </a>This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. </p><p>Smart Contract rewards are classified by Group 1 and Group 2. Group 1 consists of: Ethereum, BNB Chain, Avalanche, Polygon, Arbitrum, Optimism, Fantom. Group 2 consists of all other chains. Group 1 rewards are notated in the rewards table by the higher ranges listed by severity level, while Group 2 rewards are notated by the lower ranges listed by severity level. </p><p>All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.</p><p>All vulnerabilities marked in the <a href=\"https://github.com/LayerZero-Labs/Audits\">https://github.com/LayerZero-Labs/Audits </a> are not eligible for a reward.</p><p>All Impacts for OFT and <a href=\"https://github.com/LayerZero-Labs/solidity-examples/tree/main/contracts/token/onft\">ONFT</a> related contracts will be treated as low severity classifications and respective rewards. </p><p>Critical smart contract vulnerability payouts for Group 1 are a minimum of <strong>USD $250,000</strong>, or 10% of the value at risk at the time of report submission, with a hard cap of <strong>USD $15,000,000</strong>, whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $250,000 or 10% of value at risk is at the discretion of the team.</p><p>Critical smart contract vulnerability payouts for Group 2 are a minimum of <strong>USD $25,000</strong>, or 10% of the value at risk at the time of report submission, with a hard cap of <strong>USD $1,500,000</strong>, whichever is larger. Value at risk should be calculated primarily (though not exclusively) based on concrete and demonstrable funds at risk. Any supplementary reward beyond the minimum USD $25,000 or 10% of value at risk is at the discretion of the team.</p><p>All non-critical rewards for the project bug bounty program are scaled based on an internally established team criteria, taking into account the exploitability of the bug, the impact it causes, and the likelihood of the vulnerability presenting itself, which is especially factored in with bug reports requiring multiple conditions to be met that are currently not in-place. Rewards will be provided at the determined fair value by the team depending on these conditions, assuming that the bug report is in-scope of the bug bounty program.</p><p>LayerZero requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed are: </p><ul><li>Invoice is required with Name, Address, and Payment Instructions</li><li>Proof of address (either a redacted bank statement with your address or a recent utility bill with your name, address, and issuer of the bill)</li><li>Copy of your passport or other Government ID will be required</li><li>Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list </li></ul><p>The collection of this information will be done by the project team.</p><p>Payouts are handled by <strong>LayerZero Labs</strong>  directly and are denominated in USD. However, payouts are done in <strong>Fiat USD via wire transfer, or USDC, USDT and BUSD</strong>, with the choice of ratio at the discretion of the team.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DoS of LayerZero infrastructure is not eligible for bug bounty rewards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reports regarding bugs that LayerZero Labs was previously aware of are not eligible for a reward\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Griefing DoS (i.e. attacker spends as much in gas as damage to the contract)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependencies & Third Party Code\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The following person(s) are ineligible to receive bug bounty payout rewards: Staff, Auditors, Contractors, persons in possession of privileged information, and all associated parties.\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li><li>DoS of LayerZero infrastructure is not eligible for bug bounty rewards</li><li>Reports regarding bugs that LayerZero Labs was previously aware of are not eligible for a reward</li><li>Griefing DoS (i.e. attacker spends as much in gas as damage to the contract)</li><li>Dependencies &amp; Third Party Code</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li><li>The following person(s) are ineligible to receive bug bounty payout rewards: Staff, Auditors, Contractors, persons in possession of privileged information, and all associated parties.</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of LayerZero can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/LayerZero-Labs\"\n  }, \"https://github.com/LayerZero-Labs.\"), \" However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"Impacts found in contracts which are deployed to multiple chains will be treated as one singular issue.\"), mdx(\"p\", null, \"Documentation and instruction for PoC can be found here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GitHub README:\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/LayerZero-Labs/LayerZero\"\n  }, \" https://github.com/LayerZero-Labs/LayerZero\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gitbook: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://layerzero.gitbook.io/docs/\"\n  }, \"https://layerzero.gitbook.io/docs/\"))), mdx(\"p\", null, \"If an impact can be caused to any other asset managed by LayerZero that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. The vulnerability will then be evaluated by LayerZero Labs in good faith to determine where it would lie on the vulnerability scale.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of LayerZero can be found at <a href=\"https://github.com/LayerZero-Labs\">https://github.com/LayerZero-Labs.</a> However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>Impacts found in contracts which are deployed to multiple chains will be treated as one singular issue.</p><p>Documentation and instruction for PoC can be found here:</p><ul><li>GitHub README:<a href=\"https://github.com/LayerZero-Labs/LayerZero\"> https://github.com/LayerZero-Labs/LayerZero</a></li><li>Gitbook: <a href=\"https://layerzero.gitbook.io/docs/\">https://layerzero.gitbook.io/docs/</a></li></ul><p>If an impact can be caused to any other asset managed by LayerZero that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. The vulnerability will then be evaluated by LayerZero Labs in good faith to determine where it would lie on the vulnerability scale.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
