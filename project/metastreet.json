{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "metastreet",
      "slug": "metastreet",
      "project": "MetaStreet",
      "maxBounty": 50000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/2TjQM2yeBr29b9gN6zVGFV/7ea6cd630dd42e2e512efb0a17965058/metastreet.jpg",
      "launchDate": "2023-08-02T17:00+01:00",
      "updatedDate": "2023-08-21T19:32:09.304Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $25,000 to USD $50,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $1,000 to USD $25,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "Z5VD8nlNAYk62EhxB0tbo",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/PoolFactory.sol",
          "description": "PoolFactory.sol"
        },
        {
          "id": "7Epow78nTtsiY7Ocp543nk",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/Pool.sol",
          "description": "Pool.sol"
        },
        {
          "id": "38VkI4aHPx1DvfRGSVNT5x",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/LiquidityManager.sol",
          "description": "LiquidityManager.sol"
        },
        {
          "id": "3I1YlEtOg9soleI2m7TFOR",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/LoanReceipt.sol",
          "description": "LoanReceipt.sol"
        },
        {
          "id": "nkBnpHcYVDZGRH0h3xbaj",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/Tick.sol",
          "description": "Tick.sol"
        },
        {
          "id": "OmbquyCAMVYqVNniOJIvv",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/CollateralFilter.sol",
          "description": "CollateralFilter.sol"
        },
        {
          "id": "46v3xjsSo63X46eP4xIoN4",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/InterestRateModel.sol",
          "description": "InterestRateModel.sol"
        },
        {
          "id": "3acDXVavXKzlkXkJVxv4bf",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/filters/CollectionCollateralFilter.sol",
          "description": "filters/CollectionCollateralFilter.sol"
        },
        {
          "id": "5wNNOwYZyPGGqJj5Ub1Ghn",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/filters/RangedCollectionCollateralFilter.sol",
          "description": "filters/RangedCollectionCollateralFilter.sol"
        },
        {
          "id": "6dr6V7aKaqsJj9ebUJ2UUj",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/rates/WeightedInterestRateModel.sol",
          "description": "rates/WeightedInterestRateModel.sol"
        },
        {
          "id": "4bmlW6SJyVbQmbudmoQKnk",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/wrappers/BundleCollateralWrapper.sol",
          "description": "wrappers/BundleCollateralWrapper.sol"
        },
        {
          "id": "47YLIvIOM56AHs98FW8YVB",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/liquidators/EnglishAuctionCollateralLiquidator.sol",
          "description": "liquidators/EnglishAuctionCollateralLiquidator.sol"
        },
        {
          "id": "10p0aq5FWZnMpTUIZLslm2",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/configurations/WeightedRateRangedCollectionPool.sol",
          "description": "configurations/WeightedRateRangedCollectionPool.sol"
        },
        {
          "id": "4qkl22VVAXz9r1A0zue7dW",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/configurations/WeightedRateCollectionPool.sol",
          "description": "configurations/WeightedRateCollectionPool.sol"
        },
        {
          "id": "2XYSmGqbJrmNM5L4zArXvo",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/ICollateralLiquidationReceiver.sol",
          "description": "interfaces/ICollateralLiquidationReceiver.sol"
        },
        {
          "id": "5XGVwxGzqv7dDU7RsLKSd2",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/ICollateralLiquidator.sol",
          "description": "interfaces/ICollateralLiquidator.sol"
        },
        {
          "id": "5bRcDc65Z033BnWIzLOkq",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/ILiquidity.sol",
          "description": "interfaces/ILiquidity.sol"
        },
        {
          "id": "42W4pLHnexEAkvEUYDoAFW",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/IPoolFactory.sol",
          "description": "interfaces/IPoolFactory.sol"
        },
        {
          "id": "6OoPWlnaN5t3N9hYU5RIeq",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/ICollateralWrapper.sol",
          "description": "interfaces/ICollateralWrapper.sol"
        },
        {
          "id": "2AD5RYqWyoNhpRjXGcWuR",
          "type": "smart_contract",
          "url": "https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/contracts/interfaces/IPool.sol",
          "description": "interfaces/IPool.sol"
        }
      ],
      "impacts": [
        {
          "id": "3mOyPkPalH9MJZ4Tvvhk4D",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2FFnoKjDgpnr9U4QTnyAqF",
          "title": "Direct theft of any user NFTs, whether at-rest or in-motion, other than unclaimed royalties",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3GzXc4kpuRCDyaC7YAzY2H",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7DXxeLEkGxDfP3ryeoeex4",
          "title": "Permanent freezing of NFTs",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2VrDuTCTbZP7Atq6ZuRSJy",
          "title": "Creating a loan with a greater principal than allowed by depositor risk limits",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3EdigsmCoZl7mbmW6WXdtp",
          "title": "Creating a bundle-collateralized loan with a greater multiplier in the principal than there are NFTs in the bundle",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "64Jx0zIbCPZyH1XYxRTGT4",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1TSWwutihMi1bzDcgVn2Hg",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "29qqOYvFPG5PD5DvUFxWuF",
          "title": "Temporary freezing of funds",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "55D0UnywCt3zGtdrWAkWIH",
          "title": "Temporary freezing NFTs",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "603V264jAIMiAoFs3NRlYs",
          "title": "Creating interest-free loans of typical principal and duration",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7AQM6hABo7fdlq4E2BdTJe",
          "title": "Denial of service in loan repayment or liquidation",
          "type": "smart_contract",
          "severity": "high"
        }
      ],
      "programOverview": "The MetaStreet v2 Pool is a permissionless NFT-collateralized lending pool with automatic tranching. Pool is responsible for organizing lending capital with different risk and rate profiles from depositors into fixed-duration loans for borrowers.\n\nFor more information about MetaStreet, please visit [https://www.metastreet.xyz/](https://www.metastreet.xyz/)\n\nMetaStreet provides rewards in USDC. For more details about the payment process, please view the Rewards by Threat Level section further below. \n\n__Responsible Publication__\n\nMetaStreet adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our [Responsible Publication](https://immunefi.com/responsible-publication/) page.\n\n__Primacy of Impact vs Primacy of Rules__\n\nMetaStreet adheres to the Primacy of Impact for the following impacts:\n- Smart Contract: Critical: Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield\n- Smart Contract: Critical: Direct theft of any user NFTs, whether at-rest or in-motion, other than unclaimed royalties\n- Smart Contract: Critical: Creating a loan with a greater principal than allowed by depositor risk limits\n- Smart Contract: Critical: Creating a bundle-collateralized loan with a greater multiplier in the principal than there are NFTs in the bundle\n- Smart Contract: High: Creating interest-free loans of typical principal and duration\n- Smart Contract: High: Theft of unclaimed yield\n- Smart Contract: High: Denial of service in loan repayment or liquidation\n- Smart Contract: High: Permanent freezing of unclaimed yield\n\nIf an impact is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.\n\nTestnet and mock files are not covered under the Primacy of Impact.\n\nAll other impacts are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\n\nAll other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\n\n__Known Issue Assurance__\n\nMetaStreet commits to providing Known Issue Assurance to bug submissions through their program. This means that MetaStreet will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. \n\n__Immunefi Standard Badge__\n\nMetaStreet has satisfied the requirements for the [Immunefi Standard Badge,](https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-) which is given to projects that adhere to our best practices. \n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. \n\n__Reward Calculation for Critical Level Reports__\n\nFor critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $50,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $25,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.   \n__Repeatable Attack Limitations__\n\nIn cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.\n\n__Reward Calculation for High Level Reports__\n\nFor high Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $25,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $1,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.   \n\n__Previous Audits__\n\nMetaStreet has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.\n- [https://docs.metastreet.xyz/v2/audits](https://docs.metastreet.xyz/v2/audits)\n\n__Feasibility Limitations__\n\nAt Immunefi, we sometimes receive reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. If it’s obviously feasible, then it seems there are no questions about severity or payout amount. But if the bug report is less feasible, or not really feasible at all, suddenly questions arise.\n\nTherefore, Immunefi has developed a set of [feasibility limitation standards ](https://immunefisupport.zendesk.com/hc/en-us/articles/16913132495377-Feasibility-Limitation-Standards)which by default states what a Projects should or should not cite when downgrading a bug report’s impact, severity, and/or payout amount. These standards are continuously being developed and updated  with help of the community and encompasses fair guidelines where the project clearly commits, and the security researcher can be assured that the project cannot arbitrarily downgrade the program based on theoretical counter measures, such as a [chain rollback.](https://immunefisupport.zendesk.com/hc/en-us/articles/16913153448721-Chain-Rollbacks) \n\n__Proof of Concept (PoC) Requirements__\n\nA PoC is required for the following severity levels:\n- Smart Contract + Critical\n- Smart Contract + High\n\nAll PoCs submitted must comply with the Immunefi-wide [PoC Guidelines and Rules.](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules) Bug report submissions without a PoC when a PoC is required will not be provided with a reward.\n\n__Reward Payment Terms__\n\nPayouts are handled by the MetaStreet team directly and are denominated in USD. However, payments are done in USDC.\n",
      "outOfScopeAndRules": "These impacts are out of scope for this bug bounty program. \n\n__All Categories__\n\n- Impacts requiring attacks that the reporter has already exploited themselves, leading to damage\n- Impacts caused by attacks requiring access to leaked keys/credentials\n- Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\n- Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code\n- Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production\n- Best practice recommendations\n- Feature requests\n- Impacts on test files and configuration files unless stated otherwise in the bug bounty program\n\n__Smart Contracts__\n\n- Incorrect data supplied by third party oracles\n   - Not to exclude oracle manipulation/flash loan attacks\n- Impacts requiring basic economic and governance attacks (e.g. 51% attack)\n- Lack of liquidity impacts\n- Impacts from Sybil attacks\n- Impacts involving centralization risks\n- Best practice recommendations\n- Impacts involving unsupported tokens (tokens with transfer hooks (e.g. ERC777), fee-on-transfer tokens, blocklistable tokens, and non-standard ERC20 or ERC721 tokens)\n- Impacts involving griefing and/or denial of service in the Collateral Liquidator due to using unsupported tokens\n- Impacts involving the Pool or Collateral Liquidator deployed with misconfigured or malicious parameters\n- Theft of unclaimed yield by speculation on loan repayment or liquidation\n- Freezing of tokens or funds due to unsupported airdrops to assets in escrow\n",
      "assetsBodyV2": "All code of MetaStreet can be found at [https://github.com/metastreet-labs/metastreet-contracts-v2.](https://github.com/metastreet-labs/metastreet-contracts-v2) Documentation for the assets provided in the table can be found at [https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs.](https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs)\n\nOther helpful links include:\n- GitBook - [https://docs.metastreet.xyz/](https://docs.metastreet.xyz/)\n- Design Document - [https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md](https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md)\n- Redemption Design Document - [https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md](https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md)\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Lending"
        ],
        "projectType": [
          "Defi",
          "NFT"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $25,000 to USD $50,000"
          },
          {
            "level": "High",
            "payout": "USD $1,000 to USD $25,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The MetaStreet v2 Pool is a permissionless NFT-collateralized lending pool with automatic tranching. Pool is responsible for organizing lending capital with different risk and rate profiles from depositors into fixed-duration loans for borrowers.\"), mdx(\"p\", null, \"For more information about MetaStreet, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.metastreet.xyz/\"\n  }, \"https://www.metastreet.xyz/\")), mdx(\"p\", null, \"MetaStreet provides rewards in USDC. For more details about the payment process, please view the Rewards by Threat Level section further below. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Responsible Publication\")), mdx(\"p\", null, \"MetaStreet adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/responsible-publication/\"\n  }, \"Responsible Publication\"), \" page.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Primacy of Impact vs Primacy of Rules\")), mdx(\"p\", null, \"MetaStreet adheres to the Primacy of Impact for the following impacts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: Critical: Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: Critical: Direct theft of any user NFTs, whether at-rest or in-motion, other than unclaimed royalties\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: Critical: Creating a loan with a greater principal than allowed by depositor risk limits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: Critical: Creating a bundle-collateralized loan with a greater multiplier in the principal than there are NFTs in the bundle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: High: Creating interest-free loans of typical principal and duration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: High: Theft of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: High: Denial of service in loan repayment or liquidation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract: High: Permanent freezing of unclaimed yield\")), mdx(\"p\", null, \"If an impact is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.\"), mdx(\"p\", null, \"Testnet and mock files are not covered under the Primacy of Impact.\"), mdx(\"p\", null, \"All other impacts are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\"), mdx(\"p\", null, \"All other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Known Issue Assurance\")), mdx(\"p\", null, \"MetaStreet commits to providing Known Issue Assurance to bug submissions through their program. This means that MetaStreet will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Immunefi Standard Badge\")), mdx(\"p\", null, \"MetaStreet has satisfied the requirements for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-\"\n  }, \"Immunefi Standard Badge,\"), \" which is given to projects that adhere to our best practices. \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The MetaStreet v2 Pool is a permissionless NFT-collateralized lending pool with automatic tranching. Pool is responsible for organizing lending capital with different risk and rate profiles from depositors into fixed-duration loans for borrowers.</p><p>For more information about MetaStreet, please visit <a href=\"https://www.metastreet.xyz/\">https://www.metastreet.xyz/</a></p><p>MetaStreet provides rewards in USDC. For more details about the payment process, please view the Rewards by Threat Level section further below. </p><p><strong>Responsible Publication</strong></p><p>MetaStreet adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our <a href=\"https://immunefi.com/responsible-publication/\">Responsible Publication</a> page.</p><p><strong>Primacy of Impact vs Primacy of Rules</strong></p><p>MetaStreet adheres to the Primacy of Impact for the following impacts:</p><ul><li>Smart Contract: Critical: Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield</li><li>Smart Contract: Critical: Direct theft of any user NFTs, whether at-rest or in-motion, other than unclaimed royalties</li><li>Smart Contract: Critical: Creating a loan with a greater principal than allowed by depositor risk limits</li><li>Smart Contract: Critical: Creating a bundle-collateralized loan with a greater multiplier in the principal than there are NFTs in the bundle</li><li>Smart Contract: High: Creating interest-free loans of typical principal and duration</li><li>Smart Contract: High: Theft of unclaimed yield</li><li>Smart Contract: High: Denial of service in loan repayment or liquidation</li><li>Smart Contract: High: Permanent freezing of unclaimed yield</li></ul><p>If an impact is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.</p><p>Testnet and mock files are not covered under the Primacy of Impact.</p><p>All other impacts are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.</p><p>All other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.</p><p><strong>Known Issue Assurance</strong></p><p>MetaStreet commits to providing Known Issue Assurance to bug submissions through their program. This means that MetaStreet will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. </p><p><strong>Immunefi Standard Badge</strong></p><p>MetaStreet has satisfied the requirements for the <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-\">Immunefi Standard Badge,</a> which is given to projects that adhere to our best practices. </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Calculation for Critical Level Reports\")), mdx(\"p\", null, \"For critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $50,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $25,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Repeatable Attack Limitations\")), mdx(\"p\", null, \"In cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Calculation for High Level Reports\")), mdx(\"p\", null, \"For high Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $25,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $1,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.   \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Previous Audits\")), mdx(\"p\", null, \"MetaStreet has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.metastreet.xyz/v2/audits\"\n  }, \"https://docs.metastreet.xyz/v2/audits\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Feasibility Limitations\")), mdx(\"p\", null, \"At Immunefi, we sometimes receive reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. If it\\u2019s obviously feasible, then it seems there are no questions about severity or payout amount. But if the bug report is less feasible, or not really feasible at all, suddenly questions arise.\"), mdx(\"p\", null, \"Therefore, Immunefi has developed a set of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/16913132495377-Feasibility-Limitation-Standards\"\n  }, \"feasibility limitation standards \"), \"which by default states what a Projects should or should not cite when downgrading a bug report\\u2019s impact, severity, and/or payout amount. These standards are continuously being developed and updated  with help of the community and encompasses fair guidelines where the project clearly commits, and the security researcher can be assured that the project cannot arbitrarily downgrade the program based on theoretical counter measures, such as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/16913153448721-Chain-Rollbacks\"\n  }, \"chain rollback.\"), \" \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Proof of Concept (PoC) Requirements\")), mdx(\"p\", null, \"A PoC is required for the following severity levels:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract + Critical\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contract + High\")), mdx(\"p\", null, \"All PoCs submitted must comply with the Immunefi-wide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\"\n  }, \"PoC Guidelines and Rules.\"), \" Bug report submissions without a PoC when a PoC is required will not be provided with a reward.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Payment Terms\")), mdx(\"p\", null, \"Payouts are handled by the MetaStreet team directly and are denominated in USD. However, payments are done in USDC.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. </p><p><strong>Reward Calculation for Critical Level Reports</strong></p><p>For critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $50,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $25,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.<br/>\n<strong>Repeatable Attack Limitations</strong></p><p>In cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.</p><p><strong>Reward Calculation for High Level Reports</strong></p><p>For high Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD $25,000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD $1,000 is to be rewarded in order to incentivize security researchers against withholding a bug report.   </p><p><strong>Previous Audits</strong></p><p>MetaStreet has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.</p><ul><li><a href=\"https://docs.metastreet.xyz/v2/audits\">https://docs.metastreet.xyz/v2/audits</a></li></ul><p><strong>Feasibility Limitations</strong></p><p>At Immunefi, we sometimes receive reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. If it’s obviously feasible, then it seems there are no questions about severity or payout amount. But if the bug report is less feasible, or not really feasible at all, suddenly questions arise.</p><p>Therefore, Immunefi has developed a set of <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/16913132495377-Feasibility-Limitation-Standards\">feasibility limitation standards </a>which by default states what a Projects should or should not cite when downgrading a bug report’s impact, severity, and/or payout amount. These standards are continuously being developed and updated  with help of the community and encompasses fair guidelines where the project clearly commits, and the security researcher can be assured that the project cannot arbitrarily downgrade the program based on theoretical counter measures, such as a <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/16913153448721-Chain-Rollbacks\">chain rollback.</a> </p><p><strong>Proof of Concept (PoC) Requirements</strong></p><p>A PoC is required for the following severity levels:</p><ul><li>Smart Contract + Critical</li><li>Smart Contract + High</li></ul><p>All PoCs submitted must comply with the Immunefi-wide <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\">PoC Guidelines and Rules.</a> Bug report submissions without a PoC when a PoC is required will not be provided with a reward.</p><p><strong>Reward Payment Terms</strong></p><p>Payouts are handled by the MetaStreet team directly and are denominated in USD. However, payments are done in USDC.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These impacts are out of scope for this bug bounty program. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"All Categories\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts requiring attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts caused by attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice recommendations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Feature requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts on test files and configuration files unless stated otherwise in the bug bounty program\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts requiring basic economic and governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity impacts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts from Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts involving centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice recommendations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts involving unsupported tokens (tokens with transfer hooks (e.g. ERC777), fee-on-transfer tokens, blocklistable tokens, and non-standard ERC20 or ERC721 tokens)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts involving griefing and/or denial of service in the Collateral Liquidator due to using unsupported tokens\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts involving the Pool or Collateral Liquidator deployed with misconfigured or malicious parameters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft of unclaimed yield by speculation on loan repayment or liquidation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Freezing of tokens or funds due to unsupported airdrops to assets in escrow\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>These impacts are out of scope for this bug bounty program. </p><p><strong>All Categories</strong></p><ul><li>Impacts requiring attacks that the reporter has already exploited themselves, leading to damage</li><li>Impacts caused by attacks requiring access to leaked keys/credentials</li><li>Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible</li><li>Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code</li><li>Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production</li><li>Best practice recommendations</li><li>Feature requests</li><li>Impacts on test files and configuration files unless stated otherwise in the bug bounty program</li></ul><p><strong>Smart Contracts</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Impacts requiring basic economic and governance attacks (e.g. 51% attack)</li><li>Lack of liquidity impacts</li><li>Impacts from Sybil attacks</li><li>Impacts involving centralization risks</li><li>Best practice recommendations</li><li>Impacts involving unsupported tokens (tokens with transfer hooks (e.g. ERC777), fee-on-transfer tokens, blocklistable tokens, and non-standard ERC20 or ERC721 tokens)</li><li>Impacts involving griefing and/or denial of service in the Collateral Liquidator due to using unsupported tokens</li><li>Impacts involving the Pool or Collateral Liquidator deployed with misconfigured or malicious parameters</li><li>Theft of unclaimed yield by speculation on loan repayment or liquidation</li><li>Freezing of tokens or funds due to unsupported airdrops to assets in escrow</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All code of MetaStreet can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/metastreet-labs/metastreet-contracts-v2\"\n  }, \"https://github.com/metastreet-labs/metastreet-contracts-v2.\"), \" Documentation for the assets provided in the table can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs\"\n  }, \"https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs.\")), mdx(\"p\", null, \"Other helpful links include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GitBook - \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.metastreet.xyz/\"\n  }, \"https://docs.metastreet.xyz/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Design Document - \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md\"\n  }, \"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redemption Design Document - \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md\"\n  }, \"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All code of MetaStreet can be found at <a href=\"https://github.com/metastreet-labs/metastreet-contracts-v2\">https://github.com/metastreet-labs/metastreet-contracts-v2.</a> Documentation for the assets provided in the table can be found at <a href=\"https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs\">https://github.com/metastreet-labs/metastreet-contracts-v2/tree/master/docs.</a></p><p>Other helpful links include:</p><ul><li>GitBook - <a href=\"https://docs.metastreet.xyz/\">https://docs.metastreet.xyz/</a></li><li>Design Document - <a href=\"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md\">https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/DESIGN.md</a></li><li>Redemption Design Document - <a href=\"https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md\">https://github.com/metastreet-labs/metastreet-contracts-v2/blob/master/docs/REDEMPTION.md</a></li></ul>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
