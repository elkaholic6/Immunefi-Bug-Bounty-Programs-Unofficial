{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "starknet",
      "slug": "starknet",
      "project": "StarkNet",
      "maxBounty": 1000000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/697QbnLLPl03S9Ds7IaYs5/de490ef7004e9340fad4921110c4c257/StarkNet_Icon.png",
      "launchDate": "2022-10-19T00:30-06:00",
      "updatedDate": "2023-02-03T15:45:32.458Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "blockchain_dlt",
          "level": "critical",
          "payout": "USD $40,000 - $500,000",
          "pocRequired": false
        },
        {
          "assetType": "blockchain_dlt",
          "level": "high",
          "payout": "USD $30,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $50,000 - $1,000,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $30,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "2BYnqP2HaOqpxWMOIU0BrT",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/contract_address/contract_address.cairo",
          "description": "StarkNet OS - contract_address/contract_address.cairo"
        },
        {
          "id": "3F0iaglE3LCkKc0edumBBx",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/os_config/os_config.cairo",
          "description": "StarkNet OS - os_config/os_config.cairo"
        },
        {
          "id": "1BSRkSgN6zA2JpZBSUFCo9",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/transaction_hash/transaction_hash.cairo",
          "description": "StarkNet OS - transaction_hash/transaction_hash.cairo"
        },
        {
          "id": "7BWyFyEHgP25VxQHkmIBM8",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/block_context.cairo",
          "description": "StarkNet OS - block_context.cairo"
        },
        {
          "id": "6L9myH0DCemAIdSTrcqyJc",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/builtins.cairo",
          "description": "StarkNet OS - builtins.cairo"
        },
        {
          "id": "2O799z00GMLtTC3puWhT8u",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/contracts.cairo",
          "description": "StarkNet OS - contracts.cairo"
        },
        {
          "id": "MkDnItum3YpB5XcdS91GY",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/os.cairo",
          "description": "StarkNet OS - os.cairo"
        },
        {
          "id": "3et4M5UQh16QwQxhqDKt0X",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/output.cairo",
          "description": "StarkNet OS - output.cairo"
        },
        {
          "id": "4MEnfAPMToCz2b7RkMa5U8",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/state.cairo",
          "description": "StarkNet OS - state.cairo"
        },
        {
          "id": "6qCUg3o1J3B5ntMKHsI5ou",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/core/os/transactions.cairo",
          "description": "StarkNet OS - transactions.cairo"
        },
        {
          "id": "3znihYTREYWaPvae5PO85z",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/IStarknetMessaging.sol",
          "description": "StarkNet L1 Core Contract - IStarknetMessaging.sol"
        },
        {
          "id": "34mTstFDGDZkeHePIxIntq",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/IStarknetMessagingEvents.sol",
          "description": "StarkNet L1 Core Contract - IStarknetMessagingEvents.sol"
        },
        {
          "id": "5G0xJPbjgHv6NDvDQa68Q7",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/Output.sol",
          "description": "StarkNet L1 Core Contract - Output.sol"
        },
        {
          "id": "2ub0trrG2Is292ZAvkbAaX",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/Starknet.sol",
          "description": "StarkNet L1 Core Contract - Starknet.sol"
        },
        {
          "id": "6f4Ug687aapxjTF296gVGp",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/StarknetGovernance.sol",
          "description": "StarkNet L1 Core Contract - StarknetGovernance.sol"
        },
        {
          "id": "5smZArfQpP0YTVjCOo0Gtc",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/StarknetMessaging.sol",
          "description": "StarkNet L1 Core Contract - StarknetMessaging.sol"
        },
        {
          "id": "3I3f31Pcm3hE5rDmfniqr7",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/StarknetOperator.sol",
          "description": "StarkNet L1 Core Contract - StarknetOperator.sol"
        },
        {
          "id": "1xWEQdTi67inQyZd2JPfwV",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/solidity/StarknetState.sol",
          "description": "StarkNet L1 Core Contract - StarknetState.sol"
        },
        {
          "id": "6OTBMSUZeokF1tJa63yG8e",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/FactRegistry.sol",
          "description": "StarkNet L1 Core Contract - FactRegistry.sol"
        },
        {
          "id": "3q7pcCckI8t1VITz8wBrmy",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/GenericGovernance.sol",
          "description": "StarkNet L1 Core Contract - GenericGovernance.sol"
        },
        {
          "id": "rUYju1DteR0kwXGvfZVoj",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/Governance.sol",
          "description": "StarkNet L1 Core Contract - Governance.sol"
        },
        {
          "id": "3wvKbjKwfiVCaxBBOKhK6E",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/GovernanceStorage.sol",
          "description": "StarkNet L1 Core Contract - GovernanceStorage.sol"
        },
        {
          "id": "1c5cKIp8rGysdBoI7bPMex",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/GovernedFinalizable.sol",
          "description": "StarkNet L1 Core Contract - GovernedFinalizable.sol"
        },
        {
          "id": "6abV8OXPTrK579U1QQFEX5",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/OnchainDataFactTreeEncoder.sol",
          "description": "StarkNet L1 Core Contract - OnchainDataFactTreeEncoder.sol"
        },
        {
          "id": "2kfwrqHYPZI9pFohP9FVYn",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/solidity/components/Operator.sol",
          "description": "StarkNet L1 Core Contract - Operator.sol"
        },
        {
          "id": "5W6asDHP81W97jTABhCqZa",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/alloc.cairo",
          "description": "Cairo - alloc.cairo"
        },
        {
          "id": "6jyUeP7jMRypBfZxshbzbH",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/bitwise.cairo",
          "description": "Cairo - bitwise.cairo"
        },
        {
          "id": "2JAF8mfQzxhxbL0wZo9JRx",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/bool.cairo",
          "description": "Cairo - bool.cairo"
        },
        {
          "id": "6kBOy4bbRYFNImH0toyxh3",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/cairo_builtins.cairo",
          "description": "Cairo - cairo_builtins.cairo"
        },
        {
          "id": "3ggzfXDTcaLTKjo5nP9Tvf",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/default_dict.cairo",
          "description": "Cairo - default_dict.cairo"
        },
        {
          "id": "1VoHJwx1Rm0KBZL1DyxGTA",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/dict.cairo",
          "description": "Cairo - dict.cairo"
        },
        {
          "id": "44ZKSDoH4mIOT0idQ8VwrM",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/dict_access.cairo",
          "description": "Cairo - dict_access.cairo"
        },
        {
          "id": "5RADhAsnNh2PNzU5T6MZUM",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/ec.cairo",
          "description": "Cairo - ec.cairo"
        },
        {
          "id": "4iQiCSm8aNM5DKGAjQWXtj",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/ec_point.cairo",
          "description": "Cairo - ec_point.cairo"
        },
        {
          "id": "7xuymkfriRK7eVomcIwTtT",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/find_element.cairo",
          "description": "Cairo - find_element.cairo"
        },
        {
          "id": "180xmR3CnLErOLhofCVpk2",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/hash.cairo",
          "description": "Cairo - hash.cairo"
        },
        {
          "id": "3FIgF88TNIHUP8OY1zo3wZ",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/hash_chain.cairo",
          "description": "Cairo - hash_chain.cairo"
        },
        {
          "id": "34zTATvfZawakNMwKAuBba",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/hash_state.cairo",
          "description": "Cairo - hash_state.cairo"
        },
        {
          "id": "4D1YMn54EoEtfqeRPBwibI",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/invoke.cairo",
          "description": "Cairo - invoke.cairo"
        },
        {
          "id": "4GUhfDdvhEWHmnEtYU6QPu",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/keccak.cairo",
          "description": "Cairo - keccak.cairo"
        },
        {
          "id": "6edVY7DWpz8gjAlQgVfczV",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/math.cairo",
          "description": "Cairo - math.cairo"
        },
        {
          "id": "JeIHtRQIyTvj1lrQnHwvb",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/math_cmp.cairo",
          "description": "Cairo - math_cmp.cairo"
        },
        {
          "id": "6w6lQ2Fles0eFF7WpwJznI",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/memcpy.cairo",
          "description": "Cairo - memcpy.cairo"
        },
        {
          "id": "01c5VYCr10xsd0WiVCuiHv",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/memset.cairo",
          "description": "Cairo - memset.cairo"
        },
        {
          "id": "63GFIYQcA5Uea8BrlMdHEd",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/merkle_multi_update.cairo",
          "description": "Cairo - merkle_multi_update.cairo"
        },
        {
          "id": "65P6VEkOIOoiFcoQNWa77R",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/merkle_update.cairo",
          "description": "Cairo - merkle_update.cairo"
        },
        {
          "id": "5QPFr4tbUlVLwS5LJ0yLdq",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/patricia.cairo",
          "description": "Cairo - patricia.cairo"
        },
        {
          "id": "1e97hRJ8e07FF8zDqxaIfi",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/pow.cairo",
          "description": "Cairo - pow.cairo"
        },
        {
          "id": "7n73cnpfTZBmIotIS97m5L",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/registers.cairo",
          "description": "Cairo - registers.cairo"
        },
        {
          "id": "24riGMq1rvVANbk5EAl9Z",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/segments.cairo",
          "description": "Cairo - segments.cairo"
        },
        {
          "id": "zNqv5WNvcwfovGIEu0k8i",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/serialize.cairo",
          "description": "Cairo - serialize.cairo"
        },
        {
          "id": "7Kyd2pfFNZJYL9ihcdzmEV",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/set.cairo",
          "description": "Cairo - set.cairo"
        },
        {
          "id": "62T9OlvnSD74O4VETBoRl1",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/signature.cairo",
          "description": "Cairo - signature.cairo"
        },
        {
          "id": "6CRHzgVp7TeO5FTksVnmxx",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/small_merkle_tree.cairo",
          "description": "Cairo - small_merkle_tree.cairo"
        },
        {
          "id": "4r0yBtRHgviPrtsAxj8JM1",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/squash_dict.cairo",
          "description": "Cairo - squash_dict.cairo"
        },
        {
          "id": "2k3NuaFNJ01lZlWP4zxDM",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/uint256.cairo",
          "description": "Cairo - uint256.cairo"
        },
        {
          "id": "4WDQJ5uYVef2as0MITqJIj",
          "type": "blockchain_dlt",
          "url": "https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/usort.cairo",
          "description": "Cairo - usort.cairo"
        },
        {
          "id": "7Hg83lWAe9OvK0bOlqkKDa",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/BlockDirectCall.sol",
          "description": "StarkGate - solidity/interfaces/BlockDirectCall.sol"
        },
        {
          "id": "2OF24vqiTu8guHDNABdJf",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/ContractInitializer.sol",
          "description": "StarkGate - solidity/interfaces/ContractInitializer.sol"
        },
        {
          "id": "1Onlmoxqoc8ZB8HvdSodZS",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/ExternalInitializer.sol",
          "description": "StarkGate - solidity/interfaces/ExternalInitializer.sol"
        },
        {
          "id": "3qAOyXvHRpR6MPyt3jMN75",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/IFactRegistry.sol",
          "description": "StarkGate - solidity/interfaces/IFactRegistry.sol"
        },
        {
          "id": "3evsWMRGiRzyJh10L3qGVV",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/IQueryableFactRegistry.sol",
          "description": "StarkGate - solidity/interfaces/IQueryableFactRegistry.sol"
        },
        {
          "id": "27zjslONH5NbBOtNAqmtiC",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/Identity.sol",
          "description": "StarkGate - solidity/interfaces/Identity.sol"
        },
        {
          "id": "700rzvrC0QvjSZwpGk1qlY",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/MGovernance.sol",
          "description": "StarkGate - solidity/interfaces/MGovernance.sol"
        },
        {
          "id": "6Ye7QTUalG7pyzUqxfIqxU",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/MOperator.sol",
          "description": "StarkGate - solidity/interfaces/MOperator.sol"
        },
        {
          "id": "6w785fWvJDtewjtQ7vAPZY",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/interfaces/ProxySupport.sol",
          "description": "StarkGate - solidity/interfaces/ProxySupport.sol"
        },
        {
          "id": "A45KFrCqe9DzXpJw0p69U",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/libraries/Addresses.sol",
          "description": "StarkGate - solidity/libraries/Addresses.sol"
        },
        {
          "id": "2QzRFVAneS0PVVJpVyolyc",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/libraries/NamedStorage.sol",
          "description": "StarkGate - solidity/libraries/NamedStorage.sol"
        },
        {
          "id": "4aGPys4pxXvPrQF4EunVLS",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/tokens/ERC20/ERC20.sol",
          "description": "StarkGate - solidity/tokens/ERC20/ERC20.sol"
        },
        {
          "id": "15HOdyCcmz0CSASXC2TDi6",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/tokens/ERC20/IERC20.sol",
          "description": "StarkGate - solidity/tokens/ERC20/ERC20.sol"
        },
        {
          "id": "4gTHDtszwKcjmposvOPzbL",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/tokens/ERC20/IERC20Metadata.sol",
          "description": "StarkGate - solidity/tokens/ERC20/IERC20Metadata.sol"
        },
        {
          "id": "5kRDZXTfv8wsiFWlX5PEMN",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/upgrade/Proxy.sol",
          "description": "StarkGate - solidity/upgrade/Proxy.sol"
        },
        {
          "id": "1fjXTLLRjqs8qnuTY0lVA3",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/upgrade/ProxyGovernance.sol",
          "description": "StarkGate - solidity/upgrade/ProxyGovernance.sol"
        },
        {
          "id": "7ymzZQqhcQgncjgX1f4omG",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/upgrade/ProxyStorage.sol",
          "description": "StarkGate - solidity/upgrade/ProxyStorage.sol"
        },
        {
          "id": "5h1vfZ0LDQrzKrJzDYkDze",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/solidity/upgrade/StorageSlots.sol",
          "description": "StarkGate - solidity/upgrade/StorageSlots.sol"
        },
        {
          "id": "2hZYuoeRV9WiiL0fBeyghw",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/cairo/eth/CairoConstants.sol",
          "description": "StarkGate - cairo/eth/CairoConstants.sol"
        },
        {
          "id": "1ozwRfsJtETNleucoC14fC",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/cairo/token_bridge.cairo",
          "description": "StarkGate - starknet/apps/starkgate/cairo/token_bridge.cairo"
        },
        {
          "id": "6vZiDFSK4Hs6BQnbWR8V5J",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/cairo/token_bridge_interface.cairo",
          "description": "StarkGate - starknet/apps/starkgate/cairo/token_bridge_interface.cairo"
        },
        {
          "id": "66Csojp38fXHvLnhDEBGbe",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetBridgeConstatns.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetBridgeConstatns.sol"
        },
        {
          "id": "7fE0WH7mMCFZGcxZz509z6",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetBridgeConstatns.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetBridgeConstatns.sol"
        },
        {
          "id": "4Xv11SiWAVnDi2cSbm47nM",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetERC20Bridge.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetERC20Bridge.sol"
        },
        {
          "id": "43WbCfL4CuK3vxTPopiMiS",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetEthBridge.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetEthBridge.sol"
        },
        {
          "id": "3CllaIzdzXwOHlXWlkJg8G",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetTokenBridge.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetTokenBridge.sol"
        },
        {
          "id": "433cToAw6kXaeqQJsVYW56",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/StarknetTokenStorage.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/StarknetTokenStorage.sol"
        },
        {
          "id": "6ZngdmPs2X7CjtFwsc1IUR",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/apps/starkgate/eth/Transfers.sol",
          "description": "StarkGate - starknet/apps/starkgate/eth/Transfers.sol"
        },
        {
          "id": "37u3nLqsN6ev5OzyVPjERF",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/ERC20/ERC20.cairo",
          "description": "StarkGate - starknet/std_contracts/ERC20/ERC20.cairo"
        },
        {
          "id": "18r2vi8rRlOhBO6IZhPuPa",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/ERC20/ERC20_base.cairo",
          "description": "StarkGate - starknet/std_contracts/ERC20/ERC20_base.cairo"
        },
        {
          "id": "4lBNzr7Or67dWdbnv4CmiU",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/ERC20/IERC20.cairo",
          "description": "StarkGate - starknet/std_contracts/ERC20/IERC20.cairo"
        },
        {
          "id": "7v63sE5FOi5PvOR7QfUA07",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/ERC20/mintable_token_interface.cairo",
          "description": "StarkGate - starknet/std_contracts/ERC20/mintable_token_interface.cairo"
        },
        {
          "id": "7c9pqlQoBQgvEScfRV2X3p",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/ERC20/permitted.cairo",
          "description": "StarkGate - starknet/std_contracts/ERC20/permitted.cairo"
        },
        {
          "id": "5UmyLtHsI7Oj0oaYxj9CUN",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/Initializable_interface.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/Initializable_interface.cairo"
        },
        {
          "id": "nD9EhOdfUded59z9d4ipy",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/finalizable.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/finalizable.cairo"
        },
        {
          "id": "3pHPc3qc6l7J8nQSukK0US",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/governance.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/governance.cairo"
        },
        {
          "id": "2dlx4R0VOREtXIvYZJHA0h",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/initializable.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/initializable.cairo"
        },
        {
          "id": "4WkLCgA86Jxq1Cq0I1I6Il",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/proxy.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/proxy.cairo"
        },
        {
          "id": "3gYVD1byz39qHACqXw41Kc",
          "type": "smart_contract",
          "url": "https://github.com/starkware-libs/starkgate-contracts/blob/main/src/starkware/starknet/std_contracts/upgradability_proxy/proxy_impl.cairo",
          "description": "StarkGate - starknet/std_contracts/upgradability_proxy/proxy_impl.cairo"
        }
      ],
      "impacts": [
        {
          "id": "4KsPgBurVJm28LFu0seghr",
          "title": "Direct loss of funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "7HaEw7hey7k39gXEqfNKC5",
          "title": "Permanent freezing of funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "7xDAKowjGtLS29PaXFH6YY",
          "title": "Direct theft of any user funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3U96j5Q8RaHqNdZgOv2TTL",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "76a5OtyaHfM6Ij4UamwaFP",
          "title": "Protocol insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4cMqshhkv3eXyQQYrcsLNW",
          "title": "Temporary freezing of funds for at least 1 week",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "6ii78jeC5P9DD2fAU95S4n",
          "title": "Temporary freezing of funds for at least 1 week",
          "type": "smart_contract",
          "severity": "high"
        }
      ],
      "programOverview": "StarkNet is a validity rollup based on zk-STARK proofs. It operates as an L2 network over Ethereum, enabling any dApp to achieve scale for its computation – without compromising Ethereum's composability and security.\n\nStarkNet is currently still in “alpha” stage. For more information about StarkNet, please visit [https://starknet.io/](https://starknet.io/) and [https://docs.starknet.io/](https://docs.starknet.io/).",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\n\nAll smart contract bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.\n\nRewards for critical Blockchain/DLT vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of __USD 40 000__ and a maximum reward of __USD 500 000__.\n\nRewards for critical Smart Contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of __USD 50 000__ and a maximum reward of __USD 1 000 000__.\n\nStarkNet requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed is a full legal name, residential address, date of birth and copy of national ID\\ passport. Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list and/or do not complete the KYC.\n\nThe following person(s) are ineligible to receive bug bounty payout rewards: StarkWare Staff, Auditors and Contractors engaged by StarkWare, persons in possession of privileged information, and any other associated parties. \n\nPayouts are handled by the __StarkNet__ team directly and are denominated in USD. However, payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risk\n  - Sequencer bugs \n  - Exploits as a result of a malicious sequencer\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All code of StarkNet can be found at [https://github.com/starkware-libs](https://github.com/starkware-libs). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nIf an impact can be caused to any other asset managed by StarkWare that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L2"
        ],
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": null,
        "programType": [
          "Blockchain/DLT",
          "Smart Contract"
        ],
        "language": null
      },
      "legacy": {
        "technologies": [
          "Smart Contract",
          "Blockchain/DLT"
        ],
        "blockchain_rewards": [
          {
            "level": "Critical",
            "payout": "USD $40,000 - $500,000"
          },
          {
            "level": "High",
            "payout": "USD $30,000"
          }
        ],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $50,000 - $1,000,000"
          },
          {
            "level": "High",
            "payout": "USD $30,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"StarkNet is a validity rollup based on zk-STARK proofs. It operates as an L2 network over Ethereum, enabling any dApp to achieve scale for its computation \\u2013 without compromising Ethereum's composability and security.\"), mdx(\"p\", null, \"StarkNet is currently still in \\u201Calpha\\u201D stage. For more information about StarkNet, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://starknet.io/\"\n  }, \"https://starknet.io/\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.starknet.io/\"\n  }, \"https://docs.starknet.io/\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>StarkNet is a validity rollup based on zk-STARK proofs. It operates as an L2 network over Ethereum, enabling any dApp to achieve scale for its computation – without compromising Ethereum&#x27;s composability and security.</p><p>StarkNet is currently still in “alpha” stage. For more information about StarkNet, please visit <a href=\"https://starknet.io/\">https://starknet.io/</a> and <a href=\"https://docs.starknet.io/\">https://docs.starknet.io/</a>.</p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\"), mdx(\"p\", null, \"All smart contract bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.\"), mdx(\"p\", null, \"Rewards for critical Blockchain/DLT vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 40 000\"), \" and a maximum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 500 000\"), \".\"), mdx(\"p\", null, \"Rewards for critical Smart Contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \" and a maximum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 1 000 000\"), \".\"), mdx(\"p\", null, \"StarkNet requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed is a full legal name, residential address, date of birth and copy of national ID\\\\ passport. Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list and/or do not complete the KYC.\"), mdx(\"p\", null, \"The following person(s) are ineligible to receive bug bounty payout rewards: StarkWare Staff, Auditors and Contractors engaged by StarkWare, persons in possession of privileged information, and any other associated parties. \"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StarkNet\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.</p><p>All smart contract bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.</p><p>Rewards for critical Blockchain/DLT vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of <strong>USD 40 000</strong> and a maximum reward of <strong>USD 500 000</strong>.</p><p>Rewards for critical Smart Contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of <strong>USD 50 000</strong> and a maximum reward of <strong>USD 1 000 000</strong>.</p><p>StarkNet requires KYC to be done for all bug bounty hunters submitting a report and wanting a reward. The information needed is a full legal name, residential address, date of birth and copy of national ID\\ passport. Bounty hunters must pass OFAC Screening. Rewards cannot be paid out if hunters are on the OFAC SDN list and/or do not complete the KYC.</p><p>The following person(s) are ineligible to receive bug bounty payout rewards: StarkWare Staff, Auditors and Contractors engaged by StarkWare, persons in possession of privileged information, and any other associated parties. </p><p>Payouts are handled by the <strong>StarkNet</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risk\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sequencer bugs \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exploits as a result of a malicious sequencer\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risk</li><li>Sequencer bugs </li><li>Exploits as a result of a malicious sequencer</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All code of StarkNet can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/starkware-libs\"\n  }, \"https://github.com/starkware-libs\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"If an impact can be caused to any other asset managed by StarkWare that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All code of StarkNet can be found at <a href=\"https://github.com/starkware-libs\">https://github.com/starkware-libs</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>If an impact can be caused to any other asset managed by StarkWare that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
