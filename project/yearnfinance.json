{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "yearnfinance",
      "slug": "yearnfinance",
      "project": "Yearn Finance",
      "maxBounty": 200000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/2Dpad2OkwlP4SAfEzsQk5j/9064a1846d23ecad7b306fe81d5bb501/Yearn.png",
      "launchDate": "2021-07-01T00:00-07:00",
      "updatedDate": "2022-11-22T13:48:41.920Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $20,000 - $USD 200,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $5,000 - $USD 20,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $1,000 - USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $100 - USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "2rszBurN4m8KUtN2ZLmBGO",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x5b4F3BE554a88Bd0f8d8769B9260be865ba03B4a#code",
          "description": "StrategiesHelper - list of production strategy addresses"
        },
        {
          "id": "3D4XCec83IeQ3UZbYJ5fXg",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x437758D475F70249e03EDa6bE23684aD1FC375F0#code",
          "description": "AddressesGeneratorV2Vaults - list of endorsed v2 vault addresses"
        },
        {
          "id": "1nPT5ztf9IQKL3Zw7YtWqh",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xa0B57619A980DFEfD50f24F310EE1b55A40A9D46#code",
          "description": "AddressesGeneratorIronBank - list of iron bank market addresses"
        }
      ],
      "impacts": [
        {
          "id": "2RC0QPEpwDbNKnPb7cEy4z",
          "title": "Critical smart contract impact",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4AyHfR56iMGAAYV6rJrwXl",
          "title": "High smart contract impact",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "62Yqb1nNMooQnmfceviCOS",
          "title": "Medium smart contract impact",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "1hkE740bOKbEtvD1ex6WFd",
          "title": "Low smart contract impact",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation and yield generation on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders. Their products include: \n\n__Vaults__\nCapital pools that automatically generate yield based on opportunities present in the market. Vaults benefit users by socializing gas costs, automating the yield generation and rebalancing process, and automatically shifting capital as opportunities arise. End users also do not need to have a proficient knowledge of the underlying protocols involved or DeFi, thus the Vaults represent a passive-investing strategy.\n\nFurther resources regarding Yearn Finance can be found on their website, [https://yearn.finance/](https://yearn.finance/) and [documentation](https://docs.yearn.finance/).  \n\nThe bug bounty program is focused around its smart contracts and is mostly concerned with the prevention of the loss of user funds. ",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the following types:\n\n- Re-entrancy\n- Logic errors\n  - including user authentication errors\n- Solidity/EVM details not considered\n  - including integer over-/under-flow\n  - including unhandled exceptions\n- Trusting trust/dependency vulnerabilities\n  - including composability vulnerabilities\n- Oracle failure/manipulation\n- Novel governance attacks\n- Economic/financial attacks\n  - including flash loan attacks\n- Congestion and scalability\n  - including running out of gas\n  - including block stuffing\n  - including susceptibility to frontrunning\n- Consensus failures\n- Cryptography problems\n- Signature malleability\n- Susceptibility to replay attacks\n- Weak randomness\n- Weak encryption\n- Susceptibility to block timestamp manipulation\n- Missing access controls / unprotected internal or debugging interfaces",
      "rewardsBody": "Rewards for Smart Contract vulnerabilities are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \n\nTo determine the final reward amount, the likelihood to have a meaningful impact on availability, integrity, and/or loss of funds is considered. The final decision on the payout amount will be determined by the Yearn Finance team at its discretion.\n\nPayouts are handled by the __Yearn Finance__ team directly and are denominated in USD. Payouts can be made in USDC, DAI, ETH, YFI, or their Yearn Vault counterparts. ",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, strategist)\n- Incorrect data supplied by third party oracles\n  - Not to exclude oracle manipulation/flash loan attacks\n- Basic economic governance attacks (e.g. 51% attack)\n- Lack of liquidity\n- Best practice critiques\n- Sybil attacks\n\n__Rules__\n\nThe rules of this bug bounty are as follows:\n\n- Bug has not been publicly disclosed.\n- Vulnerabilities that have been previously submitted by another contributor or already known by the Yearn development team are not eligible for rewards.\n- The size of the bounty payout depends on the assessment of the severity of the exploit. Please refer to the rewards section below for additional details.\n- Bugs must be reproducible in order for us to verify the vulnerability.\n- Rewards and the validity of bugs are determined by the Yearn security team and any payouts are made at their sole discretion.\n- Terms and conditions of the Bug Bounty program can be changed at any time at the discretion of Yearn.\n- Details of any valid bugs may be shared with complementary protocols utilized in the Yearn ecosystem in order to promote ecosystem cohesion and safety.\n\n__Bug Bounty FAQ__\n\nQ: Is there a time limit for the Bug Bounty program?\nA: No. The Bug Bounty program currently has no end date, but this can be changed at any time at the discretion of Yearn.\n\nQ: Can I submit bugs anonymously and still receive payment?\nA: Yes. If you wish to remain anonymous you can do so and still be eligible for rewards as long as they are for valid bugs. Rewards will be sent to the valid Ethereum address that you provide.\n\nQ: Can I donate my reward to charity?\nA: Yes. You may donate your reward to a charity of your choosing, or to a gitcoin grant.",
      "assetsBodyV2": "Yearn adds and removes Vaults and Strategies from Production on an ongoing basis. This assets in scope table includes onchain lists of smart contracts for which all contracts within them are considered as in-scope of the bug bounty program.\n\nThe following functions can be called to obtain a list of smart contract addresses that are currently in Production and that are covered by the program:\n\nStrategiesHelper - assetsStrategiesAddresses()\n\nAddressesGeneratorV2Vaults - assetsAddresses()\n\nAddressesGeneratorIronBank - assetsAddresses()\n\nOther contracts, outside of the ones mentioned here, might be considered on a case by case basis, as long as economic damage can be achieved. \n\nFor more further information about these smart contracts, please refer to their GitHub repository - [https://github.com/yearn/yearn-vaults](https://github.com/yearn/yearn-vaults). Additionally, you may refer to https://yearn.watch and [https://yearn.watch/stats](https://yearn.watch/stats) for more information about each smart contract. \n\n__Submission Requirements__\n\nIn order to be considered for a reward, all bug reports must contain the following:\n\n- Description of suspected vulnerability\n- Steps to reproduce the issue\n- Your name and/or colleagues if you wish to be later recognized\n- (Optional) A patch and/or suggestions to resolve the vulnerability\n\n__Ethical Behavior Requirements__\n\nResponsible disclosure is predicated on ethical behavior. These guidelines outline best practices for the community as whole, whether you are reporting, or the recipient of a report. By stating that you adhere to this policy, youâ€™re claiming to handle vulnerability information ethically, and abide by the following:\n\n- Do not attempt to leverage a vulnerability, or information of its existence, as part of a financial trading strategy or otherwise for financial gain.\n- Do not attempt to compromise systems upon which development of a product relies; including but not limited to compromising development systems, accounts, domains, email etc..\n- Do not attempt to sell vulnerability information or exploits.\n- Do not ask for any form of compensation from an affected party.\nYou may compensate a disclosing party if you would like to after all known vulnerability details have been disclosed.\n- Do not disclose a bug or vulnerability on mailing lists, public boards, forums, social media or any other channel prior to Responsibly Disclosing to the organizations you have a published relationship with\n- Do not attempt any illegal acts, including phishing, physical attacks, DDoS, or any attempt to gain access without authorization\n\n__3rd Party Affected Projects__\n\nIn the case where we become aware of security issues affecting other projects that has never affected Yearn, our intention is to inform those projects of security issues on a best effort basis.\n\nIn the case where we fix a security issue in Yearn that also affects the following neighboring projects, our intention is to engage in responsible disclosures with them as described in the adopted standard, subject to the deviations described in the deviations section below.\n\n__Deviations from the Standard__\n\nIn the case of a counterfeiting or fund-stealing bug affecting Yearn, however, we might decide not to include those details with our reports to partners ahead of coordinated release, as long as we are sure that they are not vulnerable.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Lending",
          "Yield Aggregator"
        ],
        "projectType": [
          "Blockchain",
          "Defi"
        ],
        "ecosystem": [
          "ETH",
          "Fantom"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $20,000 - $USD 200,000"
          },
          {
            "level": "High",
            "payout": "USD $5,000 - $USD 20,000"
          },
          {
            "level": "Medium",
            "payout": "USD $1,000 - USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $100 - USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation and yield generation on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders. Their products include: \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vaults\"), \"\\nCapital pools that automatically generate yield based on opportunities present in the market. Vaults benefit users by socializing gas costs, automating the yield generation and rebalancing process, and automatically shifting capital as opportunities arise. End users also do not need to have a proficient knowledge of the underlying protocols involved or DeFi, thus the Vaults represent a passive-investing strategy.\"), mdx(\"p\", null, \"Further resources regarding Yearn Finance can be found on their website, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://yearn.finance/\"\n  }, \"https://yearn.finance/\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.yearn.finance/\"\n  }, \"documentation\"), \".  \"), mdx(\"p\", null, \"The bug bounty program is focused around its smart contracts and is mostly concerned with the prevention of the loss of user funds. \"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation and yield generation on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders. Their products include: </p><p><strong>Vaults</strong>\nCapital pools that automatically generate yield based on opportunities present in the market. Vaults benefit users by socializing gas costs, automating the yield generation and rebalancing process, and automatically shifting capital as opportunities arise. End users also do not need to have a proficient knowledge of the underlying protocols involved or DeFi, thus the Vaults represent a passive-investing strategy.</p><p>Further resources regarding Yearn Finance can be found on their website, <a href=\"https://yearn.finance/\">https://yearn.finance/</a> and <a href=\"https://docs.yearn.finance/\">documentation</a>.  </p><p>The bug bounty program is focused around its smart contracts and is mostly concerned with the prevention of the loss of user funds. </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are especially interested in receiving and rewarding vulnerabilities of the following types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re-entrancy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including user authentication errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solidity/EVM details not considered\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including integer over-/under-flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including unhandled exceptions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including composability vulnerabilities\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oracle failure/manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Novel governance attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Economic/financial attacks\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Congestion and scalability\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including running out of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including block stuffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including susceptibility to frontrunning\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consensus failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cryptography problems\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Signature malleability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to replay attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak randomness\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak encryption\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to block timestamp manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing access controls / unprotected internal or debugging interfaces\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>We are especially interested in receiving and rewarding vulnerabilities of the following types:</p><ul><li>Re-entrancy</li><li>Logic errors<ul><li>including user authentication errors</li></ul></li><li>Solidity/EVM details not considered<ul><li>including integer over-/under-flow</li><li>including unhandled exceptions</li></ul></li><li>Trusting trust/dependency vulnerabilities<ul><li>including composability vulnerabilities</li></ul></li><li>Oracle failure/manipulation</li><li>Novel governance attacks</li><li>Economic/financial attacks<ul><li>including flash loan attacks</li></ul></li><li>Congestion and scalability<ul><li>including running out of gas</li><li>including block stuffing</li><li>including susceptibility to frontrunning</li></ul></li><li>Consensus failures</li><li>Cryptography problems</li><li>Signature malleability</li><li>Susceptibility to replay attacks</li><li>Weak randomness</li><li>Weak encryption</li><li>Susceptibility to block timestamp manipulation</li><li>Missing access controls / unprotected internal or debugging interfaces</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards for Smart Contract vulnerabilities are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \"), mdx(\"p\", null, \"To determine the final reward amount, the likelihood to have a meaningful impact on availability, integrity, and/or loss of funds is considered. The final decision on the payout amount will be determined by the Yearn Finance team at its discretion.\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Yearn Finance\"), \" team directly and are denominated in USD. Payouts can be made in USDC, DAI, ETH, YFI, or their Yearn Vault counterparts. \"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards for Smart Contract vulnerabilities are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. </p><p>To determine the final reward amount, the likelihood to have a meaningful impact on availability, integrity, and/or loss of funds is considered. The final decision on the payout amount will be determined by the Yearn Finance team at its discretion.</p><p>Payouts are handled by the <strong>Yearn Finance</strong> team directly and are denominated in USD. Payouts can be made in USDC, DAI, ETH, YFI, or their Yearn Vault counterparts. </p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rules\")), mdx(\"p\", null, \"The rules of this bug bounty are as follows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bug has not been publicly disclosed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities that have been previously submitted by another contributor or already known by the Yearn development team are not eligible for rewards.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The size of the bounty payout depends on the assessment of the severity of the exploit. Please refer to the rewards section below for additional details.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bugs must be reproducible in order for us to verify the vulnerability.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rewards and the validity of bugs are determined by the Yearn security team and any payouts are made at their sole discretion.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Terms and conditions of the Bug Bounty program can be changed at any time at the discretion of Yearn.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Details of any valid bugs may be shared with complementary protocols utilized in the Yearn ecosystem in order to promote ecosystem cohesion and safety.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bug Bounty FAQ\")), mdx(\"p\", null, \"Q: Is there a time limit for the Bug Bounty program?\\nA: No. The Bug Bounty program currently has no end date, but this can be changed at any time at the discretion of Yearn.\"), mdx(\"p\", null, \"Q: Can I submit bugs anonymously and still receive payment?\\nA: Yes. If you wish to remain anonymous you can do so and still be eligible for rewards as long as they are for valid bugs. Rewards will be sent to the valid Ethereum address that you provide.\"), mdx(\"p\", null, \"Q: Can I donate my reward to charity?\\nA: Yes. You may donate your reward to a charity of your choosing, or to a gitcoin grant.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li></ul><p><strong>Rules</strong></p><p>The rules of this bug bounty are as follows:</p><ul><li>Bug has not been publicly disclosed.</li><li>Vulnerabilities that have been previously submitted by another contributor or already known by the Yearn development team are not eligible for rewards.</li><li>The size of the bounty payout depends on the assessment of the severity of the exploit. Please refer to the rewards section below for additional details.</li><li>Bugs must be reproducible in order for us to verify the vulnerability.</li><li>Rewards and the validity of bugs are determined by the Yearn security team and any payouts are made at their sole discretion.</li><li>Terms and conditions of the Bug Bounty program can be changed at any time at the discretion of Yearn.</li><li>Details of any valid bugs may be shared with complementary protocols utilized in the Yearn ecosystem in order to promote ecosystem cohesion and safety.</li></ul><p><strong>Bug Bounty FAQ</strong></p><p>Q: Is there a time limit for the Bug Bounty program?\nA: No. The Bug Bounty program currently has no end date, but this can be changed at any time at the discretion of Yearn.</p><p>Q: Can I submit bugs anonymously and still receive payment?\nA: Yes. If you wish to remain anonymous you can do so and still be eligible for rewards as long as they are for valid bugs. Rewards will be sent to the valid Ethereum address that you provide.</p><p>Q: Can I donate my reward to charity?\nA: Yes. You may donate your reward to a charity of your choosing, or to a gitcoin grant.</p>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yearn adds and removes Vaults and Strategies from Production on an ongoing basis. This assets in scope table includes onchain lists of smart contracts for which all contracts within them are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"The following functions can be called to obtain a list of smart contract addresses that are currently in Production and that are covered by the program:\"), mdx(\"p\", null, \"StrategiesHelper - assetsStrategiesAddresses()\"), mdx(\"p\", null, \"AddressesGeneratorV2Vaults - assetsAddresses()\"), mdx(\"p\", null, \"AddressesGeneratorIronBank - assetsAddresses()\"), mdx(\"p\", null, \"Other contracts, outside of the ones mentioned here, might be considered on a case by case basis, as long as economic damage can be achieved. \"), mdx(\"p\", null, \"For more further information about these smart contracts, please refer to their GitHub repository - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/yearn/yearn-vaults\"\n  }, \"https://github.com/yearn/yearn-vaults\"), \". Additionally, you may refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://yearn.watch\"\n  }, \"https://yearn.watch\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://yearn.watch/stats\"\n  }, \"https://yearn.watch/stats\"), \" for more information about each smart contract. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Submission Requirements\")), mdx(\"p\", null, \"In order to be considered for a reward, all bug reports must contain the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Description of suspected vulnerability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Steps to reproduce the issue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your name and/or colleagues if you wish to be later recognized\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Optional) A patch and/or suggestions to resolve the vulnerability\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Ethical Behavior Requirements\")), mdx(\"p\", null, \"Responsible disclosure is predicated on ethical behavior. These guidelines outline best practices for the community as whole, whether you are reporting, or the recipient of a report. By stating that you adhere to this policy, you\\u2019re claiming to handle vulnerability information ethically, and abide by the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not attempt to leverage a vulnerability, or information of its existence, as part of a financial trading strategy or otherwise for financial gain.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not attempt to compromise systems upon which development of a product relies; including but not limited to compromising development systems, accounts, domains, email etc..\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not attempt to sell vulnerability information or exploits.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not ask for any form of compensation from an affected party.\\nYou may compensate a disclosing party if you would like to after all known vulnerability details have been disclosed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not disclose a bug or vulnerability on mailing lists, public boards, forums, social media or any other channel prior to Responsibly Disclosing to the organizations you have a published relationship with\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not attempt any illegal acts, including phishing, physical attacks, DDoS, or any attempt to gain access without authorization\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3rd Party Affected Projects\")), mdx(\"p\", null, \"In the case where we become aware of security issues affecting other projects that has never affected Yearn, our intention is to inform those projects of security issues on a best effort basis.\"), mdx(\"p\", null, \"In the case where we fix a security issue in Yearn that also affects the following neighboring projects, our intention is to engage in responsible disclosures with them as described in the adopted standard, subject to the deviations described in the deviations section below.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Deviations from the Standard\")), mdx(\"p\", null, \"In the case of a counterfeiting or fund-stealing bug affecting Yearn, however, we might decide not to include those details with our reports to partners ahead of coordinated release, as long as we are sure that they are not vulnerable.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Yearn adds and removes Vaults and Strategies from Production on an ongoing basis. This assets in scope table includes onchain lists of smart contracts for which all contracts within them are considered as in-scope of the bug bounty program.</p><p>The following functions can be called to obtain a list of smart contract addresses that are currently in Production and that are covered by the program:</p><p>StrategiesHelper - assetsStrategiesAddresses()</p><p>AddressesGeneratorV2Vaults - assetsAddresses()</p><p>AddressesGeneratorIronBank - assetsAddresses()</p><p>Other contracts, outside of the ones mentioned here, might be considered on a case by case basis, as long as economic damage can be achieved. </p><p>For more further information about these smart contracts, please refer to their GitHub repository - <a href=\"https://github.com/yearn/yearn-vaults\">https://github.com/yearn/yearn-vaults</a>. Additionally, you may refer to <a href=\"https://yearn.watch\">https://yearn.watch</a> and <a href=\"https://yearn.watch/stats\">https://yearn.watch/stats</a> for more information about each smart contract. </p><p><strong>Submission Requirements</strong></p><p>In order to be considered for a reward, all bug reports must contain the following:</p><ul><li>Description of suspected vulnerability</li><li>Steps to reproduce the issue</li><li>Your name and/or colleagues if you wish to be later recognized</li><li>(Optional) A patch and/or suggestions to resolve the vulnerability</li></ul><p><strong>Ethical Behavior Requirements</strong></p><p>Responsible disclosure is predicated on ethical behavior. These guidelines outline best practices for the community as whole, whether you are reporting, or the recipient of a report. By stating that you adhere to this policy, youâ€™re claiming to handle vulnerability information ethically, and abide by the following:</p><ul><li>Do not attempt to leverage a vulnerability, or information of its existence, as part of a financial trading strategy or otherwise for financial gain.</li><li>Do not attempt to compromise systems upon which development of a product relies; including but not limited to compromising development systems, accounts, domains, email etc..</li><li>Do not attempt to sell vulnerability information or exploits.</li><li>Do not ask for any form of compensation from an affected party.\nYou may compensate a disclosing party if you would like to after all known vulnerability details have been disclosed.</li><li>Do not disclose a bug or vulnerability on mailing lists, public boards, forums, social media or any other channel prior to Responsibly Disclosing to the organizations you have a published relationship with</li><li>Do not attempt any illegal acts, including phishing, physical attacks, DDoS, or any attempt to gain access without authorization</li></ul><p><strong>3rd Party Affected Projects</strong></p><p>In the case where we become aware of security issues affecting other projects that has never affected Yearn, our intention is to inform those projects of security issues on a best effort basis.</p><p>In the case where we fix a security issue in Yearn that also affects the following neighboring projects, our intention is to engage in responsible disclosures with them as described in the adopted standard, subject to the deviations described in the deviations section below.</p><p><strong>Deviations from the Standard</strong></p><p>In the case of a counterfeiting or fund-stealing bug affecting Yearn, however, we might decide not to include those details with our reports to partners ahead of coordinated release, as long as we are sure that they are not vulnerable.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
