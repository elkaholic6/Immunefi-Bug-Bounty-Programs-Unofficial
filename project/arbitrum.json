{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "arbitrum",
      "slug": "arbitrum",
      "project": "Arbitrum",
      "maxBounty": 2000000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/4R1H4ktLiQcp601gnixkJa/20dc4d9cf5229ae712f1413d9afced4f/Arbitrum.jpeg",
      "launchDate": "2021-08-31T08:00-05:00",
      "updatedDate": "2023-09-22T19:32:48.696Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $2,000,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $30,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "NnkiRaKDIZXqSwEWnqJ17",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/IArbToken.sol",
          "description": "IArbToken.sol "
        },
        {
          "id": "3FjjPKlf857sH5WHkXq0M2",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/L2ArbitrumMessenger.sol",
          "description": "L2ArbitrumMessenger.sol "
        },
        {
          "id": "1hwaPsfAf15N5VN9oHTk6y",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/StandardArbERC20.sol",
          "description": "StandardArbERC20.sol"
        },
        {
          "id": "64ACCcri1jAu9GeAbig1F7",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2ArbitrumGateway.sol",
          "description": "L2ArbitrumGateway.sol "
        },
        {
          "id": "7vSaGvy2yJYsEJpcssqw2l",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2CustomGateway.sol",
          "description": "L2CustomGateway.sol "
        },
        {
          "id": "2BGhceZfGItIxILEKwHNt4",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2ERC20Gateway.sol",
          "description": "L2ERC20Gateway.sol "
        },
        {
          "id": "5HV8kOhd0tAHcw0RsyoipW",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2GatewayRouter.sol",
          "description": "L2GatewayRouter.sol"
        },
        {
          "id": "53Q9LmoRbpaeVkCayFQZMp",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2WethGateway.sol",
          "description": "L2WethGateway.sol "
        },
        {
          "id": "27zTSQkmGhriUVmWtqIIU3",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/ICustomToken.sol",
          "description": "ICustomToken.sol "
        },
        {
          "id": "5DhmgJfeG8XOoT4BTUXbKF",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/L1ArbitrumMessenger.sol",
          "description": "L1ArbitrumMessenger.sol "
        },
        {
          "id": "2Oa2Ylxpu6A1iZIqIuKBC9",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ArbitrumExtendedGateway.sol",
          "description": "L1ArbitrumExtendedGateway.sol"
        },
        {
          "id": "2Td1ADOtNm12nbxfZySVqt",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ArbitrumGateway.sol",
          "description": "L1ArbitrumGateway.sol "
        },
        {
          "id": "oiisAsw0bhhU5pbzXGzNG",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1CustomGateway.sol",
          "description": "L1CustomGateway.sol"
        },
        {
          "id": "6LmNa6fVHyiD4GUPPkblB5",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ERC20Gateway.sol",
          "description": "L1ERC20Gateway.sol "
        },
        {
          "id": "30aPt5C1Tsaahcj9Ad55Td",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1GatewayRouter.sol",
          "description": "L1GatewayRouter.sol "
        },
        {
          "id": "3M4KQihMa1kjHHkup72Dwq",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1WethGateway.sol",
          "description": "L1WethGateway.sol "
        },
        {
          "id": "5jANFdJCbH4DOQnYw9Pjjb",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/BytesParser.sol",
          "description": "BytesParser.sol "
        },
        {
          "id": "21YaUroknQoyVXURbzaq4R",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/ClonableBeaconProxy.sol",
          "description": "ClonableBeaconProxy.sol "
        },
        {
          "id": "6Rt0vvjEMOLsCHKw3rrLA0",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/ITransferAndCall.sol",
          "description": "ITransferAndCall.sol "
        },
        {
          "id": "3njGfvfCSlxPmObI9ljUtD",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/L2GatewayToken.sol",
          "description": "L2GatewayToken.sol "
        },
        {
          "id": "5AWKcPKsviUJVhR0xUMWEw",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/TransferAndCallToken.sol",
          "description": "TransferAndCallToken.sol "
        },
        {
          "id": "1DUcDZUkh8QBtm2q8NK4xQ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/aeERC20.sol",
          "description": "aeERC20.sol "
        },
        {
          "id": "4WCAflcoV7X6J48IzgnjUJ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/aeWETH.sol",
          "description": "aeWETH.sol"
        },
        {
          "id": "1gkzYkeH7xkZOP2zPURSFj",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/GatewayMessageHandler.sol",
          "description": "GatewayMessageHandler.sol "
        },
        {
          "id": "ZOYGfzj7s2FDfCYktajLX",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/GatewayRouter.sol",
          "description": "GatewayRouter.sol "
        },
        {
          "id": "V1zsOLltqXCyXFzhPcJXk",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/ICustomGateway.sol",
          "description": "ICustomGateway.sol"
        },
        {
          "id": "3kAUrQ4IFtWdg4lMGgMoHZ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/ITokenGateway.sol",
          "description": "ITokenGateway.sol "
        },
        {
          "id": "16vr5IDcVwqoVOd0sDopka",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/TokenGateway.sol",
          "description": "TokenGateway.sol "
        },
        {
          "id": "kqdI7RCc8lvu84gL3MVQp",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Machine.sol",
          "description": "Machine.sol"
        },
        {
          "id": "5KH2K2SNEoAOyJ2BR4Ycm0",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Value.sol",
          "description": "Value.sol "
        },
        {
          "id": "6J1Iwxwi4I5inYRIJqmqkU",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/Bridge.sol",
          "description": "Bridge.sol "
        },
        {
          "id": "2rAqu6GvadvLEt8JFfwZ1L",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/Inbox.sol",
          "description": "Inbox.sol "
        },
        {
          "id": "7vAqHJybwbOvwcLrLb1J4u",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/Messages.sol",
          "description": "Messages.sol "
        },
        {
          "id": "Ekh273Jw6FAOz7GAGcO37",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/Outbox.sol",
          "description": "Outbox.sol "
        },
        {
          "id": "6gpR3PktxrWgxEJVd9fGY3",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/SequencerInbox.sol",
          "description": "SequencerInbox.sol "
        },
        {
          "id": "5kaIBVRpoPyIOUybqMF4WG",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/IBridge.sol",
          "description": "IBridge.sol "
        },
        {
          "id": "4BTJtkPwM1w9PlmfOh4m01",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/IInbox.sol",
          "description": " IInbox.sol "
        },
        {
          "id": "6IufocYbEJPrRMOS7FVXMd",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/IOutbox.sol",
          "description": "IOutbox.sol "
        },
        {
          "id": "63flkSTgWJsEyvZNwx4V7A",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/ISequencerInbox.sol",
          "description": "ISequencerInbox.sol "
        },
        {
          "id": "27uzPoGaVDYu7OQ5H8vhfL",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/challenge/ChallengeLib.sol",
          "description": "ChallengeLib.sol "
        },
        {
          "id": "3fHnsXHCKa1SlYwdryJN1U",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/BytesLib.sol",
          "description": "BytesLib.sol "
        },
        {
          "id": "3IXcPpxiGZqeULWJDjG5zI",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/Cloneable.sol",
          "description": "Cloneable.sol "
        },
        {
          "id": "21WycrkqLxDh9ULyDowfdY",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/ICloneable.sol",
          "description": " ICloneable.sol "
        },
        {
          "id": "2bnytSHl0jXRo2qgudwALd",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/MerkleLib.sol",
          "description": "MerkleLib.sol "
        },
        {
          "id": "2GaK6oa7uAfFHGghEMATsT",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/Whitelist.sol",
          "description": "Whitelist.sol"
        },
        {
          "id": "2qj2YvLotg1nE2jzQV0Umg",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/BridgeCreator.sol",
          "description": "BridgeCreator.sol "
        },
        {
          "id": "xLWBvm4izneY2UCzD3fGD",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/IRollupCore.sol",
          "description": "IRollupCore.sol "
        },
        {
          "id": "62BGYgBWFoK41gOW9aNNaz",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/Node.sol",
          "description": "Node.sol "
        },
        {
          "id": "7FSpK1XfbDLIr1qAl9Xf5O",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupCore.sol",
          "description": "RollupCore.sol "
        },
        {
          "id": "3gctOwrfQQvx1TxSVCRELY",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupCreator.sol",
          "description": "RollupCreator.sol "
        },
        {
          "id": "4ousYaqHQE9SE246kTEyob",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupLib.sol",
          "description": "RollupLib.sol "
        },
        {
          "id": "60torU6wBDAGlR5c2683Hr",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/ValidatorUtils.sol",
          "description": "ValidatorUtils.sol "
        },
        {
          "id": "5mWEKENLpJTTTAHyZ9Fgz6",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/ValidatorWalletCreator.sol",
          "description": "ValidatorWalletCreator.sol"
        },
        {
          "id": "sjoZf1nA292aUCg5c3hoc",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbAddressTable.sol",
          "description": "ArbAddressTable.sol"
        },
        {
          "id": "3ynGQfMRBFuMcX79x6HtD7",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbSys.sol",
          "description": "ArbSys.sol"
        },
        {
          "id": "pwLYYns3K8skqKex70N7t",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbAggregator.sol",
          "description": "ArbAggregator.sol"
        },
        {
          "id": "1lM4U8iWwri11jF436LUcA",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbDebug.sol",
          "description": "ArbDebug.sol"
        },
        {
          "id": "3UyPkmXXLDgMGO3xC8Bobv",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbBLS.sol",
          "description": "ArbBLS.sol"
        },
        {
          "id": "1QJIvYsxc0NzuZVFIsPJWi",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbFunctionTable.sol",
          "description": "ArbFunctionTable.sol"
        },
        {
          "id": "6FANAEFy1hIcmuEmjRoYKn",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbGasInfo.sol",
          "description": "ArbGasInfo.sol"
        },
        {
          "id": "30AroYEGTf58tm964M4Tuz",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbInfo.sol",
          "description": "ArbInfo.sol"
        },
        {
          "id": "ENilKBoFKzurhTI5eFPEa",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbOwner.sol",
          "description": "ArbOwner.sol"
        },
        {
          "id": "5zgLkbzCWXjT75vadebWrs",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbOwnerPublic.sol",
          "description": "ArbOwnerPublic.sol"
        },
        {
          "id": "3VvkFwue2iCvROt4qQsiyw",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbRetryableTx.sol",
          "description": "ArbRetryableTx.sol"
        },
        {
          "id": "1lO8mBV2s0Vmgl9WkRWB7K",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbStatistics.sol",
          "description": "ArbStatistics.sol"
        },
        {
          "id": "6OU8xEXex2yoGa2Qk9JdcQ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbSys.sol",
          "description": "ArbSys.sol"
        },
        {
          "id": "58BfblWmtdtBzTRQ7nZMmA",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbosActs.sol",
          "description": "ArbosActs.sol"
        },
        {
          "id": "4ZICtt2UqaqZmeorvpOTGH",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/precompiles/ArbosTest.sol",
          "description": "ArbosTest.sol"
        },
        {
          "id": "GFJiZrpSsCFMq6ObzynDt",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/bridge/IDelayedMessageProvider.sol",
          "description": "IDelayedMessageProvider.sol"
        },
        {
          "id": "66Ae37PwCCALRdGPndRKuM",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/challenge/ChallengeManager.sol",
          "description": "ChallengeManager.sol"
        },
        {
          "id": "HekYsjWi96bNilHDdAjvo",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/challenge/IChallengeManager.sol",
          "description": "IChallengeManager.sol"
        },
        {
          "id": "3CASZmxQLLG0RlYNnTlY5J",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/challenge/IChallengeResultReceiver.sol",
          "description": "IChallengeResultReceiver.sol"
        },
        {
          "id": "pGdg7HIC7OvhJuIzAxZf6",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/AddressAliasHelper.sol",
          "description": null
        },
        {
          "id": "7yAUvoR9lcXJDQtVNFENst",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/AdminFallbackProxy.sol",
          "description": null
        },
        {
          "id": "UzwjgE7axpOdZRajoT0rB",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/Constants.sol",
          "description": null
        },
        {
          "id": "6vBUXgazG5Fj1mdRDCMkuR",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/CryptographyPrimitives.sol",
          "description": null
        },
        {
          "id": "2qUzV6TiOaqJZOdrSfEumF",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/DelegateCallAware.sol",
          "description": null
        },
        {
          "id": "1TTJ1727lbz5Ysiae1GE04",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/DoubleLogicUUPSUpgradeable.sol",
          "description": null
        },
        {
          "id": "2LAdj72M9ACQJTSYA8K7hP",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/Error.sol",
          "description": null
        },
        {
          "id": "3OKAHWNVQO5KvL3mIITTnI",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/IGasRefunder.sol",
          "description": null
        },
        {
          "id": "3BSFCDulQryzCug1NSi8g6",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/MerkleLib.sol",
          "description": null
        },
        {
          "id": "2fpl3adpVxjD2XGKQWyGXj",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/libraries/UUPSNotUpgradeable.sol",
          "description": null
        },
        {
          "id": "Nd3HdLarusQiZ59XZhnmJ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/node-interface/NodeInterface.sol",
          "description": null
        },
        {
          "id": "2c2z41KgBKaB3D6RntObIb",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/node-interface/NodeInterfaceDebug.sol",
          "description": null
        },
        {
          "id": "aHzrsL2LxL0Wr60QBAz0z",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/HashProofHelper.sol",
          "description": null
        },
        {
          "id": "6N7suJK0S5PVXTfiun4ZHJ",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/IOneStepProofEntry.sol",
          "description": null
        },
        {
          "id": "726HvzI0uGsFzRKAlaDSC9",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/IOneStepProver.sol",
          "description": null
        },
        {
          "id": "1XjOrXF0OspEYxWOZU5rBT",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/OneStepProofEntry.sol",
          "description": null
        },
        {
          "id": "1VxmSNKYuvIIuAj8HWDzNY",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/OneStepProver0.sol",
          "description": null
        },
        {
          "id": "78q43m0GrePlVAsXTkZpKA",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/OneStepProverHostIo.sol",
          "description": null
        },
        {
          "id": "7MNq1H47fRyPJJb7p3NpPO",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/OneStepProverMath.sol",
          "description": null
        },
        {
          "id": "DgvlbxQHBIfSu9X5zAxGT",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/osp/OneStepProverMemory.sol",
          "description": null
        },
        {
          "id": "cl7YiQBDbAh5whqBbuD6o",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/IRollupEventInbox.sol",
          "description": null
        },
        {
          "id": "1E8Nx0q99I4bWVUhXv7w6m",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/IRollupLogic.sol",
          "description": null
        },
        {
          "id": "5sv9aDd4p59ZZF8VYKGd60",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupAdminLogic.sol",
          "description": null
        },
        {
          "id": "2B0Y1t55uaDNEmYVkzfDGo",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupProxy.sol",
          "description": null
        },
        {
          "id": "18XrUtxSWpNVmJXWljeRe0",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupUserLogic.sol",
          "description": null
        },
        {
          "id": "7zOLotVHkQAfD1UL3J90eg",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Deserialize.sol",
          "description": null
        },
        {
          "id": "65zYMXeFI0EUOL7vOR4SD",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/GlobalState.sol",
          "description": null
        },
        {
          "id": "7203bLda3WxSEKmzU8jbIt",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Instructions.sol",
          "description": null
        },
        {
          "id": "4fsgV27gps1N7CJYK8P3l9",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Machine.sol",
          "description": null
        },
        {
          "id": "3YfnwLAlgMZ6M1c2hR8vsq",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/Module.sol",
          "description": null
        },
        {
          "id": "l4v7VlhWn0ZV3slGVLmmR",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/ModuleMemory.sol",
          "description": null
        },
        {
          "id": "6XRT2WFQAseBYKxY1PwFX4",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/PcArray.sol",
          "description": null
        },
        {
          "id": "2GTFujRSrHFq3Oo95X9eFE",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/StackFrame.sol",
          "description": null
        },
        {
          "id": "3T3GI4XrCDqcZ7ZJmHDqyP",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/ValueArray.sol",
          "description": null
        },
        {
          "id": "4QY2BM2F0cLt1QFVxghkOC",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/nitro-contracts/blob/main/src/state/ValueStack.sol",
          "description": null
        },
        {
          "id": "7gm9zdDkJsUO5jQsB8GZeP",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/IL1ArbitrumGateway.sol",
          "description": null
        },
        {
          "id": "3LIvJcSNZ43wEl48F3Mttu",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/IL1GatewayRouter.sol",
          "description": null
        },
        {
          "id": "3stfN3befJWaN4PYVIq5N5",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/gateway/IGatewayRouter.sol",
          "description": null
        },
        {
          "id": "7zoaaoDfIpnsVhf8oQ9TGW",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/ERC165.sol",
          "description": null
        },
        {
          "id": "4tI1GWp3I1yZYF86QE2PK",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/IERC165.sol",
          "description": null
        },
        {
          "id": "5Zcokaq8ctu0e2OYk51iJC",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/ProxyUtil.sol",
          "description": null
        },
        {
          "id": "7cYcTHMCIVAcOc087yqaMm",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ForceOnlyReverseCustomGateway.sol",
          "description": null
        },
        {
          "id": "6vG6FHumuuDrOg99B0zYKc",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ReverseCustomGateway.sol",
          "description": null
        },
        {
          "id": "6bBmzSk7InnSJxIeKXvgRV",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/ReverseArbToken.sol",
          "description": null
        },
        {
          "id": "3rufX2j09nYjYXaigpAIjK",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/arbitrum/gateway/L2ReverseCustomGateway.sol",
          "description": null
        },
        {
          "id": "3Af5tw1rKOni604MvT3E2k",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/libraries/L2CustomGatewayToken.sol",
          "description": null
        },
        {
          "id": "6d3YtMxaFOAMaaSQJ2PGyA",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/ArbitrumDAOConstitution.sol",
          "description": null
        },
        {
          "id": "6HHXDL2r9QalmfKJ9yZEgv",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/ArbitrumTimelock.sol",
          "description": null
        },
        {
          "id": "3WXi0F0yhe6gaq8wHFX41i",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/ArbitrumVestingWallet.sol",
          "description": null
        },
        {
          "id": "3ahabPYxowq9AVxEzf09eC",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/FixedDelegateErc20Wallet.sol",
          "description": null
        },
        {
          "id": "4Sg18cCsuVpwwOewzZQXVU",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L1ArbitrumMessenger.sol",
          "description": null
        },
        {
          "id": "2qqxBdivn4UhnqXUAPGog3",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L1ArbitrumTimelock.sol",
          "description": null
        },
        {
          "id": "6p25OMHc5IQ1HSmDiVNkcu",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L1ArbitrumToken.sol",
          "description": null
        },
        {
          "id": "3P7HZ7QZZFrbZ2KYFLr9U0",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L1GovernanceFactory.sol",
          "description": null
        },
        {
          "id": "5MVk5qIwQa8ENxG1dmKdhW",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L2ArbitrumGovernor.sol",
          "description": null
        },
        {
          "id": "5vCI7TPmZ7tp1y5nlIiGBu",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L2ArbitrumToken.sol",
          "description": null
        },
        {
          "id": "35EBpmDRfOlmNVc9O4t9nV",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/L2GovernanceFactory.sol",
          "description": null
        },
        {
          "id": "3wBUrvzO3MIcmE1uiyOagO",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/TokenDistributor.sol",
          "description": null
        },
        {
          "id": "tbPYkY9JhCSqEXctbBQOt",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/TransferAndCallToken.sol",
          "description": null
        },
        {
          "id": "7mnR1ZmXcg3EPxX1n1Ck4H",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/UpgradeExecutor.sol",
          "description": null
        },
        {
          "id": "7MuyE5ZCduHDGljNakhlND",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/Util.sol",
          "description": null
        },
        {
          "id": "5L1vmpzrrBjpbNA9iUk4ob",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/ArbitrumFoundationVestingWallet.sol",
          "description": null
        },
        {
          "id": "j97YUVjoVZhGOvY0QLA5e",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/SecurityCouncilManager.sol",
          "description": null
        },
        {
          "id": "5ghZpM4VNpcz7Au99ytubq",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/SecurityCouncilMemberSyncAction.sol",
          "description": null
        },
        {
          "id": "3xKdsyuBWjqrQs2du9mmhe",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/SecurityCouncilMgmtUtils.sol",
          "description": null
        },
        {
          "id": "ochIueQxkcOE8S5JMgsi5",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/factories/L2SecurityCouncilMgmtFactory.sol",
          "description": null
        },
        {
          "id": "7afwPCdADJgGE5o66KiMLh",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/SecurityCouncilMemberElectionGovernor.sol",
          "description": null
        },
        {
          "id": "2xLemrcRKd9XlIX0H1pueE",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/SecurityCouncilMemberRemovalGovernor.sol",
          "description": null
        },
        {
          "id": "71gc7ZQDIdoRvF15qpivMH",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/SecurityCouncilNomineeElectionGovernor.sol",
          "description": null
        },
        {
          "id": "707S4eRuiAia24rd8ycUVS",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/ArbitrumGovernorProposalExpirationUpgradeable.sol",
          "description": null
        },
        {
          "id": "H5YNpyZ1pwu56cdxDfRQs",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/ArbitrumGovernorVotesQuorumFractionUpgradeable.sol",
          "description": null
        },
        {
          "id": "ZllhLRNurJk21rm8awv0n",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/ElectionGovernor.sol",
          "description": null
        },
        {
          "id": "zuYlT5tFjsbr3HpCeIT3z",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/SecurityCouncilMemberElectionGovernorCountingUpgradeable.sol",
          "description": null
        },
        {
          "id": "3vN5E0g2bF67k3cSiuq5xD",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/SecurityCouncilNomineeElectionGovernorCountingUpgradeable.sol",
          "description": null
        },
        {
          "id": "gCLWWpXrY3gzqNMu0cUm5",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/security-council-mgmt/governors/modules/SecurityCouncilNomineeElectionGovernorTiming.sol",
          "description": null
        },
        {
          "id": "R0sXFoMT7YJtYwygbJOH4",
          "type": "smart_contract",
          "url": "https://github.com/ArbitrumFoundation/governance/blob/main/src/UpgradeExecRouteBuilder.sol",
          "description": null
        },
        {
          "id": "3EY9soURVcdNG50lKgijh9",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/fund-distribution-contracts/blob/main/src/RewardDistributor.sol",
          "description": null
        },
        {
          "id": "3KHPBCoLGlhTIPAijcwXyR",
          "type": "smart_contract",
          "url": "https://github.com/OffchainLabs/fund-distribution-contracts/blob/main/src/Util.sol",
          "description": null
        }
      ],
      "impacts": [
        {
          "id": "57mzWFbOoM54BlTlpOESCp",
          "title": "Direct theft of any user funds, whether at-rest or in-motion",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "rngAsrzJlGv5hwTJj3zfd",
          "title": "Permanent freezing of funds (cannot be fixed by upgrade)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "8vQhUoG5jI6Y5HOCcsucu",
          "title": "Insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "6l96HXagPnqmXDyknU3Wqd",
          "title": "Any inputs to the state transition function that trigger an unexpected result, and that affects the whole network, not limited to a single node (excluding RPC inputs)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7w6cEPbcqSOfKP1HEys7MC",
          "title": "Permanent freezing of funds (can be fixed by upgrade)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "SI75LyMfsc23lKKqpQDs4",
          "title": "Bugs relating to reorgs",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "4PIhtRh0dBvEZNpZUAf4cS",
          "title": "Damage relating to withdrawing funds via fast bridges",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "2Y4JM9NbRrbTVa5OQmElXN",
          "title": "Denial of Service (DoS) Attacks that cause network-wide outages (attacks that only take down the RPC do not count)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6QSChC5B2WX7DsTcQSQ5Fk",
          "title": "Smart contract unable to operate due to lack of funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7cVDmVmJYBWDlFZvedQKNq",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5dppVpiO4eCvPhTEniMyZt",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "43mwQS6IIFS9VFsN4q48kq",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7ssdOwQvxVMSpliqrrSInB",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4qsJ61PXJPomkLjrQidDBN",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Arbitrum is a suite of scaling solutions for Ethereum developed by Offchain Labs that drastically reduces costs and latency. Arbitrum One is an \"Optimistic Rollup\", which instantly scales apps, reducing costs and increasing capacity, without sacrificing Ethereum's security. Arbitrum validators optimistically post updates to Ethereum, and the protocol uses an interactive fraud proof mechanism to resolve any disputes efficiently with a minimal on-chain footprint. Porting contracts to Arbitrum requires no code changes or downloads as Arbitrum is fully compatible with most existing Ethereum developer tooling. Arbitrum Nova, is another chain that relies on AnyTrust technology and posts calldata to a Data Availability Committee, further reducing costs while adding a small trust assumption.\n\nFor more information about Arbitrum and the related mainnet chains, please visit [https://developer.offchainlabs.com/](https://developer.offchainlabs.com/).\n\nThis bug bounty program is focused on the mainnet Arbitrum chains, Arbitrum One and Arbitrum Nova and their underlying technologies, Arbitrum Rollup and Arbitrum AnyTrust respectively. Any vulnerabilities unrelated to either of the two mainnet chains are not covered by this program. Issues that affect Arb1 and Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate. This program is focused on their smart contracts and is focused on preventing the following impacts:\n\nThis bug bounty program is focused on their smart contracts and is focused on preventing the following impacts:\n\n  - Loss of user funds by permanent freezing or direct theft\n  - Temporary freezing of funds\n  - Unable to call smart contract\n  - Network shutdown\n  - Smart contract gas drainage",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the following types:\n\n__Smart Contracts and Blockchain__ \n\n  - Re-entrancy\n  - Logic errors\n    - including user authentication errors\n  - Solidity/EVM details not considered\n    - including integer over-/under-flow\n    - including rounding errors\n    - including unhandled exceptions\n  - Trusting trust/dependency vulnerabilities\n    - including composability vulnerabilities\n  - Oracle failure/manipulation\n  - Novel governance attacks\n  - Economic/financial attacks\n    - including flash loan attacks\n  - Congestion and scalability\n    - including running out of gas\n    - including block stuffing\n    - including susceptibility to frontrunning\n  - Consensus failures\n  - Cryptography problems\n    - Signature malleability\n    - Susceptibility to replay attacks\n    - Weak randomness\n    - Weak encryption\n  - Susceptibility to block timestamp manipulation\n  - Missing access controls / unprotected internal or debugging interfaces",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nAll bug reports must come with a PoC in order to be considered for a reward.\n\nCritical bug reports are capped at 10% of economic damage, primarily considering the funds at risk, and taking into account branding and PR issues, at the discretion of the team. However, rewards for Critical bug reports have a minimum reward of __USD 50 000__.\n\nPayouts are handled by the __Offchain Labs__ team directly and are denominated in USD. However, payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (security council signers)\n  - Issues that affect Arbitrum One and Arbitrum Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate.\n\n__Smart Contracts__\n\n  - Incorrect data supplied by third party oracles\n      - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Denial of Service (DoS) Attacks that only affects some nodes, or cause only some nodes to crash\n  - Problems caused by L1 Gas Pricing\n  - Issues that affect geth and are not caused by changes made in the Nitro implementation\n\n__Informational__\n  - Changes or bugs found or related to Tutorials maintained by Offchain Labs\n  - Changes or bugs regarding the arbitrum-sdk\n  - Inconsistencies found between documentation and smart contracts and other blockchain code\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of Arbitrum can be found at [https://github.com/OffchainLabs/nitro-contracts](https://github.com/OffchainLabs/nitro-contracts)\n[https://github.com/OffchainLabs/token-bridge-contracts](https://github.com/OffchainLabs/token-bridge-contracts)\n[https://github.com/ArbitrumFoundation/governance](https://github.com/ArbitrumFoundation/governance), and\n[https://github.com/OffchainLabs/fund-distribution-contracts](https://github.com/OffchainLabs/fund-distribution-contracts)\n\nHowever, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nAssets should be evaluated according to the their public, mainnet deployments; their deployed addresses are listed on the following pages:\n[\nhttps://developer.arbitrum.io/useful-addresses](https://developer.arbitrum.io/useful-addresses)\n[https://docs.arbitrum.foundation/deployment-addresses](https://docs.arbitrum.foundation/deployment-addresses)\n",
      "impactsBody": "In addition to the versions of these smart contracts on GitHub, this bug bounty also covers the deployments of these contracts presently in use by the Arbitrum One and Arbitrum Nova networks to the extent that any vulnerability impacts said networks (e.g. if only Arbitrum One's deployment had out of date vulnerable code relating to the Data Availability Service which is not enabled on Arbitrum One and this made the vulnerability unusable to harm Arbitrum One, it would not be in scope). This bug bounty also covers any upgrades to those in scope deployments which have been scheduled by a passed on-chain constitutional DAO vote or the non-emergency security council multisig, as long as that action is currently waiting in the L2 governance timelock, the bridge to L1, or the L1 governance timelock (i.e. it has passed and is set to go through, and has not been canceled).\n",
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L2"
        ],
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": [
          "ETH",
          "Arbitrum"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": null
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $2,000,000"
          },
          {
            "level": "High",
            "payout": "USD $30,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Arbitrum is a suite of scaling solutions for Ethereum developed by Offchain Labs that drastically reduces costs and latency. Arbitrum One is an \\\"Optimistic Rollup\\\", which instantly scales apps, reducing costs and increasing capacity, without sacrificing Ethereum's security. Arbitrum validators optimistically post updates to Ethereum, and the protocol uses an interactive fraud proof mechanism to resolve any disputes efficiently with a minimal on-chain footprint. Porting contracts to Arbitrum requires no code changes or downloads as Arbitrum is fully compatible with most existing Ethereum developer tooling. Arbitrum Nova, is another chain that relies on AnyTrust technology and posts calldata to a Data Availability Committee, further reducing costs while adding a small trust assumption.\"), mdx(\"p\", null, \"For more information about Arbitrum and the related mainnet chains, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.offchainlabs.com/\"\n  }, \"https://developer.offchainlabs.com/\"), \".\"), mdx(\"p\", null, \"This bug bounty program is focused on the mainnet Arbitrum chains, Arbitrum One and Arbitrum Nova and their underlying technologies, Arbitrum Rollup and Arbitrum AnyTrust respectively. Any vulnerabilities unrelated to either of the two mainnet chains are not covered by this program. Issues that affect Arb1 and Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate. This program is focused on their smart contracts and is focused on preventing the following impacts:\"), mdx(\"p\", null, \"This bug bounty program is focused on their smart contracts and is focused on preventing the following impacts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds by permanent freezing or direct theft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Temporary freezing of funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unable to call smart contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Network shutdown\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract gas drainage\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Arbitrum is a suite of scaling solutions for Ethereum developed by Offchain Labs that drastically reduces costs and latency. Arbitrum One is an &quot;Optimistic Rollup&quot;, which instantly scales apps, reducing costs and increasing capacity, without sacrificing Ethereum&#x27;s security. Arbitrum validators optimistically post updates to Ethereum, and the protocol uses an interactive fraud proof mechanism to resolve any disputes efficiently with a minimal on-chain footprint. Porting contracts to Arbitrum requires no code changes or downloads as Arbitrum is fully compatible with most existing Ethereum developer tooling. Arbitrum Nova, is another chain that relies on AnyTrust technology and posts calldata to a Data Availability Committee, further reducing costs while adding a small trust assumption.</p><p>For more information about Arbitrum and the related mainnet chains, please visit <a href=\"https://developer.offchainlabs.com/\">https://developer.offchainlabs.com/</a>.</p><p>This bug bounty program is focused on the mainnet Arbitrum chains, Arbitrum One and Arbitrum Nova and their underlying technologies, Arbitrum Rollup and Arbitrum AnyTrust respectively. Any vulnerabilities unrelated to either of the two mainnet chains are not covered by this program. Issues that affect Arb1 and Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate. This program is focused on their smart contracts and is focused on preventing the following impacts:</p><p>This bug bounty program is focused on their smart contracts and is focused on preventing the following impacts:</p><ul><li>Loss of user funds by permanent freezing or direct theft</li><li>Temporary freezing of funds</li><li>Unable to call smart contract</li><li>Network shutdown</li><li>Smart contract gas drainage</li></ul>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are especially interested in receiving and rewarding vulnerabilities of the following types:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re-entrancy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including user authentication errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solidity/EVM details not considered\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including integer over-/under-flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including rounding errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including unhandled exceptions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including composability vulnerabilities\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oracle failure/manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Novel governance attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Economic/financial attacks\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Congestion and scalability\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including running out of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including block stuffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including susceptibility to frontrunning\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consensus failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cryptography problems\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Signature malleability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to replay attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak randomness\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak encryption\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to block timestamp manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing access controls / unprotected internal or debugging interfaces\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>We are especially interested in receiving and rewarding vulnerabilities of the following types:</p><p><strong>Smart Contracts and Blockchain</strong> </p><ul><li>Re-entrancy</li><li>Logic errors<ul><li>including user authentication errors</li></ul></li><li>Solidity/EVM details not considered<ul><li>including integer over-/under-flow</li><li>including rounding errors</li><li>including unhandled exceptions</li></ul></li><li>Trusting trust/dependency vulnerabilities<ul><li>including composability vulnerabilities</li></ul></li><li>Oracle failure/manipulation</li><li>Novel governance attacks</li><li>Economic/financial attacks<ul><li>including flash loan attacks</li></ul></li><li>Congestion and scalability<ul><li>including running out of gas</li><li>including block stuffing</li><li>including susceptibility to frontrunning</li></ul></li><li>Consensus failures</li><li>Cryptography problems<ul><li>Signature malleability</li><li>Susceptibility to replay attacks</li><li>Weak randomness</li><li>Weak encryption</li></ul></li><li>Susceptibility to block timestamp manipulation</li><li>Missing access controls / unprotected internal or debugging interfaces</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\"), mdx(\"p\", null, \"All bug reports must come with a PoC in order to be considered for a reward.\"), mdx(\"p\", null, \"Critical bug reports are capped at 10% of economic damage, primarily considering the funds at risk, and taking into account branding and PR issues, at the discretion of the team. However, rewards for Critical bug reports have a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \".\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Offchain Labs\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.</p><p>All bug reports must come with a PoC in order to be considered for a reward.</p><p>Critical bug reports are capped at 10% of economic damage, primarily considering the funds at risk, and taking into account branding and PR issues, at the discretion of the team. However, rewards for Critical bug reports have a minimum reward of <strong>USD 50 000</strong>.</p><p>Payouts are handled by the <strong>Offchain Labs</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (security council signers)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Issues that affect Arbitrum One and Arbitrum Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Denial of Service (DoS) Attacks that only affects some nodes, or cause only some nodes to crash\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Problems caused by L1 Gas Pricing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Issues that affect geth and are not caused by changes made in the Nitro implementation\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Informational\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes or bugs found or related to Tutorials maintained by Offchain Labs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes or bugs regarding the arbitrum-sdk\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inconsistencies found between documentation and smart contracts and other blockchain code\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (security council signers)</li><li>Issues that affect Arbitrum One and Arbitrum Nova will be treated as a single issue, and a report of the same issue with the only difference being the network will be treated as a duplicate.</li></ul><p><strong>Smart Contracts</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Denial of Service (DoS) Attacks that only affects some nodes, or cause only some nodes to crash</li><li>Problems caused by L1 Gas Pricing</li><li>Issues that affect geth and are not caused by changes made in the Nitro implementation</li></ul><p><strong>Informational</strong></p><ul><li>Changes or bugs found or related to Tutorials maintained by Offchain Labs</li><li>Changes or bugs regarding the arbitrum-sdk</li><li>Inconsistencies found between documentation and smart contracts and other blockchain code</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of Arbitrum can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/OffchainLabs/nitro-contracts\"\n  }, \"https://github.com/OffchainLabs/nitro-contracts\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/OffchainLabs/token-bridge-contracts\"\n  }, \"https://github.com/OffchainLabs/token-bridge-contracts\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ArbitrumFoundation/governance\"\n  }, \"https://github.com/ArbitrumFoundation/governance\"), \", and\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/OffchainLabs/fund-distribution-contracts\"\n  }, \"https://github.com/OffchainLabs/fund-distribution-contracts\")), mdx(\"p\", null, \"However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"Assets should be evaluated according to the their public, mainnet deployments; their deployed addresses are listed on the following pages:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.arbitrum.io/useful-addresses\"\n  }, \"\\nhttps://developer.arbitrum.io/useful-addresses\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.arbitrum.foundation/deployment-addresses\"\n  }, \"https://docs.arbitrum.foundation/deployment-addresses\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of Arbitrum can be found at <a href=\"https://github.com/OffchainLabs/nitro-contracts\">https://github.com/OffchainLabs/nitro-contracts</a>\n<a href=\"https://github.com/OffchainLabs/token-bridge-contracts\">https://github.com/OffchainLabs/token-bridge-contracts</a>\n<a href=\"https://github.com/ArbitrumFoundation/governance\">https://github.com/ArbitrumFoundation/governance</a>, and\n<a href=\"https://github.com/OffchainLabs/fund-distribution-contracts\">https://github.com/OffchainLabs/fund-distribution-contracts</a></p><p>However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>Assets should be evaluated according to the their public, mainnet deployments; their deployed addresses are listed on the following pages:\n<a href=\"https://developer.arbitrum.io/useful-addresses\">\nhttps://developer.arbitrum.io/useful-addresses</a>\n<a href=\"https://docs.arbitrum.foundation/deployment-addresses\">https://docs.arbitrum.foundation/deployment-addresses</a></p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In addition to the versions of these smart contracts on GitHub, this bug bounty also covers the deployments of these contracts presently in use by the Arbitrum One and Arbitrum Nova networks to the extent that any vulnerability impacts said networks (e.g. if only Arbitrum One's deployment had out of date vulnerable code relating to the Data Availability Service which is not enabled on Arbitrum One and this made the vulnerability unusable to harm Arbitrum One, it would not be in scope). This bug bounty also covers any upgrades to those in scope deployments which have been scheduled by a passed on-chain constitutional DAO vote or the non-emergency security council multisig, as long as that action is currently waiting in the L2 governance timelock, the bridge to L1, or the L1 governance timelock (i.e. it has passed and is set to go through, and has not been canceled).\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>In addition to the versions of these smart contracts on GitHub, this bug bounty also covers the deployments of these contracts presently in use by the Arbitrum One and Arbitrum Nova networks to the extent that any vulnerability impacts said networks (e.g. if only Arbitrum One&#x27;s deployment had out of date vulnerable code relating to the Data Availability Service which is not enabled on Arbitrum One and this made the vulnerability unusable to harm Arbitrum One, it would not be in scope). This bug bounty also covers any upgrades to those in scope deployments which have been scheduled by a passed on-chain constitutional DAO vote or the non-emergency security council multisig, as long as that action is currently waiting in the L2 governance timelock, the bridge to L1, or the L1 governance timelock (i.e. it has passed and is set to go through, and has not been canceled).</p>",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
