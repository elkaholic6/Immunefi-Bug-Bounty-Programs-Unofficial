{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "buttonwood",
      "slug": "buttonwood",
      "project": "Buttonwood",
      "maxBounty": 500000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/4KQLVXSS65vjjJRtqM1PbQ/85eeab1addc2bdf186d9f37032c21fe2/logo__black___1_.png",
      "launchDate": "2021-10-28T04:15-05:00",
      "updatedDate": "2023-03-08T17:41:10.737Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $100,000 to USD $500,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $25,000 to USD $100,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $2,000 to USD $25,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "Up to USD $2,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "6Dbvtc768ixrGPZYMyNoGc",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/BondController.sol",
          "description": "BondController.sol"
        },
        {
          "id": "2DLw5c01M6NaXOwLM9P9J",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/UniV3LoanRouter.sol",
          "description": "UniV3LoanRouter.sol"
        },
        {
          "id": "3jOhranVOlHLtByHXemjpW",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/TrancheFactory.sol",
          "description": "TrancheFactory.sol"
        },
        {
          "id": "NcHhvSN4EzYKTHIs0KUuw",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/Tranche.sol",
          "description": "Tranche.sol"
        },
        {
          "id": "wkImDXuozt4PERs4GnypH",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/BondFactory.sol",
          "description": "BondFactory.sol"
        },
        {
          "id": "5wlrYkt68vvMTghMocl32S",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/ButtonToken.sol",
          "description": "ButtonToken.sol"
        },
        {
          "id": "4GtneJXuVZuq9BPLCRUW1Z",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/oracles/ChainlinkOracle.sol",
          "description": "ChainlinkOracle.sol"
        },
        {
          "id": "6YDvd9OGBPQf17jUni1UAE",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/ButtonTokenFactory.sol",
          "description": "ButtonTokenFactory.sol"
        },
        {
          "id": "1eRhli6BU0K2Y0Vei0HKj5",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/UnbuttonTokenFactory.sol",
          "description": "UnbuttonTokenFactory.sol "
        },
        {
          "id": "5RjYMCCgIY6D49bqjmZaX",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/UnbuttonToken.sol",
          "description": "UnbuttonToken.sol"
        },
        {
          "id": "2FjcBXjtodON2C0YADpivm",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/WamplLoanRouter.sol",
          "description": "WamplLoanRouter.sol"
        },
        {
          "id": "3OIZNxGW9e3MXVfpNfoHoF",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/tranche/blob/main/contracts/WethLoanRouter.sol",
          "description": "WethLoanRouter.sol"
        },
        {
          "id": "2aeWg3MbRAmNPg4XiJeaky",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/ButtonTokenWamplRouter.sol",
          "description": "ButtonTokenWamplRouter.sol"
        },
        {
          "id": "39rHfERf2OtJXTpCnI965i",
          "type": "smart_contract",
          "url": "https://github.com/buttonwood-protocol/button-wrappers/blob/main/contracts/ButtonTokenWethRouter.sol",
          "description": "ButtonTokenWethRouter.sol"
        }
      ],
      "impacts": [
        {
          "id": "7q8OkBexmWlp27Gf08qc2H",
          "title": "Loss of user funds staked (principal) by freezing or theft",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3Jr7s4S4n8HiGdElbeP0ye",
          "title": "Protocol Insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2eYPqKTlOcB0fOw4t8k4SX",
          "title": "Any governance voting result manipulation",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1cKefOfoXOPODZ5bN6vLKI",
          "title": "Theft of funds in excess of gas costs or swap fees",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3vFDPYa56XE2xWg2sd3JUE",
          "title": "Permanent freezing of funds (dependent on the value at stake)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "5FEDWFjqk7bFuXRKk06P12",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4cCEBimxJwaWjpgouemz5a",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4rBp2Gdex4Y0NJ8nGK06zi",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3enBAeCIObm4Me2PKZUKzK",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3HngypKaEtlqJ6TvXbE6yK",
          "title": "Temporary freezing of funds (dependent on the value at stake)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3JwPokIWDgkoQSdFEEh2Eu",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7kNiIzfIJbCLExBxxGLr87",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4HYfYQ8DyxPMgr9CDoFkXr",
          "title": "Contract fails to deliver promised returns, but doesn't lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Buttonwood is a DeFi project creating and implementing various DeFi protocols, including liquidity aggregation, price-stabilization wrappers, governance, peer-to-peer lending, and risk stratification.\n\nButtonwood’s approach to innovation focuses on composability—we believe the most useful smart contracts are building blocks, not walled gardens. They should be open-source and as minimal as possible—we seek to build primitives to be used by the entirety of digital finance, not platforms to extract value from the ecosystem. These protocols can be used and incorporated into any other protocol without restriction.\n\nFor more information about Buttonwood, please visit [https://button.foundation](https://button.foundation).\n\nThis bug bounty program is focused on their smart contracts and website and is focused on preventing the following impacts:\n\n  - Theft and freezing of principal\n  - Theft and freezing of unclaimed yield\n  - Theft and freezing of fees\n  - Griefing of core functionality",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the following types:\n\n__Smart Contracts and Blockchain__ \n\n  - Re-entrancy\n  - Logic errors\n    - including user authentication errors\n  - Solidity/EVM details not considered\n    - including integer over-/under-flow\n    - including rounding errors\n    - including unhandled exceptions\n  - Trusting trust/dependency vulnerabilities\n    - including composability vulnerabilities\n  - Oracle failure/manipulation\n  - Novel governance attacks\n  - Economic/financial attacks\n    - including flash loan attacks\n  - Congestion and scalability\n    - including running out of gas\n    - including block stuffing\n    - including susceptibility to frontrunning\n  - Consensus failures\n  - Cryptography problems\n    - Signature malleability\n    - Susceptibility to replay attacks\n    - Weak randomness\n    - Weak encryption\n  - Susceptibility to block timestamp manipulation\n  - Missing access controls / unprotected internal or debugging interfaces",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \n\nCritical smart contract bug reports are further capped at 10% of economic damage, primarily taking into consideration the funds at risk, but also considering other aspects such as PR and branding considerations, at the discretion of the team. However, there is a minimum reward of __USD 100 000__.\n\nBug reports of other severity levels will take into consideration the exploitability and impact of the bug reports had they been executed. Buttonwood reserves the right to make the final decision on the reward amount.\n\nPayouts are handled by the __Buttonwood__ team directly and are denominated in USD. However, payouts are done in  __ETH__ or __USDC__, at the discretion of the team.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third-party systems and applications (e.g., browser extensions) as well as websites (e.g., SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All code of  Buttonwood can be found at [https://github.com/buttonwood-protocol](https://github.com/buttonwood-protocol). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nOnce deployed on mainnet, the smart contract addresses can be found at [https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet](https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet).\n\nOnly files in the parent \"contracts\" folder for both of the assets listed in this table are in scope.\n",
      "impactsBody": "__Informational__\n  - Best practice critiques\n",
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "AMM"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000 to USD $500,000"
          },
          {
            "level": "High",
            "payout": "USD $25,000 to USD $100,000"
          },
          {
            "level": "Medium",
            "payout": "USD $2,000 to USD $25,000"
          },
          {
            "level": "Low",
            "payout": "Up to USD $2,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Buttonwood is a DeFi project creating and implementing various DeFi protocols, including liquidity aggregation, price-stabilization wrappers, governance, peer-to-peer lending, and risk stratification.\"), mdx(\"p\", null, \"Buttonwood\\u2019s approach to innovation focuses on composability\\u2014we believe the most useful smart contracts are building blocks, not walled gardens. They should be open-source and as minimal as possible\\u2014we seek to build primitives to be used by the entirety of digital finance, not platforms to extract value from the ecosystem. These protocols can be used and incorporated into any other protocol without restriction.\"), mdx(\"p\", null, \"For more information about Buttonwood, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://button.foundation\"\n  }, \"https://button.foundation\"), \".\"), mdx(\"p\", null, \"This bug bounty program is focused on their smart contracts and website and is focused on preventing the following impacts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft and freezing of principal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft and freezing of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft and freezing of fees\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Griefing of core functionality\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Buttonwood is a DeFi project creating and implementing various DeFi protocols, including liquidity aggregation, price-stabilization wrappers, governance, peer-to-peer lending, and risk stratification.</p><p>Buttonwood’s approach to innovation focuses on composability—we believe the most useful smart contracts are building blocks, not walled gardens. They should be open-source and as minimal as possible—we seek to build primitives to be used by the entirety of digital finance, not platforms to extract value from the ecosystem. These protocols can be used and incorporated into any other protocol without restriction.</p><p>For more information about Buttonwood, please visit <a href=\"https://button.foundation\">https://button.foundation</a>.</p><p>This bug bounty program is focused on their smart contracts and website and is focused on preventing the following impacts:</p><ul><li>Theft and freezing of principal</li><li>Theft and freezing of unclaimed yield</li><li>Theft and freezing of fees</li><li>Griefing of core functionality</li></ul>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are especially interested in receiving and rewarding vulnerabilities of the following types:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re-entrancy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including user authentication errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solidity/EVM details not considered\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including integer over-/under-flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including rounding errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including unhandled exceptions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including composability vulnerabilities\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oracle failure/manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Novel governance attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Economic/financial attacks\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Congestion and scalability\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including running out of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including block stuffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including susceptibility to frontrunning\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consensus failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cryptography problems\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Signature malleability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to replay attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak randomness\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak encryption\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to block timestamp manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing access controls / unprotected internal or debugging interfaces\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>We are especially interested in receiving and rewarding vulnerabilities of the following types:</p><p><strong>Smart Contracts and Blockchain</strong> </p><ul><li>Re-entrancy</li><li>Logic errors<ul><li>including user authentication errors</li></ul></li><li>Solidity/EVM details not considered<ul><li>including integer over-/under-flow</li><li>including rounding errors</li><li>including unhandled exceptions</li></ul></li><li>Trusting trust/dependency vulnerabilities<ul><li>including composability vulnerabilities</li></ul></li><li>Oracle failure/manipulation</li><li>Novel governance attacks</li><li>Economic/financial attacks<ul><li>including flash loan attacks</li></ul></li><li>Congestion and scalability<ul><li>including running out of gas</li><li>including block stuffing</li><li>including susceptibility to frontrunning</li></ul></li><li>Consensus failures</li><li>Cryptography problems<ul><li>Signature malleability</li><li>Susceptibility to replay attacks</li><li>Weak randomness</li><li>Weak encryption</li></ul></li><li>Susceptibility to block timestamp manipulation</li><li>Missing access controls / unprotected internal or debugging interfaces</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \"), mdx(\"p\", null, \"Critical smart contract bug reports are further capped at 10% of economic damage, primarily taking into consideration the funds at risk, but also considering other aspects such as PR and branding considerations, at the discretion of the team. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 100 000\"), \".\"), mdx(\"p\", null, \"Bug reports of other severity levels will take into consideration the exploitability and impact of the bug reports had they been executed. Buttonwood reserves the right to make the final decision on the reward amount.\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Buttonwood\"), \" team directly and are denominated in USD. However, payouts are done in  \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ETH\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \", at the discretion of the team.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. </p><p>Critical smart contract bug reports are further capped at 10% of economic damage, primarily taking into consideration the funds at risk, but also considering other aspects such as PR and branding considerations, at the discretion of the team. However, there is a minimum reward of <strong>USD 100 000</strong>.</p><p>Bug reports of other severity levels will take into consideration the exploitability and impact of the bug reports had they been executed. Buttonwood reserves the right to make the final decision on the reward amount.</p><p>Payouts are handled by the <strong>Buttonwood</strong> team directly and are denominated in USD. However, payouts are done in  <strong>ETH</strong> or <strong>USDC</strong>, at the discretion of the team.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third-party systems and applications (e.g., browser extensions) as well as websites (e.g., SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third-party systems and applications (e.g., browser extensions) as well as websites (e.g., SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All code of  Buttonwood can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/buttonwood-protocol\"\n  }, \"https://github.com/buttonwood-protocol\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"Once deployed on mainnet, the smart contract addresses can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet\"\n  }, \"https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet\"), \".\"), mdx(\"p\", null, \"Only files in the parent \\\"contracts\\\" folder for both of the assets listed in this table are in scope.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All code of  Buttonwood can be found at <a href=\"https://github.com/buttonwood-protocol\">https://github.com/buttonwood-protocol</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>Once deployed on mainnet, the smart contract addresses can be found at <a href=\"https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet\">https://docs.prl.one/buttonwood/developers/deployed-contracts/ethereum-mainnet</a>.</p><p>Only files in the parent &quot;contracts&quot; folder for both of the assets listed in this table are in scope.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Informational\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Informational</strong></p><ul><li>Best practice critiques</li></ul>",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
