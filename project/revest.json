{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "revest",
      "slug": "revest",
      "project": "Revest",
      "maxBounty": 100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/oEI86MyqQE32RNCaYIwcF/76d447372eee111fc91728c8b1e167cd/Revest_Logo.svg",
      "launchDate": "2022-04-21T12:30-06:00",
      "updatedDate": "2022-10-26T14:39:43.112Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $100,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $40,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": false
        },
        {
          "assetType": "websites_and_applications",
          "level": "critical",
          "payout": "Up to USD $30,000",
          "pocRequired": true
        },
        {
          "assetType": "websites_and_applications",
          "level": "high",
          "payout": "USD $5,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "3rQN5UPPmuzKfGeq4fXvly",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xD721A90dd7e010c8C5E022cc0100c55aC78E0FC4",
          "description": "AddressRegistry"
        },
        {
          "id": "5rtTjU57G4tpy9dWPY0Jkx",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x226124E83868812D3Dae87eB3C5F28047E1070B7",
          "description": "LockManager"
        },
        {
          "id": "4lCK8z1wyNFdGK9kcz2fEv",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x120a3879da835A5aF037bB2d1456beBd6B54d4bA",
          "description": "RevestToken"
        },
        {
          "id": "dW8gb7KEJhRp288ePGv26",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xA81bd16Aa6F6B25e66965A2f842e9C806c0AA11F",
          "description": "TokenVault"
        },
        {
          "id": "3D5guC4ChhrvKnb3D0d6fV",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x412c1197E1d7F1C0FDF22998737D3E329eF42F1B",
          "description": "Revest"
        },
        {
          "id": "7yjeqmaETuS3FMxvGYqsgJ",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xa4e7f2a1edb5ad886baa09fb258f8aca7c934ba6",
          "description": "RewardsHandler"
        },
        {
          "id": "3MisLAAfdXf0qmINouGTVG",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xe952bda8c06481506e4731C4f54CeD2d4ab81659",
          "description": "FNFTHandler"
        },
        {
          "id": "7EyuoJSRvIV0g9ogkFkvze",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xED232B965F7d4162F64cD820Cd042Da2a4B0db18",
          "description": "MetadataHandler"
        },
        {
          "id": "6IMzdhD8DSJ3IvsoMum2Ih",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xED941C481A6F602e47C871A6Ac53fcE4798cD992",
          "description": "ChainlinkOracleDispatch"
        },
        {
          "id": "4r9kBZKeGNlTfmZtowtQuX",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xeb3bc40acebabf62d31b0d52fe3ff327b7c82cbc",
          "description": "Binary Combo Lock"
        },
        {
          "id": "1ihp5djUg46xslWDGtMTGr",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xfd7e5a314b46b41a97d0c5ee6f2a9559e877a756",
          "description": "Supply Lock"
        },
        {
          "id": "57ZwojFInmlSb1Q0eUjFCp",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x07317ed9204c9e76df03f106ceffd5b021c5f6a5",
          "description": "Admin Time Lock"
        },
        {
          "id": "1mR0DXIWv1EHv9f06fehio",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x86169239aeeedefb9a571c952b809f2681c0e209",
          "description": "Staking"
        },
        {
          "id": "1rSFAXQZrVCn1q95oZLWa1",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xb80f5a586bc247d993e6dbacd8add211ec6b0ca5",
          "description": "Revest-Liquid Driver Integration"
        },
        {
          "id": "5e0TThGJ7Fm1sPvq1ODHHD",
          "type": "websites_and_applications",
          "url": "http://revest.finance/",
          "description": null
        },
        {
          "id": "3leUpVcCqyiDp6N9cAwrYo",
          "type": "websites_and_applications",
          "url": "https://app.revest.finance/",
          "description": null
        },
        {
          "id": "buiDR4MlpsuM7vbU0lInU",
          "type": "websites_and_applications",
          "url": "https://github.com/Revest-Finance/RevestAPI",
          "description": null
        }
      ],
      "impacts": [
        {
          "id": "5QepQSkGHtiCGxinJO0tqE",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "bukdzG7fVvMI4EHqRxC1w",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "6Uao7ZDNR8vJOoh1y0YCCY",
          "title": "Miner-extractable value (MEV)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2rChOYAd6mzP0mY2aYi6sh",
          "title": "Protocol Insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "16A9UPxrnoLm5xDk2k4stZ",
          "title": "Reentrancy attacks that steal user value",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1lSp15JOVq11BYpp3urpEF",
          "title": "Utilization of IOutputReceiver, IOutputReceiverV2, and IOutputReceiverV3 callbacks to enable malicious reentrancy attacks that steal user funds from TokenVault",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "nAHoXFQY7LUF7ZSIPl0t1",
          "title": "Gaining control of contracts (ownership)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "46JPggT0Yom9e2o5XPh1SM",
          "title": "Ability to mint or burn more NFTs than are intended in a way that allows for theft of user funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1iB4TIptZpsRynhsrXWkos",
          "title": "Ability to mint or burn NFTs from an unauthorized address",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3il3iHo7Y3EWCHYBGv3lk7",
          "title": "Execute arbitrary system commands",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "66uFkmsSTe9w7my2xTDvPa",
          "title": "Retrieve sensitive data/files from a running server such as /etc/shadow, database passwords, and private keys(this does not include non-sensitive environment variables, open source code, or usernames)",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "Zp430c1lzsvbuAlMhGUui",
          "title": "Taking state-modifying authenticated actions (with or without blockchain state interaction) on behalf of other users without any interaction by that user, such as, changing registration information, commenting, voting, making trades, withdrawals, etc.",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "1OoRnLvz4P1fZnvQlH0Nv2",
          "title": "Subdomain takeover with already-connected wallet interaction",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "4U6v3CrwILlD8SLeqoYAO1",
          "title": "Direct theft of user funds",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "1he0Lmi9GgYCu2SfdOXmhk",
          "title": "Malicious interactions with an already-connected wallet such as modifying transaction arguments or parameters, substituting contract addresses, submitting malicious transactions",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "6adrafhRj7EdTJuX79LKH5",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1HrNGm3NdBrdbcGuRDCVdk",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7kooGpDCMVFVRFNtCCa5vx",
          "title": "Temporary freezing of funds for at least one hour",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "71vMlfALgIJOLfFsb3Q75Y",
          "title": "Remapping of user-positions to make value temporarily inaccessible",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "2MZgjxw8lMjHdsC8wIp88k",
          "title": "Malicious modification of locks to enable the early-release of funds (including through oracle manipulation)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "5yeTeVlN3WVqG9rzontdun",
          "title": "Malicious modification of locks to delay the intended release of funds",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3Rw6JE16EiV94lmia1cH48",
          "title": "Utilization of IAddressLock callbacks to enable malicious reentrancy attacks",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "36b8OBIxWQlh2OcZOXpjOy",
          "title": "Utilization of IOracleDispatch callbacks to enable malicious reentrancy attacks",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "QXTcxWxsGAfb43VBIys4E",
          "title": "Taking down the application/website",
          "type": "websites_and_applications",
          "severity": "high"
        },
        {
          "id": "gkY5SMog280JRIVVKqV98",
          "title": "Manipulation of oracle to lead to early or delayed release of value",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "58HLavlEH6AQyFzq7QLUHN",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3XcOzU8lI3YnbVqkgAbeyI",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "2pjHuZvTDEHoWbjZFEoPmI",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5S8uzGEShlp76KYlMqH0cy",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "sIRGVqShzBKjpN4wlf79B",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3mILVSMNZFxen3ZZXO8UQ4",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Revest Finance proposes a new protocol for the packaging, transfer, and storage of fungible ERC-20 tokens as non-fungible tokenized financial instruments, leveraging the ERC-1155 Non-Fungible Token (NFT) standard for ease of access and universality of commerce. \n\nUsing this product, ownership of underlying assets may be traded in ways that do not affect the value of the underlying asset, leading to a new meta-layer of commerce. Discover the mechanics, governance, and monetization of this protocol with targeted use-cases.\n\nFor more information about Revest, please visit [https://revest.finance/](https://revest.finance/).",
      "prioritizedVulnerabilities": "__Impacts in Scope__\n\nOnly the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\n\n__Smart Contracts__\n\nCritical\n  - Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield\n  - Permanent freezing of funds\n  - Miner-extractable value (MEV)\n  - Protocol Insolvency\n  - Reentrancy attacks that steal user value\n  - Gaining control of contracts (ownership)\n  - Utilization of IOutputReceiver, IOutputReceiverV2, and IOutputReceiverV3 callbacks to enable malicious reentrancy attacks that steal user funds from TokenVault\n  - Ability to mint or burn more NFTs than are intended in a way that allows for theft of user funds\n  - Ability to mint or burn NFTs from an unauthorized address\n\nHigh\n  - Theft of unclaimed yield\n  - Permanent freezing of unclaimed yield\n  - Temporary freezing of funds for at least one hour \n  - Remapping of user-positions to make value temporarily inaccessible\n  - Malicious modification of locks to either:\n  - Enable the early-release of funds (including through oracle manipulation)\n  - Delay the intended release of funds\n  - Utilization of IOracleDispatch callbacks to enable malicious reentrancy attacks\n  - Utilization of IAddressLock callbacks to enable malicious reentrancy attacks \n  - Manipulation of oracle to lead to early or delayed release of value\n\nMedium\n  - Smart contract unable to operate due to lack of token funds \n  - Block stuffing for profit\n  - Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)\n  - Theft of gas\n  - Unbounded gas consumption \n\nLow\n  - Smart contract fails to deliver promised returns, but doesn’t lose value\n\n__Web/App__\n\nCritical\n  - Execute arbitrary system commands\n  - Retrieve sensitive data/files from a running server such as /etc/shadow, database passwords, and private keys(this does not include non-sensitive environment variables, open source code, or usernames)\n  - Taking state-modifying authenticated actions (with or without blockchain state interaction) on behalf of other users without any interaction by that user, such as, changing registration information, commenting, voting, making trades, withdrawals, etc.\n  - Subdomain takeover with already-connected wallet interaction\n  - Direct theft of user funds\n  - Malicious interactions with an already-connected wallet such as modifying transaction arguments or parameters, substituting contract addresses, submitting malicious transactions \n\nHigh\n  - Taking down the application/website",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\n\nAll Critical/High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. In addition, Critical bug reports must also come with a suggestion for a fix in order to be considered for a reward. \n\nThe following known issues are considered to be out of scope of this program: \n  - All previously highlighted issues in the audit report here: [https://solidity.finance/audits/Revest/](https://solidity.finance/audits/Revest/)\n  - A reentrancy vulnerability in FNFTHandler, where the active contract is currently being replaced (However, any new variations of attacks that can be executed on the new active contract would still be considered as in scope). \n  - A known vulnerability in TokenVault within the “handleMultipleDeposits” method. This is understood, documented, and will never be called by live code.\n  - Any bugs relating to vulnerabilities in their oracles and the UniswapV3 oracle full coverage problem (Impacted oracles are currently disabled from their UI). Vulnerability is understood to never lead to theft-of-value, only early-unlocks.\n\nRewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of __USD 50 000__ for Critical smart contract bug reports. \n\nCritical website and application bug reports will be rewarded with __USD 30 000__ only if the impact leads to a direct loss in funds or a manipulation of the votes or the voting result, as well as the modification of its display leading to a misrepresentation of the result or vote. All other impacts that would be classified as Critical would be rewarded no more than __USD 10 000__.\n\nPayouts are handled by the __Revest__ team directly and are denominated in USD. However, payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risks\n\n__Websites and Apps__\n  - Theoretical vulnerabilities without any proof or demonstration\n  - Content spoofing / Text injection issues\n  - Self-XSS\n  - Captcha bypass using OCR\n  - CSRF with no security impact (logout CSRF, change language, etc.)\n  - Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as “httponly”)\n  - Server-side information disclosure such as IPs, server names, and most stack traces\n  - Vulnerabilities used to enumerate or confirm the existence of users or tenants\n  - Vulnerabilities requiring unlikely user actions\n  - URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)\n  - Lack of SSL/TLS best practices\n  - DDoS vulnerabilities\n  - Attacks requiring privileged access from within the organization\n  - Feature requests\n  - Best practices\n  - Vulnerabilities primarily caused by browser/plugin defects\n  - Any vulnerability exploit requiring CSP bypass resulting from a browser bug\n\nThe following activities are prohibited by this bug bounty program:\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of Revest can be found at [https://github.com/Revest-Finance/RevestContracts](https://github.com/Revest-Finance/RevestContracts). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nIf any Critical or High severity impact can be caused to any other asset managed by Revest that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Staking"
        ],
        "projectType": [
          "Defi",
          "NFT"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract",
          "Websites and Applications"
        ],
        "language": [
          "JavaScript",
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract",
          "Websites and Applications"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $100,000"
          },
          {
            "level": "High",
            "payout": "USD $40,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $30,000"
          },
          {
            "level": "High",
            "payout": "USD $5,000"
          }
        ]
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Revest Finance proposes a new protocol for the packaging, transfer, and storage of fungible ERC-20 tokens as non-fungible tokenized financial instruments, leveraging the ERC-1155 Non-Fungible Token (NFT) standard for ease of access and universality of commerce. \"), mdx(\"p\", null, \"Using this product, ownership of underlying assets may be traded in ways that do not affect the value of the underlying asset, leading to a new meta-layer of commerce. Discover the mechanics, governance, and monetization of this protocol with targeted use-cases.\"), mdx(\"p\", null, \"For more information about Revest, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://revest.finance/\"\n  }, \"https://revest.finance/\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Revest Finance proposes a new protocol for the packaging, transfer, and storage of fungible ERC-20 tokens as non-fungible tokenized financial instruments, leveraging the ERC-1155 Non-Fungible Token (NFT) standard for ease of access and universality of commerce. </p><p>Using this product, ownership of underlying assets may be traded in ways that do not affect the value of the underlying asset, leading to a new meta-layer of commerce. Discover the mechanics, governance, and monetization of this protocol with targeted use-cases.</p><p>For more information about Revest, please visit <a href=\"https://revest.finance/\">https://revest.finance/</a>.</p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impacts in Scope\")), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"p\", null, \"Critical\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Permanent freezing of funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Miner-extractable value (MEV)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol Insolvency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reentrancy attacks that steal user value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gaining control of contracts (ownership)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utilization of IOutputReceiver, IOutputReceiverV2, and IOutputReceiverV3 callbacks to enable malicious reentrancy attacks that steal user funds from TokenVault\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ability to mint or burn more NFTs than are intended in a way that allows for theft of user funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ability to mint or burn NFTs from an unauthorized address\")), mdx(\"p\", null, \"High\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Permanent freezing of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Temporary freezing of funds for at least one hour \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remapping of user-positions to make value temporarily inaccessible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Malicious modification of locks to either:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enable the early-release of funds (including through oracle manipulation)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delay the intended release of funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utilization of IOracleDispatch callbacks to enable malicious reentrancy attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utilization of IAddressLock callbacks to enable malicious reentrancy attacks \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manipulation of oracle to lead to early or delayed release of value\")), mdx(\"p\", null, \"Medium\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract unable to operate due to lack of token funds \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Block stuffing for profit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unbounded gas consumption \")), mdx(\"p\", null, \"Low\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract fails to deliver promised returns, but doesn\\u2019t lose value\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web/App\")), mdx(\"p\", null, \"Critical\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execute arbitrary system commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Retrieve sensitive data/files from a running server such as /etc/shadow, database passwords, and private keys(this does not include non-sensitive environment variables, open source code, or usernames)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Taking state-modifying authenticated actions (with or without blockchain state interaction) on behalf of other users without any interaction by that user, such as, changing registration information, commenting, voting, making trades, withdrawals, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subdomain takeover with already-connected wallet interaction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Direct theft of user funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Malicious interactions with an already-connected wallet such as modifying transaction arguments or parameters, substituting contract addresses, submitting malicious transactions \")), mdx(\"p\", null, \"High\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Taking down the application/website\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Impacts in Scope</strong></p><p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p><p><strong>Smart Contracts</strong></p><p>Critical</p><ul><li>Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield</li><li>Permanent freezing of funds</li><li>Miner-extractable value (MEV)</li><li>Protocol Insolvency</li><li>Reentrancy attacks that steal user value</li><li>Gaining control of contracts (ownership)</li><li>Utilization of IOutputReceiver, IOutputReceiverV2, and IOutputReceiverV3 callbacks to enable malicious reentrancy attacks that steal user funds from TokenVault</li><li>Ability to mint or burn more NFTs than are intended in a way that allows for theft of user funds</li><li>Ability to mint or burn NFTs from an unauthorized address</li></ul><p>High</p><ul><li>Theft of unclaimed yield</li><li>Permanent freezing of unclaimed yield</li><li>Temporary freezing of funds for at least one hour </li><li>Remapping of user-positions to make value temporarily inaccessible</li><li>Malicious modification of locks to either:</li><li>Enable the early-release of funds (including through oracle manipulation)</li><li>Delay the intended release of funds</li><li>Utilization of IOracleDispatch callbacks to enable malicious reentrancy attacks</li><li>Utilization of IAddressLock callbacks to enable malicious reentrancy attacks </li><li>Manipulation of oracle to lead to early or delayed release of value</li></ul><p>Medium</p><ul><li>Smart contract unable to operate due to lack of token funds </li><li>Block stuffing for profit</li><li>Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)</li><li>Theft of gas</li><li>Unbounded gas consumption </li></ul><p>Low</p><ul><li>Smart contract fails to deliver promised returns, but doesn’t lose value</li></ul><p><strong>Web/App</strong></p><p>Critical</p><ul><li>Execute arbitrary system commands</li><li>Retrieve sensitive data/files from a running server such as /etc/shadow, database passwords, and private keys(this does not include non-sensitive environment variables, open source code, or usernames)</li><li>Taking state-modifying authenticated actions (with or without blockchain state interaction) on behalf of other users without any interaction by that user, such as, changing registration information, commenting, voting, making trades, withdrawals, etc.</li><li>Subdomain takeover with already-connected wallet interaction</li><li>Direct theft of user funds</li><li>Malicious interactions with an already-connected wallet such as modifying transaction arguments or parameters, substituting contract addresses, submitting malicious transactions </li></ul><p>High</p><ul><li>Taking down the application/website</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\"), mdx(\"p\", null, \"All Critical/High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. In addition, Critical bug reports must also come with a suggestion for a fix in order to be considered for a reward. \"), mdx(\"p\", null, \"The following known issues are considered to be out of scope of this program: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All previously highlighted issues in the audit report here: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://solidity.finance/audits/Revest/\"\n  }, \"https://solidity.finance/audits/Revest/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A reentrancy vulnerability in FNFTHandler, where the active contract is currently being replaced (However, any new variations of attacks that can be executed on the new active contract would still be considered as in scope). \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A known vulnerability in TokenVault within the \\u201ChandleMultipleDeposits\\u201D method. This is understood, documented, and will never be called by live code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any bugs relating to vulnerabilities in their oracles and the UniswapV3 oracle full coverage problem (Impacted oracles are currently disabled from their UI). Vulnerability is understood to never lead to theft-of-value, only early-unlocks.\")), mdx(\"p\", null, \"Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \" for Critical smart contract bug reports. \"), mdx(\"p\", null, \"Critical website and application bug reports will be rewarded with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 30 000\"), \" only if the impact leads to a direct loss in funds or a manipulation of the votes or the voting result, as well as the modification of its display leading to a misrepresentation of the result or vote. All other impacts that would be classified as Critical would be rewarded no more than \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 10 000\"), \".\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Revest\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.</p><p>All Critical/High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. In addition, Critical bug reports must also come with a suggestion for a fix in order to be considered for a reward. </p><p>The following known issues are considered to be out of scope of this program: </p><ul><li>All previously highlighted issues in the audit report here: <a href=\"https://solidity.finance/audits/Revest/\">https://solidity.finance/audits/Revest/</a></li><li>A reentrancy vulnerability in FNFTHandler, where the active contract is currently being replaced (However, any new variations of attacks that can be executed on the new active contract would still be considered as in scope). </li><li>A known vulnerability in TokenVault within the “handleMultipleDeposits” method. This is understood, documented, and will never be called by live code.</li><li>Any bugs relating to vulnerabilities in their oracles and the UniswapV3 oracle full coverage problem (Impacted oracles are currently disabled from their UI). Vulnerability is understood to never lead to theft-of-value, only early-unlocks.</li></ul><p>Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of <strong>USD 50 000</strong> for Critical smart contract bug reports. </p><p>Critical website and application bug reports will be rewarded with <strong>USD 30 000</strong> only if the impact leads to a direct loss in funds or a manipulation of the votes or the voting result, as well as the modification of its display leading to a misrepresentation of the result or vote. All other impacts that would be classified as Critical would be rewarded no more than <strong>USD 10 000</strong>.</p><p>Payouts are handled by the <strong>Revest</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Websites and Apps\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theoretical vulnerabilities without any proof or demonstration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content spoofing / Text injection issues\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self-XSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Captcha bypass using OCR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSRF with no security impact (logout CSRF, change language, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as \\u201Chttponly\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server-side information disclosure such as IPs, server names, and most stack traces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities used to enumerate or confirm the existence of users or tenants\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities requiring unlikely user actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of SSL/TLS best practices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DDoS vulnerabilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring privileged access from within the organization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Feature requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities primarily caused by browser/plugin defects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any vulnerability exploit requiring CSP bypass resulting from a browser bug\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li></ul><p><strong>Websites and Apps</strong></p><ul><li>Theoretical vulnerabilities without any proof or demonstration</li><li>Content spoofing / Text injection issues</li><li>Self-XSS</li><li>Captcha bypass using OCR</li><li>CSRF with no security impact (logout CSRF, change language, etc.)</li><li>Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as “httponly”)</li><li>Server-side information disclosure such as IPs, server names, and most stack traces</li><li>Vulnerabilities used to enumerate or confirm the existence of users or tenants</li><li>Vulnerabilities requiring unlikely user actions</li><li>URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)</li><li>Lack of SSL/TLS best practices</li><li>DDoS vulnerabilities</li><li>Attacks requiring privileged access from within the organization</li><li>Feature requests</li><li>Best practices</li><li>Vulnerabilities primarily caused by browser/plugin defects</li><li>Any vulnerability exploit requiring CSP bypass resulting from a browser bug</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of Revest can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Revest-Finance/RevestContracts\"\n  }, \"https://github.com/Revest-Finance/RevestContracts\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"If any Critical or High severity impact can be caused to any other asset managed by Revest that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of Revest can be found at <a href=\"https://github.com/Revest-Finance/RevestContracts\">https://github.com/Revest-Finance/RevestContracts</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>If any Critical or High severity impact can be caused to any other asset managed by Revest that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
