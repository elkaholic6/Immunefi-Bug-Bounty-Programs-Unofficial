{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "liquiddriver",
      "slug": "liquiddriver",
      "project": "Liquid Driver",
      "maxBounty": 50000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/gdQRur9G2twRmGbVPiPx4/fa7378229a55023ee1f87c7b703a99dd/liquid_driver_logo.png",
      "launchDate": "2022-01-24T06:00-06:00",
      "updatedDate": "2023-02-06T22:03:57.961Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $50,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $10,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "2obG1wyY3qQFNiTmujplQV",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x6e2ad6527901c9664f016466b8da1357a004db0f#code",
          "description": "MasterChef Proxy"
        },
        {
          "id": "6wvIIrnUNrEmD7bLWUlrF9",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x5cee2988184afe3cd807e0178b394259e8cdc56c#code",
          "description": "MasterChef"
        },
        {
          "id": "3J3VJsR8QdvPPiarDKySj1",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x3D29859B742427065B459DD1c6e7E29B0343425a#code",
          "description": "Distributor V1 (expired)"
        },
        {
          "id": "5uAsnPezhirFrhcJqPIPae",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xBA4284DF6566D967b80F71f9aF544D104491b2d3#code",
          "description": "Distributor V2 (expired)"
        },
        {
          "id": "60LzHJCu3arNooY5JLAxyX",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x095010A79B28c99B2906A8dc217FC33AEfb7Db93#code",
          "description": "Distributor V3 (expired)"
        },
        {
          "id": "jsg4GDf4Puu20hSgoQhzI",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x326236f487ac37fc2cb69569b20173e9ccf639c9#code",
          "description": "Distributor V4"
        },
        {
          "id": "2yWLSjerDXbppYpDfQSMh3",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x10b620b2dbac4faa7d7ffd71da486f5d44cd86f9#code",
          "description": "LQDR"
        },
        {
          "id": "4For2eDOGDpoeYK3FHa2R2",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x3Ae658656d1C526144db371FaEf2Fff7170654eE#code",
          "description": "xLQDR"
        },
        {
          "id": "4nUhZ4iHa1flKPz7ViDj8H",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xc5713b6a0f26bf0fdc1c52b90cd184d950be515c#code",
          "description": "linSpirit"
        },
        {
          "id": "1MyWtloVw2yyn5R2JUhmYR",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xF4230d880f52eDefdEaE5D1dEbB269AFe4dBcc36#code",
          "description": "linSpirit Manager"
        },
        {
          "id": "4fk09YtN7fK0Ze6MNLR7rd",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xbBf62f98D2F15F4D92a71a676a9baAC84eaB37d8#code",
          "description": "linSpirit Strategy Proxy"
        },
        {
          "id": "7CD6uT96pT5vpVUKj9rOk8",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x61419bc78bc46c3ea3f770ba8764a056bad539f5#code",
          "description": "linSpirit Strategy"
        },
        {
          "id": "4WIevhZPRJm43MtIQKehfZ",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x1CC765cD7baDf46A215bD142846595594AD4ffe3#code",
          "description": "linSpirit Chef"
        },
        {
          "id": "3Ihp5zP3NLjbS3HuIIVqqP",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x12e5964aDfecbb49bbAb8B4C109Ea0b8278aCdF8#code",
          "description": "spLP WFTM-BOO"
        },
        {
          "id": "5rtRafVhldJgrNEFJfeiuJ",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xEAE9bB24dbfC71309606703eEA7058dea996B4d3#code",
          "description": "spLP USDC-WFTM"
        },
        {
          "id": "1bBKRjhUMzUiU4uULBaNRq",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xE3560B6E6c807100Aa8e0D3CEd64C97E3359405F#code",
          "description": "spLP WFTM-DAI"
        },
        {
          "id": "2sjEYHW9IEX5VHiOfD984w",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x646F4315442FB70aF2EA5bd4B0EFAd250d5387b2#code",
          "description": "spLP WFTM-SUSHI"
        },
        {
          "id": "6sVmG88qOvycUXaH8iJBT9",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x319FA2F3322766920c85ad6A708A7647C4f0f1A1#code",
          "description": "spLP WFTM-LINK"
        },
        {
          "id": "77DJHlZZdjqbQpFt3hWdsI",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x1e9100D7dB709Ee89EFB0a509D0f3efb149aF7b1#code",
          "description": " spLP WFTM-ETH"
        },
        {
          "id": "2T7hP1JObfEgeUjBXaBCN8",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x7c7a429C412718221c78A8076d79Fe805cf71Ca0#code",
          "description": "spLP fUSDT-WFTM"
        },
        {
          "id": "20GjJTiaHUqDPD0a7U9lte",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x1ee61D8c39B25a66D30addbc1795e43E35D435AE#code",
          "description": "spLP WFTM-MIM"
        },
        {
          "id": "45djiWape9lHLkJ252f3Dl",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x9cF86fBFe8A2af9b0a53Be973c27B7b6bc76f43E#code",
          "description": "spLP WFTM-SCREAM"
        },
        {
          "id": "6MVyfs2O5RK713HJz4MGQv",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0xf164e0308D1137bA232ce96EDF47Cd06DD4c72cc#code",
          "description": "3poolV2-f"
        }
      ],
      "impacts": [
        {
          "id": "6TsEjv3IHyPJDZM3631GQl",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5VPQS99ql13W7x3rhUT14Y",
          "title": "Permanent freezing of funds (LPs)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "58uLcVnLIRcHt0OcF0cbMj",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6QyBF5pNxmlL2XNtiFm71u",
          "title": "Protocol Insolvency",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3nE4XYT7bCKScUpRHvqviI",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "6xtFhazAaiQqtqr7YbRty3",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5ryyJAr7AglKDJSOkUHEps",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3Db1JmkA3AeU9dcQCSNvZt",
          "title": "Temporary freezing of funds (LPs)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "Qf8VMbtEQHLRg5SVJOjiz",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "48nkdAFu6ummpNxSCb25UV",
          "title": "Contract fails to deliver promised returns, but doesn't lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "LiquidDriver is the first liquidity mining dApp providing liquidity-as-a-service in the Fantom ecosystem.\n\nWe aim to bring its users more utility, rewards, and long-term benefits through our native token, LQDR, and ultimately become the leading liquidity-on-demand platform for dApps on the Fantom Opera Mainnet.\n\nFor more information about Liquid Driver, please visit [https://www.liquiddriver.finance/](https://www.liquiddriver.finance/).  \n\nThis bug bounty program is focused on their smart contracts and is focused on preventing:\n\n  - Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f\n    - Loss of user funds (principal)\n    - Gain control of the contract\n    - Mint LQDR\n\n  - Masterchef Strategies:\n    - Loss of user funds (principal)\n    - Gain control of the contract\n\n  - Distributor V1, V2, V3:\n    - Steal user rewards\n    - Gain control of the contract\n    - Manipulate the mathematics (eg. earn more rewards)\n\n  - LinSpirit, LinSpiritManager and LinSpiritStrategy:\n    - Gain control of the contract\n\n  - LinSpiritStrategy:\n    - Gain control of the contract\n    - Loss of user funds (principal)\n\n  - xLQDR:\n    - Lock time and vote power manipulation\n    - Transfer xLQDR\n    - Drain of locked LQDR",
      "prioritizedVulnerabilities": "__Impacts in Scope__\n\nOnly the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\n\n__Smart Contracts/Blockchain__\n\nAccepted impacts for smart contract vulnerabilities are dependent on the assets that they affect\n\n  - Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f\n    - Loss of user funds (principal)\n    - Gain control of the contract\n    - Mint LQDR\n\n  - Masterchef Strategies:\n    - Loss of user funds (principal)\n    - Gain control of the contract\n\n  - Distributor V1, V2, V3:\n    - Steal user rewards\n    - Gain control of the contract\n    - Manipulate the mathematics (eg. earn more rewards)\n\n  - LinSpirit, LinSpiritManager and LinSpiritStrategy:\n    - Gain control of the contract\n\n  - LinSpiritStrategy:\n    - Gain control of the contract\n    - Loss of user funds (principal)\n\n  - xLQDR:\n    - Lock time and vote power manipulation\n    - Transfer xLQDR\n    - Drain of locked LQDR",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \n\nAll Critical Smart Contract bug reports require a PoC and a suggestion for a fix to be eligible for a reward. All High Smart Contract bug reports require a PoC to be eligible for a reward. \n\nCritical smart contract vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the discretion of the team. However, there is a minimum reward of __USD 50 000__.\n\nAll vulnerabilities marked in the [Solidity Finance security review](https://solidity.finance/audits/LiquidDriver/) are not eligible for a reward.\n\nPayouts are handled by the__ Liquid Driver__ team directly and are denominated in USD. However, payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risks\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of Liquid Driver can be found at [https://github.com/LiquidDriver-finance](https://github.com/LiquidDriver-finance). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n\nSPIRIT farms are inactive, please work only on Spooky, Beeth, Hundred or Abracadabra farms.\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Yield Aggregator"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "Fantom"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $50,000"
          },
          {
            "level": "High",
            "payout": "USD $10,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"LiquidDriver is the first liquidity mining dApp providing liquidity-as-a-service in the Fantom ecosystem.\"), mdx(\"p\", null, \"We aim to bring its users more utility, rewards, and long-term benefits through our native token, LQDR, and ultimately become the leading liquidity-on-demand platform for dApps on the Fantom Opera Mainnet.\"), mdx(\"p\", null, \"For more information about Liquid Driver, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.liquiddriver.finance/\"\n  }, \"https://www.liquiddriver.finance/\"), \".  \"), mdx(\"p\", null, \"This bug bounty program is focused on their smart contracts and is focused on preventing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mint LQDR\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Masterchef Strategies:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Distributor V1, V2, V3:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Steal user rewards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manipulate the mathematics (eg. earn more rewards)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LinSpirit, LinSpiritManager and LinSpiritStrategy:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LinSpiritStrategy:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"xLQDR:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lock time and vote power manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transfer xLQDR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drain of locked LQDR\")))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>LiquidDriver is the first liquidity mining dApp providing liquidity-as-a-service in the Fantom ecosystem.</p><p>We aim to bring its users more utility, rewards, and long-term benefits through our native token, LQDR, and ultimately become the leading liquidity-on-demand platform for dApps on the Fantom Opera Mainnet.</p><p>For more information about Liquid Driver, please visit <a href=\"https://www.liquiddriver.finance/\">https://www.liquiddriver.finance/</a>.  </p><p>This bug bounty program is focused on their smart contracts and is focused on preventing:</p><ul><li><p>Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f</p><ul><li>Loss of user funds (principal)</li><li>Gain control of the contract</li><li>Mint LQDR</li></ul></li><li><p>Masterchef Strategies:</p><ul><li>Loss of user funds (principal)</li><li>Gain control of the contract</li></ul></li><li><p>Distributor V1, V2, V3:</p><ul><li>Steal user rewards</li><li>Gain control of the contract</li><li>Manipulate the mathematics (eg. earn more rewards)</li></ul></li><li><p>LinSpirit, LinSpiritManager and LinSpiritStrategy:</p><ul><li>Gain control of the contract</li></ul></li><li><p>LinSpiritStrategy:</p><ul><li>Gain control of the contract</li><li>Loss of user funds (principal)</li></ul></li><li><p>xLQDR:</p><ul><li>Lock time and vote power manipulation</li><li>Transfer xLQDR</li><li>Drain of locked LQDR</li></ul></li></ul>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impacts in Scope\")), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts/Blockchain\")), mdx(\"p\", null, \"Accepted impacts for smart contract vulnerabilities are dependent on the assets that they affect\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mint LQDR\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Masterchef Strategies:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Distributor V1, V2, V3:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Steal user rewards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manipulate the mathematics (eg. earn more rewards)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LinSpirit, LinSpiritManager and LinSpiritStrategy:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LinSpiritStrategy:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain control of the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds (principal)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"xLQDR:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lock time and vote power manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transfer xLQDR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drain of locked LQDR\")))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Impacts in Scope</strong></p><p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p><p><strong>Smart Contracts/Blockchain</strong></p><p>Accepted impacts for smart contract vulnerabilities are dependent on the assets that they affect</p><ul><li><p>Masterchef: 0x6e2ad6527901c9664f016466b8da1357a004db0f</p><ul><li>Loss of user funds (principal)</li><li>Gain control of the contract</li><li>Mint LQDR</li></ul></li><li><p>Masterchef Strategies:</p><ul><li>Loss of user funds (principal)</li><li>Gain control of the contract</li></ul></li><li><p>Distributor V1, V2, V3:</p><ul><li>Steal user rewards</li><li>Gain control of the contract</li><li>Manipulate the mathematics (eg. earn more rewards)</li></ul></li><li><p>LinSpirit, LinSpiritManager and LinSpiritStrategy:</p><ul><li>Gain control of the contract</li></ul></li><li><p>LinSpiritStrategy:</p><ul><li>Gain control of the contract</li><li>Loss of user funds (principal)</li></ul></li><li><p>xLQDR:</p><ul><li>Lock time and vote power manipulation</li><li>Transfer xLQDR</li><li>Drain of locked LQDR</li></ul></li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. \"), mdx(\"p\", null, \"All Critical Smart Contract bug reports require a PoC and a suggestion for a fix to be eligible for a reward. All High Smart Contract bug reports require a PoC to be eligible for a reward. \"), mdx(\"p\", null, \"Critical smart contract vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the discretion of the team. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \".\"), mdx(\"p\", null, \"All vulnerabilities marked in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://solidity.finance/audits/LiquidDriver/\"\n  }, \"Solidity Finance security review\"), \" are not eligible for a reward.\"), mdx(\"p\", null, \"Payouts are handled by the\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Liquid Driver\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit. </p><p>All Critical Smart Contract bug reports require a PoC and a suggestion for a fix to be eligible for a reward. All High Smart Contract bug reports require a PoC to be eligible for a reward. </p><p>Critical smart contract vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the discretion of the team. However, there is a minimum reward of <strong>USD 50 000</strong>.</p><p>All vulnerabilities marked in the <a href=\"https://solidity.finance/audits/LiquidDriver/\">Solidity Finance security review</a> are not eligible for a reward.</p><p>Payouts are handled by the<strong> Liquid Driver</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of Liquid Driver can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/LiquidDriver-finance\"\n  }, \"https://github.com/LiquidDriver-finance\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"SPIRIT farms are inactive, please work only on Spooky, Beeth, Hundred or Abracadabra farms.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of Liquid Driver can be found at <a href=\"https://github.com/LiquidDriver-finance\">https://github.com/LiquidDriver-finance</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p><p>SPIRIT farms are inactive, please work only on Spooky, Beeth, Hundred or Abracadabra farms.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
