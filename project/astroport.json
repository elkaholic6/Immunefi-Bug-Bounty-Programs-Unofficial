{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "astroport",
      "slug": "astroport",
      "project": "Astroport",
      "maxBounty": 100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/2Qwy7LtcelmPuSZnjGquW7/aeac853cef17939e914d63ed1eeebf98/EPpDQTZo_400x400__1_.jpg",
      "launchDate": "2021-11-29T11:00-06:00",
      "updatedDate": "2022-12-15T00:14:45.654Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $100,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $50,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $20,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "zMccUI9x7qx22wt4XxyJK",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra14x9fr055x5hvr48hzy2t4q7kvjvfttsvxusa4xsdcy702mnzsvuqprer8r",
          "description": "Core Contract: Factory"
        },
        {
          "id": "2GUZtQzWyLPupn4XvLBc8T",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1w579ysjvpx7xxhckxewk8sykxz70gm48wpcuruenl29rhe6p6raslhj0m6",
          "description": "Core Contract: Pair (ASTRO-axlUSDC)"
        },
        {
          "id": "3vaqHhj3t3aVvOPxTGgheG",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1mpj7j25fw5a0q5vfasvsvdp6xytaqxh006lh6f5zpwxvadem9hwsy6m508",
          "description": "Core Contract: Stable Pair"
        },
        {
          "id": "4qQHllQG3lHTLPEsXaUmsV",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1fd68ah02gr2y8ze7tm9te7m70zlmc7vjyyhs6xlhsdmqqcjud4dql4wpxr",
          "description": "Core Contract: Constant Product Pair"
        },
        {
          "id": "5aLLjiLJsLIWbDMuSAnruY",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1j8hayvehh3yy02c2vtw5fdhz9f4drhtee8p5n5rguvg3nyd6m83qd2y90a",
          "description": "Core Contract: Router"
        },
        {
          "id": "6eceiWo4jI9En9XooQydGs",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1nsuqsk6kh58ulczatwev87ttq2z6r3pusulg9r24mfj2fvtzd4uq3exn26",
          "description": "Core Contract: ASTRO Token"
        },
        {
          "id": "2LD4nD8rBmLQbsD13evA6i",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1ksvlfex49desf4c452j6dewdjs6c48nafemetuwjyj6yexd7x3wqvwa7j9",
          "description": "Core Contract: Generator"
        },
        {
          "id": "2g5up7iz27bx40dbAYlMj3",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1ygcvxp9s054q8u2q4hvl52ke393zvgj0sllahlycm4mj8dm96zjsa45rzk",
          "description": "Core Contract: Maker"
        },
        {
          "id": "7zYG9VBUXKM0HBWUGjukzV",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1nyu6sk9rvtvsltm7tjjrp6rlavnm3e4sq03kltde6kesam260f8szar8ze",
          "description": "Core Contract: xASTRO Staking"
        },
        {
          "id": "LCPLVAWbz2wcslyY5MkMB",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1x62mjnme4y0rdnag3r8rfgjuutsqlkkyuh4ndgex0wl3wue25uksau39q8",
          "description": "Core Contract: xASTRO Token"
        },
        {
          "id": "3sQrGiA5MYxh4GBYJJ98lB",
          "type": "smart_contract",
          "url": "https://finder.terra.money/mainnet/address/terra1qyuarnzcc6uuft9n9mltraprreke4v8gvxd8u3nslngxhflhru9qw34nc3",
          "description": "Core Contract: Generator Vesting"
        }
      ],
      "impacts": [
        {
          "id": "4hD3lR1Qe8YprPOA5Q0e51",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5qRdVcmkCfcG0Wahy5VyMF",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "43yxtZnp8vnZw1sDZxAi2F",
          "title": "Loss of governance funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2bdXiGBY8JKnPB1pwSa1v6",
          "title": "Any governance voting result manipulation",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5WDtxQdHIUcDvFWw6x8snJ",
          "title": "Any governance voting result manipulation",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "44ETonEs3x7NtwdPwh2xyF",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "5UDGlWY557wynyc6kTbfjm",
          "title": "Permanent freezing of funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4rFhKDYlVhfCJqNIfCreuF",
          "title": "Loss of governance funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4yAK7njWN14URWBqpbWzdt",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3zkbpLtsMaIYDDswOVyPlR",
          "title": "Permanent freezing of unclaimed rewards",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7dtCjkXj94QRhMicUMJGDt",
          "title": "Temporary freezing of funds for at least 1 hour",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6oEx6BbuDqOpYT1j0oYOBl",
          "title": "Theft of unclaimed yield",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "440HiPvMg8sHndrIwer2iv",
          "title": "Permanent freezing of unclaimed yield",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "JCPgfnAxgfDn2hv80UiYZ",
          "title": "Temporary freezing of funds for at least 1 hour",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "62He2YkDrVXR7eNVkePpI2",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3ruMKLdEsLmmam4lVyQwU8",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "6pz2xPoBmPks3nKAAkr3vR",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "7rVM6D1FsfkqwTBwgL1Bzy",
          "title": "Unbounded gas consumption",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "5LNaGRaHAm6OryntkARGQj",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "smart_contract",
          "severity": "low"
        },
        {
          "id": "6hGsLMuIlmIPW0n2TiorqA",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "blockchain_dlt",
          "severity": "low"
        }
      ],
      "programOverview": "Astroport is the central space station of the Terra solar system, where travelers from all over the galaxy (Mirrans, Terrans, Anchorians, and more) meet to trustlessly exchange assets. As a galactic public good, Astroport will be governed by the Astral Assembly, a council of cryptonauts representing all corners of the universe.\n\nThe design philosophy behind Astroport is simple: to enable decentralised, non-custodial liquidity and price discovery for any asset. To achieve this, Astroport prioritises flexibility above all else; combining various specialised pool types and routing seamlessly across them.\n\nFor more information about Astroport, please visit [https://astroport.fi/](https://astroport.fi/).  \n",
      "prioritizedVulnerabilities": "__Impacts in Scope__\n\nOnly the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in the scope table.\n\n__Smart Contracts/Blockchain__\n\n  - Loss of user funds staked (principal) by freezing or theft\n  - Loss of governance funds\n  - Theft of unclaimed yield\n  - Freezing of unclaimed yield\n  - Temporary freezing of funds for at least 1 hour\n  - Unable to call smart contract\n  - Smart contract gas drainage\n  - Smart contract fails to deliver promised returns\n  - Vote manipulation\n  - Incorrect polling actions\n\nThese Smart Contract Targets include the Commit Links:\n\nSmart Contract - Core Contract: Factory ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Pair (ASTRO-axlUSDC) ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Stable Pair ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Constant Product Pair ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Router ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: ASTRO Token ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Generator ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Maker ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: xASTRO Staking ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: xASTRO Token ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nSmart Contract - Core Contract: Generator Vesting ([Commit](https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681))\n\nThe Astroport smart contracts covered by this bug bounty program can be found in several repositories: the core repository, the governance repository and the generator proxy repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nAll smart contract bug reports must come with a PoC and a suggestion for a fix in order to be considered for a reward.\n\n__Every contract that’s in scope is also accompanied by a specific Github commit. Only the contract implementation that’s specified in the commit is relevant for the program.__\n\nCritical vulnerabilities are capped at 15% of mainnet economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of __USD 80 000__ for Critical bug reports. \n\nPayouts are handled by the __Astroport__ team directly and are denominated in USD. However, payouts are done in __USDC__. All rewards above 50 000 USD are subjected to a unlock period of up to 18 months where tokens will be vested linearly on a monthly basis. The ASTRO price will be the TWAP price in USDC over the previous 30 days.",
      "outOfScopeAndRules": "__Out of Scope & Rules __\n\nThe following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "\nThe Astroport smart contracts covered by this bug bounty program can be found in several repositories: the [core](https://github.com/astroport-fi/astroport-core) repository, the [governance](https://github.com/astroport-fi/astroport-governance) repository, the [generator proxy](https://github.com/astroport-fi/astro-generator-proxy-contracts) repository and finally the [periphery](https://github.com/astroport-fi/astroport-periphery) repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "AMM"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "Terra"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Rust"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $100,000"
          },
          {
            "level": "High",
            "payout": "USD $50,000"
          },
          {
            "level": "Medium",
            "payout": "USD $20,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Astroport is the central space station of the Terra solar system, where travelers from all over the galaxy (Mirrans, Terrans, Anchorians, and more) meet to trustlessly exchange assets. As a galactic public good, Astroport will be governed by the Astral Assembly, a council of cryptonauts representing all corners of the universe.\"), mdx(\"p\", null, \"The design philosophy behind Astroport is simple: to enable decentralised, non-custodial liquidity and price discovery for any asset. To achieve this, Astroport prioritises flexibility above all else; combining various specialised pool types and routing seamlessly across them.\"), mdx(\"p\", null, \"For more information about Astroport, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://astroport.fi/\"\n  }, \"https://astroport.fi/\"), \".  \"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Astroport is the central space station of the Terra solar system, where travelers from all over the galaxy (Mirrans, Terrans, Anchorians, and more) meet to trustlessly exchange assets. As a galactic public good, Astroport will be governed by the Astral Assembly, a council of cryptonauts representing all corners of the universe.</p><p>The design philosophy behind Astroport is simple: to enable decentralised, non-custodial liquidity and price discovery for any asset. To achieve this, Astroport prioritises flexibility above all else; combining various specialised pool types and routing seamlessly across them.</p><p>For more information about Astroport, please visit <a href=\"https://astroport.fi/\">https://astroport.fi/</a>.  </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impacts in Scope\")), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in the scope table.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts/Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds staked (principal) by freezing or theft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of governance funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Freezing of unclaimed yield\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Temporary freezing of funds for at least 1 hour\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unable to call smart contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract gas drainage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract fails to deliver promised returns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vote manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect polling actions\")), mdx(\"p\", null, \"These Smart Contract Targets include the Commit Links:\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Factory (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Pair (ASTRO-axlUSDC) (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Stable Pair (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Constant Product Pair (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Router (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: ASTRO Token (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Generator (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Maker (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: xASTRO Staking (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: xASTRO Token (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"Smart Contract - Core Contract: Generator Vesting (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\"\n  }, \"Commit\"), \")\"), mdx(\"p\", null, \"The Astroport smart contracts covered by this bug bounty program can be found in several repositories: the core repository, the governance repository and the generator proxy repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Impacts in Scope</strong></p><p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in the scope table.</p><p><strong>Smart Contracts/Blockchain</strong></p><ul><li>Loss of user funds staked (principal) by freezing or theft</li><li>Loss of governance funds</li><li>Theft of unclaimed yield</li><li>Freezing of unclaimed yield</li><li>Temporary freezing of funds for at least 1 hour</li><li>Unable to call smart contract</li><li>Smart contract gas drainage</li><li>Smart contract fails to deliver promised returns</li><li>Vote manipulation</li><li>Incorrect polling actions</li></ul><p>These Smart Contract Targets include the Commit Links:</p><p>Smart Contract - Core Contract: Factory (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Pair (ASTRO-axlUSDC) (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Stable Pair (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Constant Product Pair (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Router (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: ASTRO Token (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Generator (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Maker (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: xASTRO Staking (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: xASTRO Token (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>Smart Contract - Core Contract: Generator Vesting (<a href=\"https://github.com/astroport-fi/astroport-core/tree/c216ecd4f350113316be44d06a95569f451ac681\">Commit</a>)</p><p>The Astroport smart contracts covered by this bug bounty program can be found in several repositories: the core repository, the governance repository and the generator proxy repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\"), mdx(\"p\", null, \"All smart contract bug reports must come with a PoC and a suggestion for a fix in order to be considered for a reward.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Every contract that\\u2019s in scope is also accompanied by a specific Github commit. Only the contract implementation that\\u2019s specified in the commit is relevant for the program.\")), mdx(\"p\", null, \"Critical vulnerabilities are capped at 15% of mainnet economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 80 000\"), \" for Critical bug reports. \"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Astroport\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \". All rewards above 50 000 USD are subjected to a unlock period of up to 18 months where tokens will be vested linearly on a monthly basis. The ASTRO price will be the TWAP price in USDC over the previous 30 days.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.</p><p>All smart contract bug reports must come with a PoC and a suggestion for a fix in order to be considered for a reward.</p><p><strong>Every contract that’s in scope is also accompanied by a specific Github commit. Only the contract implementation that’s specified in the commit is relevant for the program.</strong></p><p>Critical vulnerabilities are capped at 15% of mainnet economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of <strong>USD 80 000</strong> for Critical bug reports. </p><p>Payouts are handled by the <strong>Astroport</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>. All rewards above 50 000 USD are subjected to a unlock period of up to 18 months where tokens will be vested linearly on a monthly basis. The ASTRO price will be the TWAP price in USDC over the previous 30 days.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Out of Scope & Rules \")), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Out of Scope &amp; Rules </strong></p><p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Astroport smart contracts covered by this bug bounty program can be found in several repositories: the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-core\"\n  }, \"core\"), \" repository, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-governance\"\n  }, \"governance\"), \" repository, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astro-generator-proxy-contracts\"\n  }, \"generator proxy\"), \" repository and finally the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/astroport-fi/astroport-periphery\"\n  }, \"periphery\"), \" repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The Astroport smart contracts covered by this bug bounty program can be found in several repositories: the <a href=\"https://github.com/astroport-fi/astroport-core\">core</a> repository, the <a href=\"https://github.com/astroport-fi/astroport-governance\">governance</a> repository, the <a href=\"https://github.com/astroport-fi/astro-generator-proxy-contracts\">generator proxy</a> repository and finally the <a href=\"https://github.com/astroport-fi/astroport-periphery\">periphery</a> repository. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
