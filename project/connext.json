{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "connext",
      "slug": "connext",
      "project": "Connext",
      "maxBounty": 100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/1bzzh4XoaNOkOzFZTqff24/6a60319ea667ba1d02a52e0fe386fce6/Connext_logo.png",
      "launchDate": "2021-12-21T09:00-06:00",
      "updatedDate": "2023-02-03T20:24:14.201Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $100,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $50,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $20,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $10,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "7z77LJgwlEI3lkFGNIXFjn",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x31eFc4AeAA7c39e54A33FDc3C46ee2Bd70ae0A09",
          "description": "Transaction Manager"
        },
        {
          "id": "2UV8LxadIIPsubqxjDAWkW",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x5b9E4D0Dd21f4E071729A9eB522A2366AbeD149a",
          "description": "Fulfill Interpreter"
        },
        {
          "id": "upzl3e5eRjEhBARBYtE3g",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xcF4d2994088a8CDE52FB584fE29608b63Ec063B2",
          "description": "TransactionManager.sol"
        },
        {
          "id": "nAd5McXc6lB55MDQdkEm5",
          "type": "smart_contract",
          "url": "https://snowtrace.io/address/0x31eFc4AeAA7c39e54A33FDc3C46ee2Bd70ae0A09",
          "description": "TransactionManager.sol"
        },
        {
          "id": "4GeL6BPYbguRE4FLa7j4RU",
          "type": "smart_contract",
          "url": "https://snowtrace.io/address/0x5b9e4d0dd21f4e071729a9eb522a2366abed149a",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "7DpVuLcuVTKwzgJHjcvVQc",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x2A9EA5e8cDDf40730f4f4F839F673a51600C314e",
          "description": "TransactionManager.sol"
        },
        {
          "id": "95VvzBE3KEnGQhCVPde6e",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x3940a0a4cb508da64cb11b13cdba7e3b04fb9b34",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "2jt5mjble1w8gjb6ZXTu0r",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x67F61B7A0F9E8048098aAf05e9da71666B8116A2",
          "description": "Multicall.sol"
        },
        {
          "id": "OVO3GDV1xrP7nNeL4olov",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0xa408CbBEF74CeE1c4014D7A3f2F7DBbdbad846e2",
          "description": "ConnextPriceOracle.sol"
        },
        {
          "id": "15WTVoP0Wvj0Q1HuBaBWOt",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x0d29d9fa94a23e0d2f06efc79c25144a8f51fc4b",
          "description": "TransactionManager.sol"
        },
        {
          "id": "6MwB2ApdxmE9i3o46jRSUW",
          "type": "smart_contract",
          "url": "https://ftmscan.com/address/0x0e893a2ca06da26a483d03c14a260847b218a231",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "1Mb28M72seV3HDXNzx49tI",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
          "description": "TransactionManager.sol"
        },
        {
          "id": "x2BEACrh7mkuhhd2JKAfh",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x7d34b2be5190299a778d367bc1b171e66f53a065",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "2n9HWxzjujhn0Uok81lA5o",
          "type": "smart_contract",
          "url": "https://blockscout.moonriver.moonbeam.network/address/0x373ba9aa0f48b27A977F73423039E6dE341a0C7C/transactions",
          "description": "TransactionManager.sol"
        },
        {
          "id": "mQjvW5A2x9xLJVjvubF9E",
          "type": "smart_contract",
          "url": "https://blockscout.moonriver.moonbeam.network/address/0xF55161B286C6713A3887E5551A6D71cCC2CB844b/transactions",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "5X5hS1oRDwWjgpDAMJzdJU",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x31eFc4AeAA7c39e54A33FDc3C46ee2Bd70ae0A09",
          "description": "TransactionManager.sol"
        },
        {
          "id": "4IUxPZF1NxvZTsvAcTQAEO",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x5b9e4d0dd21f4e071729a9eb522a2366abed149a",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "35DYxrre7FHI9LUAMM9nIF",
          "type": "smart_contract",
          "url": "https://blockscout.com/xdai/mainnet/address/0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93/transactions",
          "description": "TransactionManager.sol"
        },
        {
          "id": "6P9f80hKeba9zRczklD9rt",
          "type": "smart_contract",
          "url": "https://blockscout.com/xdai/mainnet/address/0x514b6F48F37852D6877d7dd680b18D8473392a24/transactions",
          "description": "FulfillInterpreter.sol"
        },
        {
          "id": "4wmJ2zZ4zjfAcP6F2EUlV9",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xEE9deC2712cCE65174B561151701Bf54b99C24C8",
          "description": "Connext.sol"
        },
        {
          "id": "4F7Xv0klBcMBRIqlmhI5sk",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0xCd401c10afa37d641d2F594852DA94C700e4F2CE",
          "description": "Connext.sol"
        },
        {
          "id": "6Mj0Eygpm36Xhsa2hTC8FR",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
          "description": "Connext.sol"
        },
        {
          "id": "4SdZ6J8n9u1FzCczGWB5v1",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x11984dc4465481512eb5b777e44061c158cf2259",
          "description": "Connext.sol"
        },
        {
          "id": "2MRwB7JY7McrrbXUPJ3z2F",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA",
          "description": "Connext.sol"
        },
        {
          "id": "4ezfRcmjp46wY9RyvC68in",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0x5bB83e95f63217CDa6aE3D181BA580Ef377D2109",
          "description": "Connext.sol"
        },
        {
          "id": "1P4WWuBu9uUJd2Mm2dG0rS",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xFD81392229b6252cF761459d370C239Be3aFc54F",
          "description": "ArbitrumSpokeConnector.sol"
        },
        {
          "id": "5ZBQBy25AMBAXkg3cz68LC",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x126A99af70eC62921C07E67943aCF61bF304Ef55",
          "description": "MultichainSpokeConnector.sol"
        },
        {
          "id": "14qi2KOYtBUWz7YzzuOeM6",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c",
          "description": "MainnetSpokeConnector.sol"
        },
        {
          "id": "4ld7phRzl1BSHCVriBoF7a",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x96fDDc1A6FBDb232e9adA1fFc1026799F85128e9",
          "description": "PolygonSpokeConnector.sol"
        },
        {
          "id": "2prSPP52Vqe7kxQ2Px1lWV",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x32155C9d39084F040Ba17890fE8134dbE2a0453f",
          "description": "OptimismSpokeConnector.sol"
        },
        {
          "id": "jZNcfyCdmjfRKsEXBNWgE",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0x771B2c910D76ecf84B100559CF3Ec4cB2e8D4aC5",
          "description": "GnosisSpokeConnector.sol"
        },
        {
          "id": "5MGYu6BW2PFB7XoDXLiP13",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xd151C9ef49cE2d30B829a98A07767E3280F70961",
          "description": "ArbitrumHubConnector.sol"
        },
        {
          "id": "2HbkfZXuxHGyEyZU0ChY0F",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xfaf539a73659feaec96ec7242f075be0445526a8",
          "description": "MultichainHubConnector.sol"
        },
        {
          "id": "3aPod8ek1kGur4fbF4prKW",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xb01bc38909413f5dbb8f18a9b5787a62ce1282ae",
          "description": "PolygonHubConnector.sol"
        },
        {
          "id": "7j7wTDUfR5ZdXgERPeVdcf",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x4a0126Ee88018393b1AD2455060Bc350eAd9908A",
          "description": "OptimismHubConnector.sol"
        },
        {
          "id": "7g4Jb59O9MYDQw5W7IfIww",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x245F757d660C3ec65416168690431076d58d6413",
          "description": "GnosisHubConnector.sol"
        },
        {
          "id": "649dOCMz9qFqaLOsgSghOv",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
          "description": "RootManager.sol"
        },
        {
          "id": "sAisJ4pevtwi07x4c6SfM",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xaCe3d3Fa125Be4da12C59C865C588B98564900B7",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "3mLkKXZV3LSZCiVwybRFa5",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x51E6cAB281aAC8e4d984ccfFf4ECe5b7352b0B5c",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "53pRREVF0G9O6MJxHfrZt4",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x88483B3e3B4DD7cEdB8EFcef81F6dC9adb6292D5",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "29DZn8FJDFw2IaNBDTOGwZ",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x5bb83e95f63217cda6ae3d181ba580ef377d2109",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "5RGP2cCiUal0S91REoJtWt",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0xeA50d5949C14b00A8F87067A81364A60d83c48FE",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "3UPJC1GbO3AAQRSArnkfMf",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
          "description": "RelayerProxyHub.sol"
        },
        {
          "id": "5mzAUxRt7etAnxuWwa39AQ",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x43Add7f520Cc35e5DbF04f5426a03EA8Ca052c98",
          "description": "WatcherManager.sol"
        },
        {
          "id": "7j3ZngVNOD2SFJeVF8jdVm",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0xeBc0a8e5B841Be85428e7dCc66C283DC2fd111f9",
          "description": "WatcherManager.sol"
        },
        {
          "id": "3J8tdDbdBbyt8zPOFNT3Vt",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x542AaB88B14055e47222791276967Db5f9B840f6",
          "description": "WatcherManager.sol"
        },
        {
          "id": "42kqg0uFioQj5XmwEv9JFV",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x924E679c3c23017aef214c9ea1fBC22e97ff9E2e",
          "description": "WatcherManager.sol"
        },
        {
          "id": "44XDCu54sK6Fabt7pbXK4i",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0xe9ddd1963d302d1e13239a3c25254efd39c2da91",
          "description": "WatcherManager.sol"
        },
        {
          "id": "3eNaKaO5hkkpWRQ2TWB3wn",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6",
          "description": "WatcherManager.sol"
        },
        {
          "id": "4tI1liAWGQd9HH8Eytuai8",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x8533004Ecb90151cD821dc2Fafb78797d8fdd085",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "6QREXwcBgKocLYvJmY5QsS",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x995dfd686f4953B059355Df769cc4CE672983aF1",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "717wPyLW3J3a4jRwmahlwb",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x73B1d7aE726919Dd4B6f50d7c3EBF3660F253f82",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "2VJAXoTFArND8IgO5A8qeI",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x88483b3e3b4dd7cedb8efcef81f6dc9adb6292d5",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "6BgthqXNV4bF3ulYN4tQWi",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0x32155c9d39084f040ba17890fe8134dbe2a0453f",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "4F5IaMdsZM6IU57ozdD4g0",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x28a9e7bbed277092e2431f186e1af898962d4e92",
          "description": "MerkleTreeManager.sol"
        },
        {
          "id": "7tP5BwqfNSWgTA6kzaToOG",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x1aC32215b08806A5Bc5271D7FD77919C3C8ca84E",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "7ixJjsTCYJoskgwG8fQkJq",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x8d5A6BE033d6Aec504F87c8be946aE9B6b1f2dD7",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "4nXBhGjZLK8M79Gyja4rja",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x75bded539f905411a19b2e9f8c7b21c25f77a7bb#code",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "42v7UKhjL3JBKQ4QrFpaoJ",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0xa28DE94d2e6F84659c2C32dF14334Daa08DD6461",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "wfKnT2AjSWJKUO0tSFtJV",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0x0f219898699b3f8008d9f05fac10bd08d4d6c65d",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "5uR3mahdPRgwKaEfIb297D",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x9283c1fb0d69a737b766ef1c15833358e01ac620",
          "description": "UpgradeBeaconController.sol"
        },
        {
          "id": "18SnXEXwIzwvwz5vfF8ir9",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xF659A7b83Fd9f69B52F4BCF9389991515acf4Fd0",
          "description": "LPToken.sol"
        },
        {
          "id": "45tbxEFvWPDh833wzd9vxb",
          "type": "smart_contract",
          "url": "https://bscscan.com/address/0x9cb50C61DFf68fcEe18Fe3AfeFbbF086778a53c0",
          "description": "LPToken.sol"
        },
        {
          "id": "5ymSjQarMGZhJFbfErS2gV",
          "type": "smart_contract",
          "url": "https://polygonscan.com/address/0x0c2a20338910ac902e109a939e58fd17b0402905",
          "description": "LPToken.sol"
        },
        {
          "id": "74mQuAgYXbCpwiuFw3AmuD",
          "type": "smart_contract",
          "url": "https://optimistic.etherscan.io/address/0x60dcBC3BB9EAc7264A2D279f790969CcDE61F4CF",
          "description": "LPToken.sol"
        },
        {
          "id": "2OZLAmhMKUOvLugmdTmbMy",
          "type": "smart_contract",
          "url": "https://gnosisscan.io/address/0x7a76e7874f3c2222352386e9a2fc8922c2f3032b",
          "description": "LPToken.sol"
        },
        {
          "id": "4CeOutHSNVTekoVFozBJtX",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xf7DE5aCeEeE6091d1103209C337fA00D0B4b9092",
          "description": "LPToken.sol"
        }
      ],
      "impacts": [
        {
          "id": "3HGbFgxhPyhnQ1n0OhkTdL",
          "title": "Network not being able to confirm new transactions (Total network shutdown)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "6kPO8gPUTGjJ0QfW2yeGUS",
          "title": "Unintended permanent chain split requiring hard fork (Network partition requiring hard fork)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4avdDKfhOqhGDQDINOrt91",
          "title": "Direct loss of funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4GZ0ylHhHhVmkmGhOaJ1V3",
          "title": "Permanent freezing of funds (fix requires hardfork)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4eyqxkMZXsXxL5RSNAP8fR",
          "title": "RPC API crash",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "34ytl2GZiq3kSDYP0YYAY2",
          "title": "Any governance voting result manipulation",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2eUUCEfVnGORJKkB3yhj6V",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7d9HgVQR8uHp9yE5JBO2My",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7lUxx8X4fg8ejZ7FqikX2B",
          "title": "Miner-extractable value (MEV)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4sOpygq3TstayYI5osyWuC",
          "title": "Protocol Insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1ECL44ZtvD1Kf2MmrOiB4x",
          "title": "Unintended chain split (Network partition)",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "2Xa6QLogkdkZsde6GCz3c3",
          "title": "Transient consensus failures",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "3M67M96KVP5nn7ygZq6F1o",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3H72oOVE9ZCUHHcnmLNOpX",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3EDTy1BDi03lrnisPZVOKX",
          "title": "Temporary freezing of funds",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "5XOJxNNB3Q2675fDmC1RRP",
          "title": "High compute consumption by validator/mining nodes",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "32jte5GITD0Ln6vrH1j66e",
          "title": "Attacks against thin clients",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "6Th0bQRftvlYlFHKZdVWbW",
          "title": "DoS of greater than 30% of validator or miner nodes and does not shut down the network",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "6PsdtF2eMA6nTTf9DFQzdU",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3P0vE5OOO3ccsn2NfJum55",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4SuPfdmeCqfGgYFuNhKetR",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "1M2l06JcZTIK8YrgCjqyw5",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "42F0bsRlIp7PuymFdaWleY",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "6XCBjDkzfWLDhq4YVIeGJI",
          "title": "DoS of greater than 10% but less than 30% of validator or miner nodes and does not shut down the network",
          "type": "blockchain_dlt",
          "severity": "low"
        },
        {
          "id": "5v9zwxidDzh1r862HWhuKK",
          "title": "Underpricing transaction fees relative to computation time",
          "type": "blockchain_dlt",
          "severity": "low"
        },
        {
          "id": "1fHuETbrk94oMIiNsHOGhb",
          "title": "Contract fails to deliver promised returns, but doesn't lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Connext is the interoperability protocol of L2 Ethereum. You can use Connext to send transactions of value or call data across chains and/or rollups. Unlike most other interoperability systems, Connext enables this without introducing any new trust assumptions or external validators.\n\nFor more information about Connext, please visit [https://connext.network/](https://connext.network/).  \n\nThis bug bounty program is focused on their smart contracts and is focused on preventing:\n\n  - Thefts and freezing of user funds\n  - Thefts and freezing of liquidity on the contract\n  - Network shutdown\n  - Abuse of auction process\n  - Abuse of AMM pricing\n  - Abuse of system to create fraudulent slashing conditions",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the following types:\n\n__Smart Contracts and Blockchain__ \n\n  - Re-entrancy\n  - Logic errors\n    - including user authentication errors\n  - Solidity/EVM details not considered\n    - including integer over-/under-flow\n    - including rounding errors\n    - including unhandled exceptions\n  - Trusting trust/dependency vulnerabilities\n    - including composability vulnerabilities\n  - Oracle failure/manipulation\n  - Novel governance attacks\n  - Economic/financial attacks\n    - including flash loan attacks\n  - Congestion and scalability\n    - including running out of gas\n    - including block stuffing\n    - including susceptibility to frontrunning\n  - Consensus failures\n  - Cryptography problems\n    - Signature malleability\n    - Susceptibility to replay attacks\n    - Weak randomness\n    - Weak encryption\n  - Susceptibility to block timestamp manipulation\n  - Missing access controls / unprotected internal or debugging interfaces\n  - All smart contract vulnerabilities\n  - Double-spends from faulty off-chain logic\n  - Creating fraudulent slashing conditions",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nAll Critical smart contract bug reports must come with a detailed written explanation in order to be considered for a reward. \n\nVulnerabilities marked in the following audits are not eligible for a reward.\n  - [Consensys Diligence Audit ](https://consensys.net/diligence/audits/private/rrcm4t83gvyj6a/)\n  - [https://github.com/connext/audits](https://github.com/connext/audits)\n\nPayouts are handled by the __Connext__ team directly and are denominated in USD. However, payouts are done in __USDC__, __USDT__, __DAI__, with the choice of the ratio at the discretion of the team.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risks\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of Connext can be found at [https://github.com/connext/nxtp/tree/main/packages/contracts/contracts](https://github.com/connext/nxtp/tree/main/packages/contracts/contracts). with recent deployments in the `deployments` directory. For similar contracts (multiple instances on different chains), there will not be duplicated counting of bugs. One bug that exists in all contracts will be counted as a single bug.\n\nIf a High or Critical impact can be caused to any other asset managed by Connext that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L2"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": null,
        "programType": [
          "Smart Contract"
        ],
        "language": null
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000"
          },
          {
            "level": "High",
            "payout": "USD $50,000"
          },
          {
            "level": "Medium",
            "payout": "USD $20,000"
          },
          {
            "level": "Low",
            "payout": "USD $10,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Connext is the interoperability protocol of L2 Ethereum. You can use Connext to send transactions of value or call data across chains and/or rollups. Unlike most other interoperability systems, Connext enables this without introducing any new trust assumptions or external validators.\"), mdx(\"p\", null, \"For more information about Connext, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://connext.network/\"\n  }, \"https://connext.network/\"), \".  \"), mdx(\"p\", null, \"This bug bounty program is focused on their smart contracts and is focused on preventing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thefts and freezing of user funds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thefts and freezing of liquidity on the contract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Network shutdown\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Abuse of auction process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Abuse of AMM pricing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Abuse of system to create fraudulent slashing conditions\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Connext is the interoperability protocol of L2 Ethereum. You can use Connext to send transactions of value or call data across chains and/or rollups. Unlike most other interoperability systems, Connext enables this without introducing any new trust assumptions or external validators.</p><p>For more information about Connext, please visit <a href=\"https://connext.network/\">https://connext.network/</a>.  </p><p>This bug bounty program is focused on their smart contracts and is focused on preventing:</p><ul><li>Thefts and freezing of user funds</li><li>Thefts and freezing of liquidity on the contract</li><li>Network shutdown</li><li>Abuse of auction process</li><li>Abuse of AMM pricing</li><li>Abuse of system to create fraudulent slashing conditions</li></ul>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are especially interested in receiving and rewarding vulnerabilities of the following types:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\"), \" \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re-entrancy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including user authentication errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solidity/EVM details not considered\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including integer over-/under-flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including rounding errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including unhandled exceptions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including composability vulnerabilities\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oracle failure/manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Novel governance attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Economic/financial attacks\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Congestion and scalability\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including running out of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including block stuffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including susceptibility to frontrunning\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consensus failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cryptography problems\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Signature malleability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to replay attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak randomness\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak encryption\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to block timestamp manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing access controls / unprotected internal or debugging interfaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All smart contract vulnerabilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Double-spends from faulty off-chain logic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating fraudulent slashing conditions\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>We are especially interested in receiving and rewarding vulnerabilities of the following types:</p><p><strong>Smart Contracts and Blockchain</strong> </p><ul><li>Re-entrancy</li><li>Logic errors<ul><li>including user authentication errors</li></ul></li><li>Solidity/EVM details not considered<ul><li>including integer over-/under-flow</li><li>including rounding errors</li><li>including unhandled exceptions</li></ul></li><li>Trusting trust/dependency vulnerabilities<ul><li>including composability vulnerabilities</li></ul></li><li>Oracle failure/manipulation</li><li>Novel governance attacks</li><li>Economic/financial attacks<ul><li>including flash loan attacks</li></ul></li><li>Congestion and scalability<ul><li>including running out of gas</li><li>including block stuffing</li><li>including susceptibility to frontrunning</li></ul></li><li>Consensus failures</li><li>Cryptography problems<ul><li>Signature malleability</li><li>Susceptibility to replay attacks</li><li>Weak randomness</li><li>Weak encryption</li></ul></li><li>Susceptibility to block timestamp manipulation</li><li>Missing access controls / unprotected internal or debugging interfaces</li><li>All smart contract vulnerabilities</li><li>Double-spends from faulty off-chain logic</li><li>Creating fraudulent slashing conditions</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\"), mdx(\"p\", null, \"All Critical smart contract bug reports must come with a detailed written explanation in order to be considered for a reward. \"), mdx(\"p\", null, \"Vulnerabilities marked in the following audits are not eligible for a reward.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://consensys.net/diligence/audits/private/rrcm4t83gvyj6a/\"\n  }, \"Consensys Diligence Audit \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/connext/audits\"\n  }, \"https://github.com/connext/audits\"))), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Connext\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDT\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DAI\"), \", with the choice of the ratio at the discretion of the team.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.</p><p>All Critical smart contract bug reports must come with a detailed written explanation in order to be considered for a reward. </p><p>Vulnerabilities marked in the following audits are not eligible for a reward.</p><ul><li><a href=\"https://consensys.net/diligence/audits/private/rrcm4t83gvyj6a/\">Consensys Diligence Audit </a></li><li><a href=\"https://github.com/connext/audits\">https://github.com/connext/audits</a></li></ul><p>Payouts are handled by the <strong>Connext</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>, <strong>USDT</strong>, <strong>DAI</strong>, with the choice of the ratio at the discretion of the team.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of Connext can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/connext/nxtp/tree/main/packages/contracts/contracts\"\n  }, \"https://github.com/connext/nxtp/tree/main/packages/contracts/contracts\"), \". with recent deployments in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deployments\"), \" directory. For similar contracts (multiple instances on different chains), there will not be duplicated counting of bugs. One bug that exists in all contracts will be counted as a single bug.\"), mdx(\"p\", null, \"If a High or Critical impact can be caused to any other asset managed by Connext that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of Connext can be found at <a href=\"https://github.com/connext/nxtp/tree/main/packages/contracts/contracts\">https://github.com/connext/nxtp/tree/main/packages/contracts/contracts</a>. with recent deployments in the <code>deployments</code> directory. For similar contracts (multiple instances on different chains), there will not be duplicated counting of bugs. One bug that exists in all contracts will be counted as a single bug.</p><p>If a High or Critical impact can be caused to any other asset managed by Connext that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
