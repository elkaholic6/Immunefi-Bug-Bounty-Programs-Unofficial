{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "metalswap",
      "slug": "metalswap",
      "project": "MetalSwap",
      "maxBounty": 20000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/1V2qLefMPkiAuR0numHlBO/bc2b481781e33c0b15ef91283f5c3ce4/logoD_copy.png",
      "launchDate": "2023-02-03T13:00-05:00",
      "updatedDate": "2023-02-03T17:51:56.829Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $20,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $5,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "2cSjys6uNZh8GkQnPEG7Qb",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/abstract/MetalSwapAbstract.sol",
          "description": "contracts/abstract/MetalSwapAbstract"
        },
        {
          "id": "19hBqM3vCNG3s7xqB5nf0X",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/abstract/MetalSwapPoolAbstract.sol",
          "description": "contracts/abstract/MetalSwapPoolAbstract"
        },
        {
          "id": "KADxfZPvxvnWzrBq1G8zD",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/FinancialSwapManager.sol",
          "description": "contracts/libraries/FinancialSwapManager"
        },
        {
          "id": "37TwP5AFJtyG9M4TTdDty4",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/HexStrings.sol",
          "description": "contracts/libraries/HexStrings"
        },
        {
          "id": "7zq72XHvTt0LUKV0kw2YY7",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/IPriceProvider.sol",
          "description": "contracts/libraries/IPriceProvider"
        },
        {
          "id": "63f1XQS6Ll8LmZ3bN3BwZb",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/NFTBaseChips.sol",
          "description": "contracts/libraries/NFTBaseChips"
        },
        {
          "id": "46cz17esEyOFPKInqVBBz",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/NFTDescriptor.sol",
          "description": "contracts/libraries/NFTDescriptor"
        },
        {
          "id": "3l5yDqPAQRRvho2MyNUylN",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/NFTGenerator.sol",
          "description": "contracts/libraries/NFTGenerator"
        },
        {
          "id": "11n1Jgxp3jJK2j0hpqU4qS",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/NFTGeneratorSupport.sol",
          "description": "contracts/libraries/NFTGeneratorSupport"
        },
        {
          "id": "4mu6UWK4TIb0IHuphH4lwr",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/PriceProvider.sol",
          "description": "contracts/libraries/PriceProvider"
        },
        {
          "id": "334H8Xn9ZH0485UpzLpS1L",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/libraries/URIInfo.sol",
          "description": "contracts/libraries/URIInfo"
        },
        {
          "id": "pI7Qs6cEtz3FKuaUdcPdz",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/ETHPool.sol",
          "description": "contracts/ETHPool"
        },
        {
          "id": "2qE7EqvH9wkFLVre1UlP0Y",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/ETHUSDTSwap.sol",
          "description": "contracts/ETHUSDTSwap"
        },
        {
          "id": "17Mo9BmOBdGL0QSDzcZH1R",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/SettlementFeeContainer.sol",
          "description": "contracts/SettlementFeeContainer"
        },
        {
          "id": "a1jvHGwLlYI88WXUSjtcF",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/USDTPool.sol",
          "description": "contracts/USDTPool"
        },
        {
          "id": "66OKMcAYIkJ7UqbmGC40FD",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/WBTCPool.sol",
          "description": "contracts/WBTCPool"
        },
        {
          "id": "6t9ns2L6qvf9XOldHlMlsF",
          "type": "smart_contract",
          "url": "https://github.com/DEFI-Foundation/swapsv2/blob/main/WBTCUSDTSwap.sol",
          "description": "contracts/WBTCUSDTSwap"
        }
      ],
      "impacts": [
        {
          "id": "7AeijPSPvsz7FHPcddEVh2",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5E6mwjB9r1Gtk8uDdreYVn",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3lamQvk1iLmLtv2h7rW03b",
          "title": "Maximal extractable value (MEV) mechanisms that directly prevent the use of the hedging swap instrument by the end users",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4NJtA62Kt5gkaGDgY8JfnB",
          "title": "Protocol insolvency regarding tokens other than the governance reward token XMT",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1ZvpWvI2nG49I5P2rUItxF",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "M1G4xT47PHiKSLrLz8eBe",
          "title": "Theft of unclaimed royalties",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7kG2DPK5qlAF210CJgKali",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "JCPgfnAxgfDn2hv80UiYZ",
          "title": "Temporary freezing of funds for at least 1 hour",
          "type": "smart_contract",
          "severity": "high"
        }
      ],
      "programOverview": "MetalSwap is a decentralised platform that enables hedging swaps in financial markets with the aim of providing a hedge for commodity traders and an investment opportunity for those who contribute to the shared liquidity of the project.\n\nFor more information about MetalSwap please visit [https://metalswap.finance/](https://metalswap.finance/).",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\n\nAll bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. All bug reports must also come with a suggestion for a fix in order to be considered for a reward. \n\nKnown issues highlighted in the following audits are considered out of scope of this program: \n  - [https://www.certik.com/projects/metalswap](https://www.certik.com/projects/metalswap)\n\nIn addition, any attempt to hack, gain access to, replace, modify, damage or impersonate the frontend or server services included in the architecture of the MetalSwap project are considered out of scope of the program. \n\nPayouts are handled by the __MetalSwap__ team directly and are denominated in USD. However, payouts are done in __USDT__.  This bug bounty program will have a hard cap of USDT 50 000. In the event that multiple bug reports are submitted that exceed this amount, the rewards will be provided on a first come first served basis.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (such as governance, strategist or any platform operator address)\"\n\n__Smart Contracts and Blockchain__\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risks\n  - Bugs and possible attacks publicly disclosed by MetalSwap (or remedied) before their bounty is claimed\n  - Known and already remedied bug on the Liquidity Pool smart contracts that allowed users to redeem XMT token rewards for NFT liquidity positions owned by other users\n  - Protocol insolvency regarding the governance reward token XMT\n  - Cases of protocol insolvency related to transactions failing because of lack of tokens on the Smart Contracts or token allowances given on platform-owned wallets by MetalSwap operators are excluded from the bug bounty program because they are improbable and easily and quickly fixable\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of MetalSwap can be found at [https://github.com/DEFI-Foundation/swapsv2](https://github.com/DEFI-Foundation/swapsv2). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "DEX"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": null
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $20,000"
          },
          {
            "level": "High",
            "payout": "USD $5,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"MetalSwap is a decentralised platform that enables hedging swaps in financial markets with the aim of providing a hedge for commodity traders and an investment opportunity for those who contribute to the shared liquidity of the project.\"), mdx(\"p\", null, \"For more information about MetalSwap please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://metalswap.finance/\"\n  }, \"https://metalswap.finance/\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>MetalSwap is a decentralised platform that enables hedging swaps in financial markets with the aim of providing a hedge for commodity traders and an investment opportunity for those who contribute to the shared liquidity of the project.</p><p>For more information about MetalSwap please visit <a href=\"https://metalswap.finance/\">https://metalswap.finance/</a>.</p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\"), mdx(\"p\", null, \"All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. All bug reports must also come with a suggestion for a fix in order to be considered for a reward. \"), mdx(\"p\", null, \"Known issues highlighted in the following audits are considered out of scope of this program: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.certik.com/projects/metalswap\"\n  }, \"https://www.certik.com/projects/metalswap\"))), mdx(\"p\", null, \"In addition, any attempt to hack, gain access to, replace, modify, damage or impersonate the frontend or server services included in the architecture of the MetalSwap project are considered out of scope of the program. \"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MetalSwap\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDT\"), \".  This bug bounty program will have a hard cap of USDT 50 000. In the event that multiple bug reports are submitted that exceed this amount, the rewards will be provided on a first come first served basis.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.</p><p>All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. All bug reports must also come with a suggestion for a fix in order to be considered for a reward. </p><p>Known issues highlighted in the following audits are considered out of scope of this program: </p><ul><li><a href=\"https://www.certik.com/projects/metalswap\">https://www.certik.com/projects/metalswap</a></li></ul><p>In addition, any attempt to hack, gain access to, replace, modify, damage or impersonate the frontend or server services included in the architecture of the MetalSwap project are considered out of scope of the program. </p><p>Payouts are handled by the <strong>MetalSwap</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDT</strong>.  This bug bounty program will have a hard cap of USDT 50 000. In the event that multiple bug reports are submitted that exceed this amount, the rewards will be provided on a first come first served basis.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (such as governance, strategist or any platform operator address)\\\"\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bugs and possible attacks publicly disclosed by MetalSwap (or remedied) before their bounty is claimed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Known and already remedied bug on the Liquidity Pool smart contracts that allowed users to redeem XMT token rewards for NFT liquidity positions owned by other users\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol insolvency regarding the governance reward token XMT\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cases of protocol insolvency related to transactions failing because of lack of tokens on the Smart Contracts or token allowances given on platform-owned wallets by MetalSwap operators are excluded from the bug bounty program because they are improbable and easily and quickly fixable\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (such as governance, strategist or any platform operator address)&quot;</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li><li>Bugs and possible attacks publicly disclosed by MetalSwap (or remedied) before their bounty is claimed</li><li>Known and already remedied bug on the Liquidity Pool smart contracts that allowed users to redeem XMT token rewards for NFT liquidity positions owned by other users</li><li>Protocol insolvency regarding the governance reward token XMT</li><li>Cases of protocol insolvency related to transactions failing because of lack of tokens on the Smart Contracts or token allowances given on platform-owned wallets by MetalSwap operators are excluded from the bug bounty program because they are improbable and easily and quickly fixable</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of MetalSwap can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/DEFI-Foundation/swapsv2\"\n  }, \"https://github.com/DEFI-Foundation/swapsv2\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of MetalSwap can be found at <a href=\"https://github.com/DEFI-Foundation/swapsv2\">https://github.com/DEFI-Foundation/swapsv2</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
