{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "fluxfinance",
      "slug": "fluxfinance",
      "project": "Flux Finance",
      "maxBounty": 550000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/5RljZ20Xb5SROzx6NIOfuu/784259142faffaffc007f9b6049303bf/2023-02-07_08.21.29.jpg",
      "launchDate": "2023-02-08T11:00-05:00",
      "updatedDate": "2023-03-21T17:03:19.992Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $25,000 to USD $550,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $25,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $10,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "3srYKm8XLgdEAsejyAxPyf",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x95Af143a021DF745bc78e845b54591C53a8B3A51",
          "description": "Unitroller"
        },
        {
          "id": "7dPUcinfilyTTGaxp0nCkY",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x1dD7950c266fB1be96180a8FDb0591F70200E018",
          "description": "fOUSG"
        },
        {
          "id": "5m5sl5AJuhaU7DN1WKCG7r",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x465a5a630482f3abD6d3b84B39B29b07214d19e5",
          "description": "fUSDC"
        },
        {
          "id": "JlXtYANSMQq0V567TSqKL",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xe2bA8693cE7474900A045757fe0efCa900F6530b",
          "description": "fDAI"
        },
        {
          "id": "2b3nwNQptXOzbqdp7fAg9C",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x1C9A2d6b33B4826757273D47ebEe0e2DddcD978B",
          "description": "fFRAX"
        },
        {
          "id": "4DzKDgmfFOqEO7WRM9eNCh",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x81994b9607e06ab3d5cF3AffF9a67374f05F27d7",
          "description": "fUSDT"
        },
        {
          "id": "3cNNxtWHNFeHOy8N602BnX",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xba9b10f90b0ef26711373a0d8b6e7741866a7ef2",
          "description": "OndoPriceOracle V2"
        },
        {
          "id": "2JBMLU4aKBFWfDVEo9DCXB",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x336505EC1BcC1A020EeDe459f57581725D23465A",
          "description": "GovernorBravoDelegator"
        },
        {
          "id": "6uyvMFDV21FFpnskrUiH4c",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2c5898da4DF1d45EAb2B7B192a361C3b9EB18d9c",
          "description": "Timelock"
        }
      ],
      "impacts": [
        {
          "id": "2Yv6RzDNwRGhXEkf1S5UiS",
          "title": "Any governance voting result manipulation",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "6zM1MgLIXMKADp5ENoeJ9n",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "9S6T6BMGhAHjl43BrXwU7",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5nahCHTVfNiLdu71IDwSG0",
          "title": "Protocol insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5xMBXLaeLpofWXBp5ea76c",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "4yByKIl0bVrQ3LbWZk2f9z",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "5yibw9pCo7kA8yBagjtxXB",
          "title": "Miner-extractable value (MEV)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "4cIwG2gFSsssxLvBuMKgm5",
          "title": "Temporary freezing of funds for at least 24 hours",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3suOlrJTg9PZlTneLCxd0W",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "2Q84pLlBm9xq3w8wuIKs9I",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3RVGrg0X3gpLhtoYbRSt52",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "79uDtAedzcIcluygHziXS",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5wll6DQQNRgAtWvx65OtNj",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "73A5JfpvBJr6l8yZMK31P5",
          "title": "Smart contract fails to deliver promised returns, but doesn't lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Flux Finance is a decentralized lending protocol built by the Ondo Finance team.\n\nThe protocol is a fork of Compound V2 with additional functionality to support both permissionless (e.g. USDC) and permissioned (e.g. OUSG) tokens. Permissions are enforced on a per-asset basis. For example, a USDC lender won't have any restrictions, but a USDC borrower using OUSG as collateral will need to satisfy OUSG's permissions.\n\nSimilar to Compound, Flux enables overcollateralized lending and borrowing in a peer-to-pool (p2pool) model.\n\nFor more information about Flux Finance, please visit [https://fluxfinance.com/  ](https://fluxfinance.com/)\n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the[  Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \n\nAll bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.\n\nRewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of USD 25 000 for Critical smart contract bug reports.\n\nThe following known issues are also considered out of scope of this program:\n- Effects from blacklists (e.g. KYC revoked, USDC blacklist), if the effect only impacts the specific user.\n- Effects from using hypothetical use of tokens that do not follow the ERC-20 standard or include unusual behavior (e.g. transfer tax). If a token has certain functionality but that functionality is currently disabled, the effect will also be considered out of scope.\n- Misuse of admin rights (e.g. malicious admin multi-sig)\n- The protocol is forked from CompoundV2. The fToken contracts are forked from this [commit](https://github.com/compound-finance/compound-protocol/tree/a3214f67b73310d547e00fc578e8355911c9d376). All other contracts (Comptroller, CErc20Delegator, InterestRateModel, etc.) are forked from this [commit](https://github.com/compound-finance/compound-protocol/tree/3affca87636eecd901eb43f81a4813186393905d). Bug reports covering previously-discovered bugs are not eligible for the program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report. Previous audits of CompoundV2 can be found at: [https://docs.compound.finance/v2/security/#audits](https://docs.compound.finance/v2/security/#audits)\n- Any known issues in CompoundV2 up to these commits are considered out of scope. This includes, but is not limited to:\n   - First deposit bug when a market is initialized - example [video](https://youtu.be/_pO2jDgL0XE?t=157)\n   - Discrepancy in borrow rate per block on-chain vs. displayed APY in the UI\n\nPayouts are handled by the __Flux Finance__ team directly and are denominated in USD. However, payouts are done in __USDC__.  The payment will be made by Flux Finance (the entity).\n",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n- Incorrect data supplied by third party oracles\n   - Not to exclude oracle manipulation/flash loan attacks\n- Basic economic governance attacks (e.g. 51% attack)\n- Lack of liquidity\n- Best practice critiques\n- Sybil attacks\n- Centralization risks\n\nThe following activities are prohibited by this bug bounty program:\n\n- Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n- Any testing with pricing oracles or third party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n",
      "assetsBodyV2": "In some cases, only the proxy contracts are listed as in-scope; however, current implementation and any further updates to the implementation are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target. \n\nAll smart contracts of Flux Finance can be found at [https://github.com/flux-finance/contracts](https://github.com/flux-finance/contracts). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program. \n\nIf an impact can be caused to any other asset managed by Flux Finance that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. \n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Lending"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $25,000 to USD $550,000"
          },
          {
            "level": "High",
            "payout": "USD $25,000"
          },
          {
            "level": "Medium",
            "payout": "USD $10,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Flux Finance is a decentralized lending protocol built by the Ondo Finance team.\"), mdx(\"p\", null, \"The protocol is a fork of Compound V2 with additional functionality to support both permissionless (e.g. USDC) and permissioned (e.g. OUSG) tokens. Permissions are enforced on a per-asset basis. For example, a USDC lender won't have any restrictions, but a USDC borrower using OUSG as collateral will need to satisfy OUSG's permissions.\"), mdx(\"p\", null, \"Similar to Compound, Flux enables overcollateralized lending and borrowing in a peer-to-pool (p2pool) model.\"), mdx(\"p\", null, \"For more information about Flux Finance, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fluxfinance.com/\"\n  }, \"https://fluxfinance.com/  \")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Flux Finance is a decentralized lending protocol built by the Ondo Finance team.</p><p>The protocol is a fork of Compound V2 with additional functionality to support both permissionless (e.g. USDC) and permissioned (e.g. OUSG) tokens. Permissions are enforced on a per-asset basis. For example, a USDC lender won&#x27;t have any restrictions, but a USDC borrower using OUSG as collateral will need to satisfy OUSG&#x27;s permissions.</p><p>Similar to Compound, Flux enables overcollateralized lending and borrowing in a peer-to-pool (p2pool) model.</p><p>For more information about Flux Finance, please visit <a href=\"https://fluxfinance.com/\">https://fluxfinance.com/  </a></p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\"\n  }, \"  Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \"), mdx(\"p\", null, \"All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.\"), mdx(\"p\", null, \"Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of USD 25 000 for Critical smart contract bug reports.\"), mdx(\"p\", null, \"The following known issues are also considered out of scope of this program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effects from blacklists (e.g. KYC revoked, USDC blacklist), if the effect only impacts the specific user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effects from using hypothetical use of tokens that do not follow the ERC-20 standard or include unusual behavior (e.g. transfer tax). If a token has certain functionality but that functionality is currently disabled, the effect will also be considered out of scope.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Misuse of admin rights (e.g. malicious admin multi-sig)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The protocol is forked from CompoundV2. The fToken contracts are forked from this \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/compound-finance/compound-protocol/tree/a3214f67b73310d547e00fc578e8355911c9d376\"\n  }, \"commit\"), \". All other contracts (Comptroller, CErc20Delegator, InterestRateModel, etc.) are forked from this \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/compound-finance/compound-protocol/tree/3affca87636eecd901eb43f81a4813186393905d\"\n  }, \"commit\"), \". Bug reports covering previously-discovered bugs are not eligible for the program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report. Previous audits of CompoundV2 can be found at: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.compound.finance/v2/security/#audits\"\n  }, \"https://docs.compound.finance/v2/security/#audits\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any known issues in CompoundV2 up to these commits are considered out of scope. This includes, but is not limited to:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"First deposit bug when a market is initialized - example \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://youtu.be/_pO2jDgL0XE?t=157\"\n  }, \"video\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discrepancy in borrow rate per block on-chain vs. displayed APY in the UI\")))), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Flux Finance\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".  The payment will be made by Flux Finance (the entity).\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the<a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\">  Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. </p><p>All bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required. Bug reports are required to include a runnable PoC in order to prove impact. Exceptions may be made in cases where the vulnerability is objectively evident from simply mentioning the vulnerability and where it exists. However, the bug reporter may be required to provide a PoC at any point in time.</p><p>Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum reward of USD 25 000 for Critical smart contract bug reports.</p><p>The following known issues are also considered out of scope of this program:</p><ul><li>Effects from blacklists (e.g. KYC revoked, USDC blacklist), if the effect only impacts the specific user.</li><li>Effects from using hypothetical use of tokens that do not follow the ERC-20 standard or include unusual behavior (e.g. transfer tax). If a token has certain functionality but that functionality is currently disabled, the effect will also be considered out of scope.</li><li>Misuse of admin rights (e.g. malicious admin multi-sig)</li><li>The protocol is forked from CompoundV2. The fToken contracts are forked from this <a href=\"https://github.com/compound-finance/compound-protocol/tree/a3214f67b73310d547e00fc578e8355911c9d376\">commit</a>. All other contracts (Comptroller, CErc20Delegator, InterestRateModel, etc.) are forked from this <a href=\"https://github.com/compound-finance/compound-protocol/tree/3affca87636eecd901eb43f81a4813186393905d\">commit</a>. Bug reports covering previously-discovered bugs are not eligible for the program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report. Previous audits of CompoundV2 can be found at: <a href=\"https://docs.compound.finance/v2/security/#audits\">https://docs.compound.finance/v2/security/#audits</a></li><li>Any known issues in CompoundV2 up to these commits are considered out of scope. This includes, but is not limited to:<ul><li>First deposit bug when a market is initialized - example <a href=\"https://youtu.be/_pO2jDgL0XE?t=157\">video</a></li><li>Discrepancy in borrow rate per block on-chain vs. displayed APY in the UI</li></ul></li></ul><p>Payouts are handled by the <strong>Flux Finance</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.  The payment will be made by Flux Finance (the entity).</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some cases, only the proxy contracts are listed as in-scope; however, current implementation and any further updates to the implementation are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target. \"), mdx(\"p\", null, \"All smart contracts of Flux Finance can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/flux-finance/contracts\"\n  }, \"https://github.com/flux-finance/contracts\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program. \"), mdx(\"p\", null, \"If an impact can be caused to any other asset managed by Flux Finance that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>In some cases, only the proxy contracts are listed as in-scope; however, current implementation and any further updates to the implementation are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target. </p><p>All smart contracts of Flux Finance can be found at <a href=\"https://github.com/flux-finance/contracts\">https://github.com/flux-finance/contracts</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program. </p><p>If an impact can be caused to any other asset managed by Flux Finance that isn’t on this table but for which the impact is in the Impacts in Scope section below, you are encouraged to submit it for the consideration by the project. </p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
