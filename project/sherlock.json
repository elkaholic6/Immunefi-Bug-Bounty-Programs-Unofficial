{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "sherlock",
      "slug": "sherlock",
      "project": "Sherlock",
      "maxBounty": 500000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/3KAGs1iPkVQgH479qY0UC0/1bbe99e55301f0b4be5b7c1739fe7c19/sherlock.png",
      "launchDate": "2021-10-12T10:00-05:00",
      "updatedDate": "2022-11-28T19:46:21.861Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $500,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $25,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "7aEGT8VJDjTUENDRjG4uxh",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x46D2A90153cd8F09464CA3a5605B6BBeC9C2fF01",
          "description": "SHER (proxy)"
        },
        {
          "id": "4TfVcYiwnJm8jBIhIU2nJy",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x91f23210A34721D33C8842673f2Ba20146b8C70f",
          "description": "SHER (implementation)"
        },
        {
          "id": "4pfwTTfknYRsUQmKdTStVV",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x0865a889183039689034dA55c1Fd12aF5083eabF",
          "description": "Sherlock"
        },
        {
          "id": "6o3lIJvlEki1pvzzMuijB8",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x1E8bE946370a99019E323998Acd37A1206bdD507",
          "description": "MasterStrategy"
        },
        {
          "id": "7aARbavaRccmYtmSitrVjA",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x5775F32787656E77dd99f20F4E478DdC85fdB31b",
          "description": "SherDistributionManager"
        },
        {
          "id": "2RIYo1h3P1jJ7wPMhIonfT",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x3d0b8A0A10835Ab9b0f0BeB54C5400B8aAcaa1D3",
          "description": "SherlockProtocolManager"
        },
        {
          "id": "6wvM3QmxH1iyAhT6kt503W",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xFeEDD254ae4B7c44A0472Bb836b813Ce4625Eb84",
          "description": "SherlockClaimManager"
        },
        {
          "id": "7khanr2cDg3jmF0JycOuAX",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x92AEffFfaD9fff820f7FCaf1563d8467aFe358c4",
          "description": "timelockController"
        },
        {
          "id": "2lWlmvfarczzOCft9NqOPO",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x7289C61C75dCdB8Fe4DF0b937c08c9c40902BDd3",
          "description": "SherClaim"
        },
        {
          "id": "5eGO3Y8MDRkdfhHdzljv62",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xf8583f22C2f6f8cd27f62879A0fB4319bce262a6",
          "description": "SherBuy"
        },
        {
          "id": "1o6qxxgZ5TspHNq9D2Bjnq",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xbFa53D098d7063DdCc39a45ea6F8c290FcD7FC70",
          "description": " InfoStorage"
        },
        {
          "id": "xL7Mqh6DglU5DGX93tarf",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x71B6BC6c70E27DCfD7d0b7AE8EbA6a76D518D88A",
          "description": "AlphaBetaEqualDepositMaxSplitter"
        },
        {
          "id": "1XdySEXBt8EpboHU8LY4I0",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x7E0049866879151480d9Ec01391Bbf713F7705b1",
          "description": "AlphaBetaEqualDepositSplitter"
        },
        {
          "id": "61Ks60dm87cscrm7WiuHOz",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x75C5d2d8D54254476239a5c1e1F23ec48Df8779E",
          "description": "AaveStrategy"
        },
        {
          "id": "25xzD9gkdNJbAPUIhOPzFv",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x5b7a52b6d75Fb3105c3c37fcc6007Eb7ac78F1B8",
          "description": "CompoundStrategy"
        },
        {
          "id": "30hAZc77zo8lDsNSzJK1K",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xC124A8088c39625f125655152A168baA86b49026",
          "description": "EulerStrategy"
        }
      ],
      "impacts": [
        {
          "id": "1bkCe5XAv2khtIifRnGlRx",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "RKLt43Ysk77Zimzi0FrAJ",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "4A5hw004DRbWRlArnpYCXt",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "270U06E4fb0ghQivP1dNa9",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "jKLMQLFJ9wsAS2SPuAnEE",
          "title": "Temporary freezing of funds (greater than 1 month)",
          "type": "smart_contract",
          "severity": "high"
        }
      ],
      "programOverview": "Sherlock is a risk management platform designed to provide DeFi protocols with affordable, reliable coverage against smart contract exploits starting from Day 1.\n\nSherlock coverage is backed by proprietary staking pools that offer some of the highest risk-adjusted returns in DeFi. This is made possible by their team of security and risk experts who evaluate the smart contracts of every protocol, price the coverage and have skin in the game alongside stakers.\n\nFor more information about Sherlock, please visit [https://sherlock.xyz/about/](https://sherlock.xyz/about/)  \n\nThis bug bounty program is focused on their smart contracts and is focused on preventing:\n\n  - Loss of user funds by profitable theft or profitable freezing\n  - Loss of staker funds by profitable theft\n  - Profitable dilution of staker funds (infinite minting of staking positions)\n  - Profitable payout exploits\n  - DoS or “freezing” attacks",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\n",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nA PoC is required for Critical and High Smart Contract/Blockchain bug reports.\n\nExploits that result in a material loss of funds for users and is profitable for the hacker are classified as Critical. Anything else that results in a material loss/freezing of user funds that is unprofitable for the hacker is classified as High. \n\nCritical vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of __USD 50 000__ for Critical bug reports. \n\nKnown issues in their previous audits are considered out-of-scope: https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/audits\n\nIssues identified in previous audit reports may not be eligible for payout\n\nTo be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.\n\nPayouts are handled by the __Sherlock__ team directly and are denominated in USD. Payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials (unless the hacker can prove public access to these leaked keys/credentials)\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts__\n\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "All smart contracts of Sherlock can be found at [https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts. ](https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts)\nHowever, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Insurance",
          "Staking"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $500,000"
          },
          {
            "level": "High",
            "payout": "USD $25,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sherlock is a risk management platform designed to provide DeFi protocols with affordable, reliable coverage against smart contract exploits starting from Day 1.\"), mdx(\"p\", null, \"Sherlock coverage is backed by proprietary staking pools that offer some of the highest risk-adjusted returns in DeFi. This is made possible by their team of security and risk experts who evaluate the smart contracts of every protocol, price the coverage and have skin in the game alongside stakers.\"), mdx(\"p\", null, \"For more information about Sherlock, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://sherlock.xyz/about/\"\n  }, \"https://sherlock.xyz/about/\"), \"  \"), mdx(\"p\", null, \"This bug bounty program is focused on their smart contracts and is focused on preventing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of user funds by profitable theft or profitable freezing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loss of staker funds by profitable theft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Profitable dilution of staker funds (infinite minting of staking positions)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Profitable payout exploits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DoS or \\u201Cfreezing\\u201D attacks\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Sherlock is a risk management platform designed to provide DeFi protocols with affordable, reliable coverage against smart contract exploits starting from Day 1.</p><p>Sherlock coverage is backed by proprietary staking pools that offer some of the highest risk-adjusted returns in DeFi. This is made possible by their team of security and risk experts who evaluate the smart contracts of every protocol, price the coverage and have skin in the game alongside stakers.</p><p>For more information about Sherlock, please visit <a href=\"https://sherlock.xyz/about/\">https://sherlock.xyz/about/</a>  </p><p>This bug bounty program is focused on their smart contracts and is focused on preventing:</p><ul><li>Loss of user funds by profitable theft or profitable freezing</li><li>Loss of staker funds by profitable theft</li><li>Profitable dilution of staker funds (infinite minting of staking positions)</li><li>Profitable payout exploits</li><li>DoS or “freezing” attacks</li></ul>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\"), mdx(\"p\", null, \"A PoC is required for Critical and High Smart Contract/Blockchain bug reports.\"), mdx(\"p\", null, \"Exploits that result in a material loss of funds for users and is profitable for the hacker are classified as Critical. Anything else that results in a material loss/freezing of user funds that is unprofitable for the hacker is classified as High. \"), mdx(\"p\", null, \"Critical vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \" for Critical bug reports. \"), mdx(\"p\", null, \"Known issues in their previous audits are considered out-of-scope: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/audits\"\n  }, \"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/audits\")), mdx(\"p\", null, \"Issues identified in previous audit reports may not be eligible for payout\"), mdx(\"p\", null, \"To be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sherlock\"), \" team directly and are denominated in USD. Payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.</p><p>A PoC is required for Critical and High Smart Contract/Blockchain bug reports.</p><p>Exploits that result in a material loss of funds for users and is profitable for the hacker are classified as Critical. Anything else that results in a material loss/freezing of user funds that is unprofitable for the hacker is classified as High. </p><p>Critical vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. However, there is a minimum of <strong>USD 50 000</strong> for Critical bug reports. </p><p>Known issues in their previous audits are considered out-of-scope: <a href=\"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/audits\">https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/audits</a></p><p>Issues identified in previous audit reports may not be eligible for payout</p><p>To be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.</p><p>Payouts are handled by the <strong>Sherlock</strong> team directly and are denominated in USD. Payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials (unless the hacker can prove public access to these leaked keys/credentials)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials (unless the hacker can prove public access to these leaked keys/credentials)</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All smart contracts of Sherlock can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts\"\n  }, \"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts. \"), \"\\nHowever, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All smart contracts of Sherlock can be found at <a href=\"https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts\">https://github.com/sherlock-protocol/sherlock-v2-core/tree/main/contracts. </a>\nHowever, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
