{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "zksyncera",
      "slug": "zksyncera",
      "project": "zkSync Era",
      "maxBounty": 1100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/2FexP3KmTArIkM9B7hKSey/68a4998fb80509fb868783ccd90ed22e/era-arrows-white_copy.jpg",
      "launchDate": "2023-03-10T12:00-05:00",
      "updatedDate": "2023-09-27T15:06:52.325Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $1,100,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $20,000 - $50,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": true
        },
        {
          "assetType": "websites_and_applications",
          "level": "critical",
          "payout": "USD $20,000",
          "pocRequired": true
        },
        {
          "assetType": "websites_and_applications",
          "level": "high",
          "payout": "USD $5,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "3BbLKJ1e3YoVh9RRpN2qQw",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2a2d6010202B93E727b61a60dfC1d5CF2707c1CE",
          "description": "DiamondCutFacet.sol"
        },
        {
          "id": "28Gt0aqrqL2gI8bBPwzXvB",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x32400084c286cf3e17e7b677ea9583e60a000324",
          "description": "DiamondProxy.sol"
        },
        {
          "id": "3CD4d92PhImakn55St2hBl",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x389a081BCf20e5803288183b929F08458F1d863D",
          "description": "ExecutorFacet.sol"
        },
        {
          "id": "4QAViAHl7CzNPp4RBgobWW",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xF1fB730b7f8E8391B27B91f8f791e10E4a53CEcc",
          "description": "GettersFacet.sol"
        },
        {
          "id": "6wiFWwxXYAev6GguqIMpfo",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x6df4A6D71622860dcc64C1FD9645d9a5BE96f088",
          "description": "GovernanceFacet.sol"
        },
        {
          "id": "7dMIvXvMfEycwgGm6qYw31",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x473b1887D45D61EfD87731a1D8eC3590b93c565d",
          "description": "Verifier.sol"
        },
        {
          "id": "3ZGqrbqw9M2Kd59XJo5Jwb",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xc796A402E1B26eCd2cd38F23e05A2f904504ec89",
          "description": "MailboxFacet.sol"
        },
        {
          "id": "2zS2cRE2jvyQLKFayDpvbE",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
          "description": "L1ERC20Bridge proxy TransparentUpgradeableProxy.sol"
        },
        {
          "id": "5I4H5pPAvGbY7eRtrYzlwj",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x22bE40122BA952b81c50bcaa86F84418ff623391",
          "description": "L1ERC20Bridge.sol"
        },
        {
          "id": "Q9kYpJoUirm3X7P7WVvqv",
          "type": "websites_and_applications",
          "url": "https://portal.zksync.io/",
          "description": "zkSync Era Portal"
        },
        {
          "id": "6EQ2jlAKf9UT2gqhhusTN8",
          "type": "websites_and_applications",
          "url": "https://explorer.zksync.io/",
          "description": "zkSync Era Block Explorer"
        },
        {
          "id": "1oPvQt6zLUGVfHrf1aKat7",
          "type": "websites_and_applications",
          "url": "https://zksync2-mainnet.zksync.io/",
          "description": "WEB3 HTTP API"
        },
        {
          "id": "6UOTwRJYvmPHrQOy8tITXG",
          "type": "websites_and_applications",
          "url": "https://zksync2-mainnet.zksync.io/ws",
          "description": "WEB3 WebSocket API"
        },
        {
          "id": "1ejHZJ5StKquSxdGihOAGS",
          "type": "websites_and_applications",
          "url": "https://zksync2-mainnet-explorer.zksync.io/network_stats",
          "description": "Block Explorer API"
        },
        {
          "id": "69TKLf0VwwxB9bsgzARJup",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x3dB52cE065f728011Ac6732222270b3F2360d919",
          "description": "ValidatorTimelock"
        },
        {
          "id": "6woobg9z3wKKTDWLmn44Jf",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/bootloader/bootloader.yul",
          "description": "Bootloader"
        },
        {
          "id": "6i1KEciDO8qBnLfsmU9goR",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/AccountCodeStorage.sol",
          "description": "AccountCodeStorage"
        },
        {
          "id": "4K2P3nMviPgJNzhKFWt7Oo",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/BootloaderUtilities.sol",
          "description": "BootloaderUtilities"
        },
        {
          "id": "4IS55mwoAbgDsy6p60e4lt",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/BytecodeCompressor.sol",
          "description": "BytecodeCompressor"
        },
        {
          "id": "3hFzWCmrJ9Nh1UuoF4FqQs",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/ContractDeployer.sol",
          "description": "ContractDeployer"
        },
        {
          "id": "2YTsHF6g858EWQgP9hoi8o",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/DefaultAccount.sol",
          "description": "DefaultAccount"
        },
        {
          "id": "6fA5h0MbZaecjfnzuhpEq2",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/EmptyContract.sol",
          "description": "EmptyContract"
        },
        {
          "id": "4DjJphqxRe4rvSVeAoRzhS",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/EventWriter.yul",
          "description": "EventWriter"
        },
        {
          "id": "6HWyejDftep8ViU7QYC6YJ",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/ImmutableSimulator.sol",
          "description": "ImmutableSimulator"
        },
        {
          "id": "6BaacyTpaAVr62RzRAwfMm",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/KnownCodesStorage.sol",
          "description": "KnownCodesStorage"
        },
        {
          "id": "5zA8BCZzpzPtYbhTsuy2nt",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/L1Messenger.sol",
          "description": "L1Messenger"
        },
        {
          "id": "6QtfLfAgcwyv0O6K5WALm0",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/L2EthToken.sol",
          "description": "L2EthToken"
        },
        {
          "id": "6t7mv3bw32x27gDBJbanay",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/MsgValueSimulator.sol",
          "description": "MsgValueSimulator"
        },
        {
          "id": "5xYkErfuFZPpyXaZltWvvG",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/NonceHolder.sol",
          "description": "NonceHolder"
        },
        {
          "id": "hM5ov8JPyLEypQYcHE6yi",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/SystemContext.sol",
          "description": "SystemContext"
        },
        {
          "id": "43D3t9zni7spmDMhHegaZG",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/precompiles/Ecrecover.yul",
          "description": "Ecrecover"
        },
        {
          "id": "2tXPvU3XwKkvYsnkKKhu1s",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/precompiles/Keccak256.yul",
          "description": "Keccak256"
        },
        {
          "id": "3wHeclCBMgdfaNdAcSKUq8",
          "type": "smart_contract",
          "url": "https://github.com/matter-labs/era-system-contracts/blob/857da713d9756ec13f071916848e283e74579817/contracts/precompiles/SHA256.yul",
          "description": "SHA256"
        }
      ],
      "impacts": [
        {
          "id": "4OyXSlwt6xy5lyFERKamJR",
          "title": "Direct theft of any user funds, whether at-rest or in-motion",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2GZqOR0CEk90uVZFYDKrrb",
          "title": "Permanent freezing of funds (that cannot be fixed by upgrade)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1GdgTmoDzT64VJlOp9L0Mm",
          "title": "Protocol insolvency",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "O79EeA6wXN2gE01MCSySM",
          "title": "Execute arbitrary system commands",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "1KVU72YJGOSmSFQ5oi3mAI",
          "title": "Retrieve sensitive data/files from a running server such as: database passwords, blockchain keys, etc (this does not include non-sensitive environment variables, open source code, or usernames)",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "7o3jcHZINrKcHiy0Npq5WR",
          "title": "Taking down the application/website",
          "type": "websites_and_applications",
          "severity": "critical"
        },
        {
          "id": "62bqkd3PUBkB4zYrEdTL1a",
          "title": "Permanent freezing of funds (that can be fixed by upgrade)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1Adi0lNPdGVhZsMnL4piJm",
          "title": "Permanent stopping the priority queue",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "vGwtRtHzaQpkPtM5NRfIP",
          "title": "Theft of user fees",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "79zORfYeYHYqH3cYx91fuq",
          "title": "Contract verification bypass",
          "type": "websites_and_applications",
          "severity": "high"
        },
        {
          "id": "76mAJJ0czJxkC9CZRypLFd",
          "title": "Misrepresentation of the transaction data that may lead to misleading third party users (e.g. manipulating transaction event log representation, transfer amount, etc)",
          "type": "websites_and_applications",
          "severity": "high"
        },
        {
          "id": "45RrnYSC9BMECGDY951LLj",
          "title": "Misrepresentation of the transaction data that may lead to misleading API users (e.g. manipulating transaction event log representation, transfer amount, etc)",
          "type": "websites_and_applications",
          "severity": "high"
        },
        {
          "id": "1JE9lbShhKDLrAP3rw76eQ",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "QIXvRyLvoGGxq7BHqIQP2",
          "title": "Griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "1yF1OtKjgnKjbBEJ3CB6yk",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "yGr30EydEuTE1QR2ekMRX",
          "title": "Unbounded gas consumption",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5HMvDWxLzm1EFBAii3ifpV",
          "title": "Contract fails to deliver promised returns, but doesn't lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "zkSync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum without compromising on security or decentralization. Since it's EVM compatible (Solidity/Vyper), 99% of Ethereum projects can redeploy without refactoring or re-auditing a single line of code. zkSync Era also uses an LLVM-based compiler that will eventually let developers write smart contracts in C++, Rust and other popular languages.\n\nFor more information about zkSync Era, please visit [https://zksync.io/](https://zksync.io/)\n\n__For Whitehats__: It is highly recommended that you review the details of this program in full. Although many Bug Bounty programs have standard terms and conditions, each also has their own unique details that are critical to your success. \n\nPrior to submitting a report please review the Immunefi [Bug Report Template and Best Practices. ](https://immunefisupport.zendesk.com/hc/en-us/articles/12435277406481-Bug-Report-Template)\n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "__Reward Distribution:__\n\nPlease review how rewards are distributed based on the [Immunefi Vulnerability Severity Classification System V2.2.](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/) This is a simplified 5-level scale system with separate scales for Smart Contracts and Websites/Apps.\n\n__Payouts and Payout Requirements:__\nRewards for critical smart contract bug reports will be further capped at 10% of direct funds at risk if the bug discovered is exploited. However, there is a minimum reward of __USD 50 000__.\n\nFor the project's bug bounty program, high-severity smart contract vulnerability rewards are determined according to an internal set of criteria established by the team. These criteria take into account the exploitability, impact, and probability of the vulnerability occurring, with special consideration given to bug reports that require multiple conditions not currently in place. There is a minimum reward of __USD 20,000__ for high-severity level vulnerabilities, and the maximum reward is capped at 100% of the affected funds, up to the max high cap, whichever is lower\n\nPayouts are handled by the zkSync team directly and are denominated in USD. However, payouts are done in USDC (zkSync Era). zkSync commits to honoring payouts according to the terms set out in this program at the time of report submission, and to treat this program as the agreement and source of truth concerning bug reports and responsible disclosures. \n\nFor the purposes of determining report validity, this is a Primacy of Impact program. \n\nLearn more about report validity best practices here: [Best Practice - Primacy of Impact vs Primacy of Rules. ](https://immunefisupport.zendesk.com/hc/en-us/articles/12340245635089-Best-Practices-Primacy-of-Impact)\n\n__KYC Requirements:__\n\nzkSync Era has a Know Your Customer (KYC) requirement for bug bounty payouts. Government identification is required for the KYC process.\n\n__Audit Discoveries and Known Issues:__\n\nBug reports covering previously-discovered bugs are not eligible for any reward through the bug bounty program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report via Immunefi. \n\nPrevious audits and known issues can be found at:\n- [https://blog.openzeppelin.com/zksync-layer-1-audit/](https://blog.openzeppelin.com/zksync-layer-1-audit/)\n- [https://blog.openzeppelin.com/zksync-layer-1-diff-audit/](https://blog.openzeppelin.com/zksync-layer-1-diff-audit/)\nA separate note on the fee model: zkSync has different gas prices per opcodes than Ethereum. Also, it is known that since gasPerPubdataByte is fluctuating, it may lead for gasLimits to not be reliable in the middle/long-term. \n\nThe fee model is still in development and so the operator may not be fully compensated. The impact of griefing attacks will be evaluated based on the ratio between funds spent by the attacker and the funds spent by the operator.\n",
      "outOfScopeAndRules": "The following impacts and attack vectors are excluded from rewards by default for all Immunefi bug bounty programs: \n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, operator), except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\n- Broken link hijacking is out of scope\n\n__Smart Contracts and Blockchain/DLT__\n\n- Basic economic governance attacks (e.g. 51% attack)\n- Best practice critiques\n- Sybil attacks\n- Centralization risks\n- Attacks related to AllowList and deposit limits\n\n__Websites and Apps__\n\n- Theoretical impacts without any proof or demonstration\n- Content spoofing / Text injection issues\n- Self-XSS\n- Captcha bypass using OCR\n- CSRF with no security impact (logout CSRF, change language, etc.)\\\n- Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as “httponly”)\n- Server-side information disclosure such as IPs, server names, and most stack traces\n- Vulnerabilities used to enumerate or confirm the existence of users or tenants\n- Vulnerabilities requiring unlikely user actions\n- URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)\n- Lack of SSL/TLS best practices\n- Attacks involving DDoS\n- Attacks requiring privileged access from within the organization\n- SPF records for email domains\n- Feature requests\n- Best practices\n\n__Prohibited Activities:__\n\nThe following activities are prohibited by this bug bounty program. Violation of these rules can result in a temporary suspension or permanent ban from the Immunefi platform at the sole discretion of the Immunefi team, which may also result in: 1) the forfeiture and loss of access to all bug submissions, and 2) zero payout. \n\nPlease note that Immunefi has no tolerance for spam/low-quality/incomplete bug reports, “beg bounty” behavior, and misrepresentation of assets and severity. Immunefi exists to protect the global crypto community, not facilitate grift.\n\nProhibited: \n- Any testing with mainnet or public testnet deployed code; all testing should be done on private testnets\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n- [Any other actions prohibited by the Immunefi Rules.](https://immunefi.com/rules/) These rules are subject to change at any time.  \n",
      "assetsBodyV2": "- __Smart Contracts - PoC__, Smart Contract bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact.  \n- For more information on PoCs please visit: [Proof of Concept (PoC) Guidelines and Rules.](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules)\n\n- __Web/App__ - Bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact. All web/app bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. All PoC content must adhere to the [PoC guidelines and rules of Immunefi](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules). In the event that a PoC requires an attack on a web/app asset provided, they must still adhere to the rules provided, otherwise eligibility for a reward may be revoked. \n\n- For more information on PoCs please visit: [Proof of Concept (PoC) Guidelines and Rules](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules)\n\nWhitehats we highly encourage you to review any potential subdomains and what specific port(s) are in scope. Even though the domain may be the same, different ports may point to different assets.  \n\n__Dev Environment and Documentation:__\n\nzkSync has included dev documentation and/or instructions to help in reviewing code and exploring for bugs:\n\n- [https://github.com/matter-labs/zksync-era](https://github.com/matter-labs/zksync-era)\n- [https://github.com/matter-labs/era-contracts](https://github.com/matter-labs/era-contracts)\n- [https://github.com/matter-labs/era-system-contracts](https://github.com/matter-labs/era-system-contracts)\n\n__Impacts to other assets:__\n\nHackers are encouraged to submit issues outside of the outlined Impacts and Assets in Scope. \n\nIf whitehats can demonstrate a critical and high impact for an asset not in scope, zkSync encourages you to submit your bug report using the “primacy of impact exception” asset. \n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L2"
        ],
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract",
          "Websites and Applications"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract",
          "Websites and Applications"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $1,100,000"
          },
          {
            "level": "High",
            "payout": "USD $20,000 - $50,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": [
          {
            "level": "Critical",
            "payout": "USD $20,000"
          },
          {
            "level": "High",
            "payout": "USD $5,000"
          }
        ]
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"zkSync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum without compromising on security or decentralization. Since it's EVM compatible (Solidity/Vyper), 99% of Ethereum projects can redeploy without refactoring or re-auditing a single line of code. zkSync Era also uses an LLVM-based compiler that will eventually let developers write smart contracts in C++, Rust and other popular languages.\"), mdx(\"p\", null, \"For more information about zkSync Era, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zksync.io/\"\n  }, \"https://zksync.io/\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For Whitehats\"), \": It is highly recommended that you review the details of this program in full. Although many Bug Bounty programs have standard terms and conditions, each also has their own unique details that are critical to your success. \"), mdx(\"p\", null, \"Prior to submitting a report please review the Immunefi \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/12435277406481-Bug-Report-Template\"\n  }, \"Bug Report Template and Best Practices. \")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>zkSync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum without compromising on security or decentralization. Since it&#x27;s EVM compatible (Solidity/Vyper), 99% of Ethereum projects can redeploy without refactoring or re-auditing a single line of code. zkSync Era also uses an LLVM-based compiler that will eventually let developers write smart contracts in C++, Rust and other popular languages.</p><p>For more information about zkSync Era, please visit <a href=\"https://zksync.io/\">https://zksync.io/</a></p><p><strong>For Whitehats</strong>: It is highly recommended that you review the details of this program in full. Although many Bug Bounty programs have standard terms and conditions, each also has their own unique details that are critical to your success. </p><p>Prior to submitting a report please review the Immunefi <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/12435277406481-Bug-Report-Template\">Bug Report Template and Best Practices. </a></p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Distribution:\")), mdx(\"p\", null, \"Please review how rewards are distributed based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2.\"), \" This is a simplified 5-level scale system with separate scales for Smart Contracts and Websites/Apps.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Payouts and Payout Requirements:\"), \"\\nRewards for critical smart contract bug reports will be further capped at 10% of direct funds at risk if the bug discovered is exploited. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \".\"), mdx(\"p\", null, \"For the project's bug bounty program, high-severity smart contract vulnerability rewards are determined according to an internal set of criteria established by the team. These criteria take into account the exploitability, impact, and probability of the vulnerability occurring, with special consideration given to bug reports that require multiple conditions not currently in place. There is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 20,000\"), \" for high-severity level vulnerabilities, and the maximum reward is capped at 100% of the affected funds, up to the max high cap, whichever is lower\"), mdx(\"p\", null, \"Payouts are handled by the zkSync team directly and are denominated in USD. However, payouts are done in USDC (zkSync Era). zkSync commits to honoring payouts according to the terms set out in this program at the time of report submission, and to treat this program as the agreement and source of truth concerning bug reports and responsible disclosures. \"), mdx(\"p\", null, \"For the purposes of determining report validity, this is a Primacy of Impact program. \"), mdx(\"p\", null, \"Learn more about report validity best practices here: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/12340245635089-Best-Practices-Primacy-of-Impact\"\n  }, \"Best Practice - Primacy of Impact vs Primacy of Rules. \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"KYC Requirements:\")), mdx(\"p\", null, \"zkSync Era has a Know Your Customer (KYC) requirement for bug bounty payouts. Government identification is required for the KYC process.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Audit Discoveries and Known Issues:\")), mdx(\"p\", null, \"Bug reports covering previously-discovered bugs are not eligible for any reward through the bug bounty program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report via Immunefi. \"), mdx(\"p\", null, \"Previous audits and known issues can be found at:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.openzeppelin.com/zksync-layer-1-audit/\"\n  }, \"https://blog.openzeppelin.com/zksync-layer-1-audit/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.openzeppelin.com/zksync-layer-1-diff-audit/\"\n  }, \"https://blog.openzeppelin.com/zksync-layer-1-diff-audit/\"), \"\\nA separate note on the fee model: zkSync has different gas prices per opcodes than Ethereum. Also, it is known that since gasPerPubdataByte is fluctuating, it may lead for gasLimits to not be reliable in the middle/long-term. \")), mdx(\"p\", null, \"The fee model is still in development and so the operator may not be fully compensated. The impact of griefing attacks will be evaluated based on the ratio between funds spent by the attacker and the funds spent by the operator.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Reward Distribution:</strong></p><p>Please review how rewards are distributed based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2/\">Immunefi Vulnerability Severity Classification System V2.2.</a> This is a simplified 5-level scale system with separate scales for Smart Contracts and Websites/Apps.</p><p><strong>Payouts and Payout Requirements:</strong>\nRewards for critical smart contract bug reports will be further capped at 10% of direct funds at risk if the bug discovered is exploited. However, there is a minimum reward of <strong>USD 50 000</strong>.</p><p>For the project&#x27;s bug bounty program, high-severity smart contract vulnerability rewards are determined according to an internal set of criteria established by the team. These criteria take into account the exploitability, impact, and probability of the vulnerability occurring, with special consideration given to bug reports that require multiple conditions not currently in place. There is a minimum reward of <strong>USD 20,000</strong> for high-severity level vulnerabilities, and the maximum reward is capped at 100% of the affected funds, up to the max high cap, whichever is lower</p><p>Payouts are handled by the zkSync team directly and are denominated in USD. However, payouts are done in USDC (zkSync Era). zkSync commits to honoring payouts according to the terms set out in this program at the time of report submission, and to treat this program as the agreement and source of truth concerning bug reports and responsible disclosures. </p><p>For the purposes of determining report validity, this is a Primacy of Impact program. </p><p>Learn more about report validity best practices here: <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/12340245635089-Best-Practices-Primacy-of-Impact\">Best Practice - Primacy of Impact vs Primacy of Rules. </a></p><p><strong>KYC Requirements:</strong></p><p>zkSync Era has a Know Your Customer (KYC) requirement for bug bounty payouts. Government identification is required for the KYC process.</p><p><strong>Audit Discoveries and Known Issues:</strong></p><p>Bug reports covering previously-discovered bugs are not eligible for any reward through the bug bounty program. If a bug report covers a known issue, it may be rejected together with proof of the issue being known before escalation of the bug report via Immunefi. </p><p>Previous audits and known issues can be found at:</p><ul><li><a href=\"https://blog.openzeppelin.com/zksync-layer-1-audit/\">https://blog.openzeppelin.com/zksync-layer-1-audit/</a></li><li><a href=\"https://blog.openzeppelin.com/zksync-layer-1-diff-audit/\">https://blog.openzeppelin.com/zksync-layer-1-diff-audit/</a>\nA separate note on the fee model: zkSync has different gas prices per opcodes than Ethereum. Also, it is known that since gasPerPubdataByte is fluctuating, it may lead for gasLimits to not be reliable in the middle/long-term. </li></ul><p>The fee model is still in development and so the operator may not be fully compensated. The impact of griefing attacks will be evaluated based on the ratio between funds spent by the attacker and the funds spent by the operator.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following impacts and attack vectors are excluded from rewards by default for all Immunefi bug bounty programs: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, operator), except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Broken link hijacking is out of scope\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain/DLT\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks related to AllowList and deposit limits\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Websites and Apps\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theoretical impacts without any proof or demonstration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content spoofing / Text injection issues\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self-XSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Captcha bypass using OCR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSRF with no security impact (logout CSRF, change language, etc.)\\\\\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as \\u201Chttponly\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server-side information disclosure such as IPs, server names, and most stack traces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities used to enumerate or confirm the existence of users or tenants\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities requiring unlikely user actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of SSL/TLS best practices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks involving DDoS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring privileged access from within the organization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SPF records for email domains\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Feature requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practices\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prohibited Activities:\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program. Violation of these rules can result in a temporary suspension or permanent ban from the Immunefi platform at the sole discretion of the Immunefi team, which may also result in: 1) the forfeiture and loss of access to all bug submissions, and 2) zero payout. \"), mdx(\"p\", null, \"Please note that Immunefi has no tolerance for spam/low-quality/incomplete bug reports, \\u201Cbeg bounty\\u201D behavior, and misrepresentation of assets and severity. Immunefi exists to protect the global crypto community, not facilitate grift.\"), mdx(\"p\", null, \"Prohibited: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet deployed code; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://immunefi.com/rules/\"\n  }, \"Any other actions prohibited by the Immunefi Rules.\"), \" These rules are subject to change at any time.  \")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following impacts and attack vectors are excluded from rewards by default for all Immunefi bug bounty programs: </p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, operator), except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible</li><li>Broken link hijacking is out of scope</li></ul><p><strong>Smart Contracts and Blockchain/DLT</strong></p><ul><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li><li>Attacks related to AllowList and deposit limits</li></ul><p><strong>Websites and Apps</strong></p><ul><li>Theoretical impacts without any proof or demonstration</li><li>Content spoofing / Text injection issues</li><li>Self-XSS</li><li>Captcha bypass using OCR</li><li>CSRF with no security impact (logout CSRF, change language, etc.)\\</li><li>Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as “httponly”)</li><li>Server-side information disclosure such as IPs, server names, and most stack traces</li><li>Vulnerabilities used to enumerate or confirm the existence of users or tenants</li><li>Vulnerabilities requiring unlikely user actions</li><li>URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability)</li><li>Lack of SSL/TLS best practices</li><li>Attacks involving DDoS</li><li>Attacks requiring privileged access from within the organization</li><li>SPF records for email domains</li><li>Feature requests</li><li>Best practices</li></ul><p><strong>Prohibited Activities:</strong></p><p>The following activities are prohibited by this bug bounty program. Violation of these rules can result in a temporary suspension or permanent ban from the Immunefi platform at the sole discretion of the Immunefi team, which may also result in: 1) the forfeiture and loss of access to all bug submissions, and 2) zero payout. </p><p>Please note that Immunefi has no tolerance for spam/low-quality/incomplete bug reports, “beg bounty” behavior, and misrepresentation of assets and severity. Immunefi exists to protect the global crypto community, not facilitate grift.</p><p>Prohibited: </p><ul><li>Any testing with mainnet or public testnet deployed code; all testing should be done on private testnets</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li><li><a href=\"https://immunefi.com/rules/\">Any other actions prohibited by the Immunefi Rules.</a> These rules are subject to change at any time.  </li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts - PoC\"), \", Smart Contract bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact.  \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For more information on PoCs please visit: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\"\n  }, \"Proof of Concept (PoC) Guidelines and Rules.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web/App\"), \" - Bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact. All web/app bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. All PoC content must adhere to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\"\n  }, \"PoC guidelines and rules of Immunefi\"), \". In the event that a PoC requires an attack on a web/app asset provided, they must still adhere to the rules provided, otherwise eligibility for a reward may be revoked. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For more information on PoCs please visit: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\"\n  }, \"Proof of Concept (PoC) Guidelines and Rules\")))), mdx(\"p\", null, \"Whitehats we highly encourage you to review any potential subdomains and what specific port(s) are in scope. Even though the domain may be the same, different ports may point to different assets.  \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dev Environment and Documentation:\")), mdx(\"p\", null, \"zkSync has included dev documentation and/or instructions to help in reviewing code and exploring for bugs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/matter-labs/zksync-era\"\n  }, \"https://github.com/matter-labs/zksync-era\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/matter-labs/era-contracts\"\n  }, \"https://github.com/matter-labs/era-contracts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/matter-labs/era-system-contracts\"\n  }, \"https://github.com/matter-labs/era-system-contracts\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impacts to other assets:\")), mdx(\"p\", null, \"Hackers are encouraged to submit issues outside of the outlined Impacts and Assets in Scope. \"), mdx(\"p\", null, \"If whitehats can demonstrate a critical and high impact for an asset not in scope, zkSync encourages you to submit your bug report using the \\u201Cprimacy of impact exception\\u201D asset. \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<ul><li><p><strong>Smart Contracts - PoC</strong>, Smart Contract bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact.  </p></li><li><p>For more information on PoCs please visit: <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\">Proof of Concept (PoC) Guidelines and Rules.</a></p></li><li><p><strong>Web/App</strong> - Bug reports are to include a runnable Proof of Concept (PoC) in order to prove impact. All web/app bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. All PoC content must adhere to the <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\">PoC guidelines and rules of Immunefi</a>. In the event that a PoC requires an attack on a web/app asset provided, they must still adhere to the rules provided, otherwise eligibility for a reward may be revoked. </p></li><li><p>For more information on PoCs please visit: <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\">Proof of Concept (PoC) Guidelines and Rules</a></p></li></ul><p>Whitehats we highly encourage you to review any potential subdomains and what specific port(s) are in scope. Even though the domain may be the same, different ports may point to different assets.  </p><p><strong>Dev Environment and Documentation:</strong></p><p>zkSync has included dev documentation and/or instructions to help in reviewing code and exploring for bugs:</p><ul><li><a href=\"https://github.com/matter-labs/zksync-era\">https://github.com/matter-labs/zksync-era</a></li><li><a href=\"https://github.com/matter-labs/era-contracts\">https://github.com/matter-labs/era-contracts</a></li><li><a href=\"https://github.com/matter-labs/era-system-contracts\">https://github.com/matter-labs/era-system-contracts</a></li></ul><p><strong>Impacts to other assets:</strong></p><p>Hackers are encouraged to submit issues outside of the outlined Impacts and Assets in Scope. </p><p>If whitehats can demonstrate a critical and high impact for an asset not in scope, zkSync encourages you to submit your bug report using the “primacy of impact exception” asset. </p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
