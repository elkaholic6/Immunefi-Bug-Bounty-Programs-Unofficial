{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "perennial",
      "slug": "perennial",
      "project": "Perennial",
      "maxBounty": 500000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/4ycrPoQ936fnEBbl69XK77/824a5bb3ea88e9ebcb7a2b0bd01e746c/perennial_logo.jpeg",
      "launchDate": "2023-10-11T12:00+03:00",
      "updatedDate": "2023-10-16T14:45:23.062Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $25,000 to USD $500,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "6RKgX17cqz454Ud3kWhWwU",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x5bEA99BF18624AA504580546Ac9D9Ac3b9aeb747",
          "description": "ProxyAdmin (V2)",
          "isPrimacyOfImpact": null
        },
        {
          "id": "PYd33EsFH9sw1F7ft9Ohx",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xdA381aeD086f544BaC66e73C071E158374cc105B",
          "description": "TimelockController (V2)",
          "isPrimacyOfImpact": null
        },
        {
          "id": "7KLyl4kOtwUV6YUiEpgD6t",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xDaD8A103473dfd47F90168A0E46766ed48e26EC7",
          "description": "MarketFactory",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2jXT6RU0jhDJ3adgwSg3Vx",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x8CDa59615C993f925915D3eb4394BAdB3feEF413",
          "description": "OracleFactory",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4lRb40DrB6GM63wSTd5xdU",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xeea68DbE228210454D4443f4E1B37E842B848C3d",
          "description": "PayoffFactory",
          "isPrimacyOfImpact": null
        },
        {
          "id": "67aiZDQ9W3rRucicv1Tvza",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x9F35B78c6502e2B19D45Dc275f24462B0fa577B4",
          "description": "PythFactory",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4RynR09YQN5v4oLTfsmgjR",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xad3565680aEcEe27A39249D8c2D55dAc79BE5Ad0",
          "description": "VaultFactory",
          "isPrimacyOfImpact": null
        },
        {
          "id": "21EEEoPXFTqwLKWXlz1lxP",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2C19eac953048801FfE1358D109A1Ac2aF7930fD",
          "description": "ChainlinkOracle_ETH",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6toJ42AfLZrJXjmxdGthHF",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2d264EBDb6632A06A1726193D4d37FeF1E5dbDcd",
          "description": "Collateral_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5kKhJH9ZCMKGRs9TVgQFR7",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x9df509186b6d3b7D033359f94c8b1BB5544d51b3?utm_source=immunefi",
          "description": "Controller_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6u9itwAGYZ4adzNTYM6Pag",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xfC20BccA96BDE758E9C69151d99cEcfEAE3AB37E?utm_source=immunefi",
          "description": "Forwarder",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4IIj5n58b3oDXKbf6dIyUq",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xE77076D3EeE12dA1d7402Ff4e6Ca12A8d99FcE8B?utm_source=immunefi",
          "description": "MultiInvoker_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1YXCGsdzdkJCoPgpy5E71T",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x69a682F90d58c8D1ABEa18aE1bc98c9A1be4f2EB?utm_source=immunefi",
          "description": "Incentivizer_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4Qgpzekz5hPyuHzjbGZpPU",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xD260A68a081f1D92f5Eb1F0aFDB29f00836dfa6b?utm_source=immunefi",
          "description": "ProxyAdmin",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1SKwLP9M3H6FuMBrrU2Big",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x13b7A79e050ef2C3fDc858EFD5c066c3655be841",
          "description": "TimelockController",
          "isPrimacyOfImpact": null
        },
        {
          "id": "42ALdA4aUl8WnzKz7svkt",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x841d7C994aC0Bb17CcD65a021E686e3cFafE2118?utm_source=immunefi",
          "description": "Product_UpgradeableBeacon",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1JGwzRnprieCUFimXEwr21",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xAEf566ca7E84d1E736f999765a804687f39D9094?utm_source=immunefi",
          "description": "TwoWayBatcher",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2Vm1XSLFfnJkf4XjJHRQ98",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xe8ee3b7d74bd6eebba0992353b9fec66abf28dc8?utm_source=immunefi",
          "description": "ChainlinkOracle_ETH",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6m1rItD5TjFYOVonUo3art",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xAF8CeD28FcE00ABD30463D55dA81156AA5aEEEc2?utm_source=immunefi",
          "description": "Collateral_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4opdAnn3jKp4Z7CjBGRhJf",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xA59eF0208418559770a48D7ae4f260A28763167B?utm_source=immunefi",
          "description": "Controller_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1eH6G3X6eHNuRquDxjlUAa",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xe72E82b672d7D3e206327C0762E9805fbFCBCa92?utm_source=immunefi",
          "description": "MultiInvoker_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4uzUvMHRv0N03quQwLqRIg",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xfC20BccA96BDE758E9C69151d99cEcfEAE3AB37E?utm_source=immunefi",
          "description": "Incentivizer_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "3lqgt4RZPFr1ywrDsn0E2H",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x4f75cFbfc8b4A109659471b8d4593f5b19Be169B?utm_source=immunefi",
          "description": "ProxyAdmin",
          "isPrimacyOfImpact": null
        },
        {
          "id": "Rty4PsIS12rAeGxTAteT9",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x4AA8B447417815807b955757a6D1b78b86f3aD22?utm_source=immunef",
          "description": "TimelockController",
          "isPrimacyOfImpact": null
        },
        {
          "id": "75k8xNaBb4DuwL5eRUl1Tq",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xC12b0fE62441bAAd525cd7d770cf21C883C77bc6?utm_source=immunefi",
          "description": "Product_UpgradeableBeacon",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5KYdZWkjbhp5ERs5I3csRd",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x5a572b5fbbc43387b5ef8de2c4728a4108ef24a6?utm_source=immunef",
          "description": "Balanced Vault",
          "isPrimacyOfImpact": null
        },
        {
          "id": "26OAwHV8Vjvp2Hffggr3AF",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x1960628db367281B1a186dD5B80B5dd6978F016F?utm_source=immunef",
          "description": "Balanced Vault",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5kmrHDxm8EquOnOxtjwW3p",
          "type": "smart_contract",
          "url": "https://immunefi.com/",
          "description": "Primacy of Impact",
          "isPrimacyOfImpact": true
        }
      ],
      "impacts": [
        {
          "id": "7wdWdsXat7ZuZBTmPxZ6G6",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2jfqf2ZQvpD9Y6xxo7EXI7",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "2rtm9PUIpGTAxpc4KNfuT3",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1xRX3wIyf4fS3LOu5DYOZ4",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1hPsqouNCCtGHgfJHWU3KN",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "1VheaxyZuARKT2m7uaUq5J",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7tY7w0r7xjhf1Opjs6NCiI",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5FElMyrKRTfywOPK0vdVLS",
          "title": "Temporary freezing of protocol and/or funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "1VZg5zV6k17XHGpNI1Tm5H",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.\n\nPerennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker’s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style).\n\nTakers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades.\n\nOn a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.\n\nPerennial is minimalism at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.\n\nPerennial Features:\n1. Peer-to-Pool AMM — trade against a pool of capital, without having to find a counterparty to take the other side of a trade\n2. Zero price slippage — trade directly at the current price, regardless of size\n3. Cash-settled — trades settled in $USD, not crypto, in line the most popular crypto derivatives\n4. Utilization-based Funding Rate — funding varies with pool utilization, creating an extremely simple, continuous funding rate\n5. Two-sided Leverage — Takers & Makers can both trade with significant leverage, amplifying capital efficiency\n6. Maximum LP flexibility — Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control\n7. Developer-oriented & built for composability — With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.\n8. Permissionless — permissionless market creation, integration, and composability.\n\nFor more information about Perennial, please visit [https://perennial.finance/](https://perennial.finance/)\n\nPayouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC. \n\n__KYC Requirement__\n\nThe provision of KYC is required to receive a reward for this bug bounty program where the following information will be required to be provided:\n- Name\n- Government ID\n- Country of Residence\n\nKYC information is only required on confirmation of the validity of a bug report.   \n\n__Responsible Publication__\n\nPerennial adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our [Responsible Publication](https://immunefi.com/responsible-publication/) page.\n\n__Primacy of Impact vs Primacy of Rules__\n\nPerennial adheres to the Primacy of Impact for the following severity levels:\n- Smart Contracts - Critical\n- Smart Contracts - High \n\nIf a category’s severity level is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program as long as it involves an impact under that respective severity level. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.\n\nTestnet and mock files are not covered under the Primacy of Impact. \n\nAll other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\n\n__Known Issue Assurance__\n\nPerennial commits to providing Known Issue Assurance to bug submissions through their program. This means that Perennial will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. \n\n__Immunefi Standard Badge__\n\nPerennial has satisfied the requirements for the [Immunefi Standard Badge](https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-), which is given to projects that adhere to our best practices. \n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. \n\n__Reward Calculation for Critical Level Reports__\n\nFor critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD 500 000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD 25 000 is to be rewarded in order to incentivize security researchers against with holding a bug report.   \n\n__Repeatable Attack Limitations__\n\nIn cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.\n\n__Public Disclosure of Known Issues__\n\nBug reports covering previously-discovered bugs acknowledged below are not eligible for any reward through the bug bounty program. \n- [https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits](https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits)\n- [https://code4rena.com/reports/2021-12-perennial](https://code4rena.com/reports/2021-12-perennial)\n\n__Previous Audits__\n\nPerennial has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.\n- [https://github.com/equilibria-xyz/perennial-v2/tree/main/audits](https://github.com/equilibria-xyz/perennial-v2/tree/main/audits)\n\n__Feasibility Limitations__\n\nBug reports that require an attack that involve one or more other protocols (e.g. utilizing flash loans from a margin protocol or manipulating the spot prices on a DEX), either to make an attack more severe than it would be in isolation, or to achieve an attack that would otherwise be impossible or infeasible, would be a reduction of severity level payout.. However, they will be considered as in-scope and categorized according to the program rules as long as all of the following are true:\n- Losses or other negative effects of the attack are inflicted upon Perennial ecosystem participants \n- The additional protocols used must have enough liquidity in various assets to allow the attack to succeed at the time of bug report submission. For example: if an attack requires an ETH flash loan, but the amount is larger than all the ETH available for loan across the ecosystem\n\n__Proof of Concept (PoC) Requirements__\n\nA PoC is required for the following severity levels:\nCritical Smart Contract\n\nAll PoCs submitted must comply with the Immunefi-wide [PoC Guidelines and Rules](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules). Bug report submissions without a PoC when a PoC is required will not be provided with a reward.\n\n__Reward Payment Terms__\n\nPayouts for all bug reports are denominated in USD. Payouts for Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC.\n\nCritical payouts above USD 50 000 are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the coverage agreement between Perennial and Sherlock should be referenced.\n\nHence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of USD 50 000, paid out by the Perennial team.\n\nAny loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: \n- MarketParameter: [https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol](https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol)\n- RiskParameter: [https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol](https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol)\n",
      "outOfScopeAndRules": "These impacts are out of scope for this bug bounty program. \n\n__All Categories__\n\n- Impacts requiring attacks that the reporter has already exploited themselves, leading to damage\n- Impacts caused by attacks requiring access to leaked keys/credentials\n- Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\n- Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code\n- Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production\n- Best practice recommendations\n- Feature requests\n- Impacts on test files and configuration files unless stated otherwise in the bug bounty program\n\n__Smart Contracts__\n\n- Incorrect data supplied by third party oracles\n   - Not to exclude oracle manipulation/flash loan attacks\n- Impacts requiring basic economic and governance attacks (e.g. 51% attack)\n- Lack of liquidity impacts\n- Impacts from Sybil attacks\n- Impacts involving centralization risks\n- Best practice recommendations\n\nThe following activities are prohibited by this bug bounty program:\n\n- Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet\n- Any testing with pricing oracles or third-party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks that are executed against project assets\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n",
      "assetsBodyV2": "Perennial V2 follows a Factory and BeaconProxy pattern. All of the above factories (with the exception of PayoffFactory) have a beacon proxy implementation at the \"implementation\" getter function and a factory implementation that is readable via \"proxyAdmin.getProxyImplementation(factoryAddress)’’.\n\nLatest implementation deployments can also be found at https://github.com/equilibria-xyz/perennial-v2/tree/main/packages/perennial-deploy/deployments/arbitrum\n\nThough only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.\n\nAll code of Perennial can be found at [https://github.com/equilibria-xyz/perennial-v2](https://github.com/equilibria-xyz/perennial-v2) Documentation for the assets provided in the table can be found at [https://docs.perennial.finance/](https://docs.perennial.finance/). \n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Derivatives"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $25,000 to USD $500,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.\"), mdx(\"p\", null, \"Perennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker\\u2019s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style).\"), mdx(\"p\", null, \"Takers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades.\"), mdx(\"p\", null, \"On a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.\"), mdx(\"p\", null, \"Perennial is minimalism at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.\"), mdx(\"p\", null, \"Perennial Features:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Peer-to-Pool AMM \\u2014 trade against a pool of capital, without having to find a counterparty to take the other side of a trade\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Zero price slippage \\u2014 trade directly at the current price, regardless of size\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Cash-settled \\u2014 trades settled in $USD, not crypto, in line the most popular crypto derivatives\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Utilization-based Funding Rate \\u2014 funding varies with pool utilization, creating an extremely simple, continuous funding rate\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Two-sided Leverage \\u2014 Takers & Makers can both trade with significant leverage, amplifying capital efficiency\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Maximum LP flexibility \\u2014 Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Developer-oriented & built for composability \\u2014 With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Permissionless \\u2014 permissionless market creation, integration, and composability.\")), mdx(\"p\", null, \"For more information about Perennial, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://perennial.finance/\"\n  }, \"https://perennial.finance/\")), mdx(\"p\", null, \"Payouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"KYC Requirement\")), mdx(\"p\", null, \"The provision of KYC is required to receive a reward for this bug bounty program where the following information will be required to be provided:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Government ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Country of Residence\")), mdx(\"p\", null, \"KYC information is only required on confirmation of the validity of a bug report.   \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Responsible Publication\")), mdx(\"p\", null, \"Perennial adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/responsible-publication/\"\n  }, \"Responsible Publication\"), \" page.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Primacy of Impact vs Primacy of Rules\")), mdx(\"p\", null, \"Perennial adheres to the Primacy of Impact for the following severity levels:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contracts - Critical\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart Contracts - High \")), mdx(\"p\", null, \"If a category\\u2019s severity level is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program as long as it involves an impact under that respective severity level. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.\"), mdx(\"p\", null, \"Testnet and mock files are not covered under the Primacy of Impact. \"), mdx(\"p\", null, \"All other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Known Issue Assurance\")), mdx(\"p\", null, \"Perennial commits to providing Known Issue Assurance to bug submissions through their program. This means that Perennial will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Immunefi Standard Badge\")), mdx(\"p\", null, \"Perennial has satisfied the requirements for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-\"\n  }, \"Immunefi Standard Badge\"), \", which is given to projects that adhere to our best practices. \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.</p><p>Perennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker’s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style).</p><p>Takers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades.</p><p>On a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.</p><p>Perennial is minimalism at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.</p><p>Perennial Features:</p><ol><li>Peer-to-Pool AMM — trade against a pool of capital, without having to find a counterparty to take the other side of a trade</li><li>Zero price slippage — trade directly at the current price, regardless of size</li><li>Cash-settled — trades settled in $USD, not crypto, in line the most popular crypto derivatives</li><li>Utilization-based Funding Rate — funding varies with pool utilization, creating an extremely simple, continuous funding rate</li><li>Two-sided Leverage — Takers &amp; Makers can both trade with significant leverage, amplifying capital efficiency</li><li>Maximum LP flexibility — Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control</li><li>Developer-oriented &amp; built for composability — With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.</li><li>Permissionless — permissionless market creation, integration, and composability.</li></ol><p>For more information about Perennial, please visit <a href=\"https://perennial.finance/\">https://perennial.finance/</a></p><p>Payouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC. </p><p><strong>KYC Requirement</strong></p><p>The provision of KYC is required to receive a reward for this bug bounty program where the following information will be required to be provided:</p><ul><li>Name</li><li>Government ID</li><li>Country of Residence</li></ul><p>KYC information is only required on confirmation of the validity of a bug report.   </p><p><strong>Responsible Publication</strong></p><p>Perennial adheres to category 2. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our <a href=\"https://immunefi.com/responsible-publication/\">Responsible Publication</a> page.</p><p><strong>Primacy of Impact vs Primacy of Rules</strong></p><p>Perennial adheres to the Primacy of Impact for the following severity levels:</p><ul><li>Smart Contracts - Critical</li><li>Smart Contracts - High </li></ul><p>If a category’s severity level is covered within the Primacy of Impact, it means that even if the impacted asset is not in-scope but is owned by the project, then it would be considered as in-scope of the bug bounty program as long as it involves an impact under that respective severity level. When submitting a report, just select the Primacy of Impact asset placeholder. If the team behind this project has multiple projects, those other projects are not covered under the Primacy of Impact of this program. Instead, check if those other projects have a bug bounty program on Immunefi.</p><p>Testnet and mock files are not covered under the Primacy of Impact. </p><p>All other severity levels not listed here are considered under the Primacy of Rules, which means that they are bound by the terms of the bug bounty program.</p><p><strong>Known Issue Assurance</strong></p><p>Perennial commits to providing Known Issue Assurance to bug submissions through their program. This means that Perennial will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. </p><p><strong>Immunefi Standard Badge</strong></p><p>Perennial has satisfied the requirements for the <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-\">Immunefi Standard Badge</a>, which is given to projects that adhere to our best practices. </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Calculation for Critical Level Reports\")), mdx(\"p\", null, \"For critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD 500 000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD 25 000 is to be rewarded in order to incentivize security researchers against with holding a bug report.   \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Repeatable Attack Limitations\")), mdx(\"p\", null, \"In cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Public Disclosure of Known Issues\")), mdx(\"p\", null, \"Bug reports covering previously-discovered bugs acknowledged below are not eligible for any reward through the bug bounty program. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits\"\n  }, \"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://code4rena.com/reports/2021-12-perennial\"\n  }, \"https://code4rena.com/reports/2021-12-perennial\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Previous Audits\")), mdx(\"p\", null, \"Perennial has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-v2/tree/main/audits\"\n  }, \"https://github.com/equilibria-xyz/perennial-v2/tree/main/audits\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Feasibility Limitations\")), mdx(\"p\", null, \"Bug reports that require an attack that involve one or more other protocols (e.g. utilizing flash loans from a margin protocol or manipulating the spot prices on a DEX), either to make an attack more severe than it would be in isolation, or to achieve an attack that would otherwise be impossible or infeasible, would be a reduction of severity level payout.. However, they will be considered as in-scope and categorized according to the program rules as long as all of the following are true:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Losses or other negative effects of the attack are inflicted upon Perennial ecosystem participants \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The additional protocols used must have enough liquidity in various assets to allow the attack to succeed at the time of bug report submission. For example: if an attack requires an ETH flash loan, but the amount is larger than all the ETH available for loan across the ecosystem\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Proof of Concept (PoC) Requirements\")), mdx(\"p\", null, \"A PoC is required for the following severity levels:\\nCritical Smart Contract\"), mdx(\"p\", null, \"All PoCs submitted must comply with the Immunefi-wide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\"\n  }, \"PoC Guidelines and Rules\"), \". Bug report submissions without a PoC when a PoC is required will not be provided with a reward.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reward Payment Terms\")), mdx(\"p\", null, \"Payouts for all bug reports are denominated in USD. Payouts for Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC.\"), mdx(\"p\", null, \"Critical payouts above USD 50 000 are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the coverage agreement between Perennial and Sherlock should be referenced.\"), mdx(\"p\", null, \"Hence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of USD 50 000, paid out by the Perennial team.\"), mdx(\"p\", null, \"Any loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MarketParameter: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol\"\n  }, \"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"RiskParameter: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol\"\n  }, \"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol\"))));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. </p><p><strong>Reward Calculation for Critical Level Reports</strong></p><p>For critical Smart Contract bugs, the reward amount is 10% of the funds directly affected up to a maximum of USD 500 000. The calculation of the amount of funds at risk is based on the time and date the bug report is submitted. However, a minimum reward of USD 25 000 is to be rewarded in order to incentivize security researchers against with holding a bug report.   </p><p><strong>Repeatable Attack Limitations</strong></p><p>In cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.</p><p><strong>Public Disclosure of Known Issues</strong></p><p>Bug reports covering previously-discovered bugs acknowledged below are not eligible for any reward through the bug bounty program. </p><ul><li><a href=\"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits\">https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits</a></li><li><a href=\"https://code4rena.com/reports/2021-12-perennial\">https://code4rena.com/reports/2021-12-perennial</a></li></ul><p><strong>Previous Audits</strong></p><p>Perennial has provided these completed audit review reports for reference. Any unfixed vulnerability mentioned in these reports are not eligible for a reward.</p><ul><li><a href=\"https://github.com/equilibria-xyz/perennial-v2/tree/main/audits\">https://github.com/equilibria-xyz/perennial-v2/tree/main/audits</a></li></ul><p><strong>Feasibility Limitations</strong></p><p>Bug reports that require an attack that involve one or more other protocols (e.g. utilizing flash loans from a margin protocol or manipulating the spot prices on a DEX), either to make an attack more severe than it would be in isolation, or to achieve an attack that would otherwise be impossible or infeasible, would be a reduction of severity level payout.. However, they will be considered as in-scope and categorized according to the program rules as long as all of the following are true:</p><ul><li>Losses or other negative effects of the attack are inflicted upon Perennial ecosystem participants </li><li>The additional protocols used must have enough liquidity in various assets to allow the attack to succeed at the time of bug report submission. For example: if an attack requires an ETH flash loan, but the amount is larger than all the ETH available for loan across the ecosystem</li></ul><p><strong>Proof of Concept (PoC) Requirements</strong></p><p>A PoC is required for the following severity levels:\nCritical Smart Contract</p><p>All PoCs submitted must comply with the Immunefi-wide <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules\">PoC Guidelines and Rules</a>. Bug report submissions without a PoC when a PoC is required will not be provided with a reward.</p><p><strong>Reward Payment Terms</strong></p><p>Payouts for all bug reports are denominated in USD. Payouts for Medium and Low severity bug reports are handled by the Perennial team directly and are done in USDC. Payments for Critical severity bug reports are done by Sherlock with their bug bounty matching program and are done in USDC.</p><p>Critical payouts above USD 50 000 are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the coverage agreement between Perennial and Sherlock should be referenced.</p><p>Hence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of USD 50 000, paid out by the Perennial team.</p><p>Any loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: </p><ul><li>MarketParameter: <a href=\"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol\">https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/MarketParameter.sol</a></li><li>RiskParameter: <a href=\"https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol\">https://github.com/equilibria-xyz/perennial-v2/blob/main/packages/perennial/contracts/types/RiskParameter.sol</a></li></ul>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These impacts are out of scope for this bug bounty program. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"All Categories\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts requiring attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts caused by attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice recommendations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Feature requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts on test files and configuration files unless stated otherwise in the bug bounty program\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts requiring basic economic and governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity impacts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts from Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Impacts involving centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice recommendations\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third-party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks that are executed against project assets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>These impacts are out of scope for this bug bounty program. </p><p><strong>All Categories</strong></p><ul><li>Impacts requiring attacks that the reporter has already exploited themselves, leading to damage</li><li>Impacts caused by attacks requiring access to leaked keys/credentials</li><li>Impacts caused by attacks requiring access to privileged addresses (governance, strategist) except in such cases where the contracts are intended to have no privileged access to functions that make the attack possible</li><li>Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code</li><li>Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production</li><li>Best practice recommendations</li><li>Feature requests</li><li>Impacts on test files and configuration files unless stated otherwise in the bug bounty program</li></ul><p><strong>Smart Contracts</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Impacts requiring basic economic and governance attacks (e.g. 51% attack)</li><li>Lack of liquidity impacts</li><li>Impacts from Sybil attacks</li><li>Impacts involving centralization risks</li><li>Best practice recommendations</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet</li><li>Any testing with pricing oracles or third-party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks that are executed against project assets</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Perennial V2 follows a Factory and BeaconProxy pattern. All of the above factories (with the exception of PayoffFactory) have a beacon proxy implementation at the \\\"implementation\\\" getter function and a factory implementation that is readable via \\\"proxyAdmin.getProxyImplementation(factoryAddress)\\u2019\\u2019.\"), mdx(\"p\", null, \"Latest implementation deployments can also be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-v2/tree/main/packages/perennial-deploy/deployments/arbitrum\"\n  }, \"https://github.com/equilibria-xyz/perennial-v2/tree/main/packages/perennial-deploy/deployments/arbitrum\")), mdx(\"p\", null, \"Though only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.\"), mdx(\"p\", null, \"All code of Perennial can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-v2\"\n  }, \"https://github.com/equilibria-xyz/perennial-v2\"), \" Documentation for the assets provided in the table can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.perennial.finance/\"\n  }, \"https://docs.perennial.finance/\"), \". \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Perennial V2 follows a Factory and BeaconProxy pattern. All of the above factories (with the exception of PayoffFactory) have a beacon proxy implementation at the &quot;implementation&quot; getter function and a factory implementation that is readable via &quot;proxyAdmin.getProxyImplementation(factoryAddress)’’.</p><p>Latest implementation deployments can also be found at <a href=\"https://github.com/equilibria-xyz/perennial-v2/tree/main/packages/perennial-deploy/deployments/arbitrum\">https://github.com/equilibria-xyz/perennial-v2/tree/main/packages/perennial-deploy/deployments/arbitrum</a></p><p>Though only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.</p><p>All code of Perennial can be found at <a href=\"https://github.com/equilibria-xyz/perennial-v2\">https://github.com/equilibria-xyz/perennial-v2</a> Documentation for the assets provided in the table can be found at <a href=\"https://docs.perennial.finance/\">https://docs.perennial.finance/</a>. </p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
