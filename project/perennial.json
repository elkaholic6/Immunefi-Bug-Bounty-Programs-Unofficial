{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "perennial",
      "slug": "perennial",
      "project": "Perennial",
      "maxBounty": 500000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/3lhusquiT3bnBs8qxIhC5Y/5a359e5e020ecba3ba14141f5dd58cd8/Perennial_Logo.jpg",
      "launchDate": "2022-12-12T15:30-05:00",
      "updatedDate": "2023-09-18T20:36:05.094Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD 500,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD 25,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD 5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD 1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "1SPVDb0Zz7TqAWTnE9oQUg",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2C19eac953048801FfE1358D109A1Ac2aF7930fD",
          "description": "ChainlinkOracle_ETH",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1AvbWYEi8Q0HXx09vBW9hf",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x2d264EBDb6632A06A1726193D4d37FeF1E5dbDcd",
          "description": "Collateral_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4BRMb67v8B6SkdiiArOFEb",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x9df509186b6d3b7D033359f94c8b1BB5544d51b3",
          "description": "Controller_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "621a6phzBNIAhqCjugetkD",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xfC20BccA96BDE758E9C69151d99cEcfEAE3AB37E",
          "description": "Forwarder",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5obU2AIJzFXVtGvVlvdofu",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xE77076D3EeE12dA1d7402Ff4e6Ca12A8d99FcE8B",
          "description": "MultiInvoker_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "7bo9cSbbjdYfeOgLLEF7yp",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x69a682F90d58c8D1ABEa18aE1bc98c9A1be4f2EB",
          "description": "Incentivizer_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "3zaeiqdZxaB3DJCouuhDuw",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xD260A68a081f1D92f5Eb1F0aFDB29f00836dfa6b",
          "description": "ProxyAdmin",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1WlaiIntz7MjvdDk2P7PxE",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x13b7A79e050ef2C3fDc858EFD5c066c3655be841",
          "description": "TimelockController",
          "isPrimacyOfImpact": null
        },
        {
          "id": "57dIct9aCrBaGO3iHsPTWQ",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0x841d7C994aC0Bb17CcD65a021E686e3cFafE2118",
          "description": "Product_UpgradeableBeacon",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5N15sUBrg3zZFc1Ozxzvr9",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xAEf566ca7E84d1E736f999765a804687f39D9094",
          "description": "TwoWayBatcher",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5S0JLHC8XsIo9JQwtP6qwm",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xe8ee3b7d74bd6eebba0992353b9fec66abf28dc8",
          "description": "ChainlinkOracle_ETH",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1LtQAPZMp0XMm4RNfeSjjH",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xAF8CeD28FcE00ABD30463D55dA81156AA5aEEEc2",
          "description": "Collateral_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5QsfejujLmKvd5h90hUW68",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xA59eF0208418559770a48D7ae4f260A28763167B",
          "description": "Controller_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1rWftURw7JsG1n43RVEGLA",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xe72E82b672d7D3e206327C0762E9805fbFCBCa92",
          "description": "MultiInvoker_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2nN6BJ0lpN7efArNXYj5bK",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xfC20BccA96BDE758E9C69151d99cEcfEAE3AB37E",
          "description": "Incentivizer_Proxy",
          "isPrimacyOfImpact": null
        },
        {
          "id": "3GBCKiMEi4KaBm3poq9TCv",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x4f75cFbfc8b4A109659471b8d4593f5b19Be169B",
          "description": "ProxyAdmin",
          "isPrimacyOfImpact": null
        },
        {
          "id": "7jHJVWgjMOCNwFAY3thN7c",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x4AA8B447417815807b955757a6D1b78b86f3aD22",
          "description": "TimelockController",
          "isPrimacyOfImpact": null
        },
        {
          "id": "ieyxVGDOVusyMw66bdrn1",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0xC12b0fE62441bAAd525cd7d770cf21C883C77bc6",
          "description": "Product_UpgradeableBeacon",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4iUxn4syTBgsYMczrQ3rJf",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x5a572b5fbbc43387b5ef8de2c4728a4108ef24a6",
          "description": "Balanced Vault",
          "isPrimacyOfImpact": null
        },
        {
          "id": "68i4Jp2nACvoKACB5y014I",
          "type": "smart_contract",
          "url": "https://arbiscan.io/address/0x1960628db367281B1a186dD5B80B5dd6978F016F",
          "description": "Balanced Vault",
          "isPrimacyOfImpact": null
        }
      ],
      "impacts": [
        {
          "id": "6KaYsPZ5vOpJmAJwaiRHei",
          "title": "Direct theft of any user funds, whether at-rest or in-motion, other than unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "1JLmT215hsrhoVDuIXCaDP",
          "title": "Permanent freezing of funds",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "648FN6uZDzazGHQGcjYers",
          "title": "Theft of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "5HKuBlwXeTVFbEnteraroj",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3WNPVBhneO9gvEHcGzktYf",
          "title": "Permanent freezing of unclaimed yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "3CeBkzmvWGsfTbGoeZJbNK",
          "title": "Smart contract unable to operate due to lack of token funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "2SKkxXmYkWWWMG7yKFkESe",
          "title": "Block stuffing for profit",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7vttuld0csEbwHyKivH9cu",
          "title": "Theft of gas",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "bxTOlkY7RMBMlCVuan30N",
          "title": "Temporary freezing of protocol and/or funds",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "3GxotmdyM57bpkdl5mT2UV",
          "title": "Smart contract fails to deliver promised returns, but doesn’t lose value",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.\n\nPerennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker’s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style). \n\nTakers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades. \n\nOn a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.\n\nPerennial is minimialist at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.\n\nPerennial Features:\n\n- __Peer-to-Pool AMM__ — trade against a pool of capital, without having to find a counterparty to take the other side of a trade\n- __Zero price slippage__ — trade directly at the current price, regardless of size\n- __Cash-settled__ — trades settled in $USD, not crypto, in line the most popular crypto derivatives\n- __Utilization-based Funding Rate__ — funding varies with pool utilization, creating an extremely simple, continuous funding rate\n- __Two-sided Leverage__ — Takers & Makers can both trade with significant leverage, amplifying capital efficiency\n- __Maximum LP flexibility__ — Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control\n- __Developer-oriented & built for composability__ — With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.\n- __Permissionless__ — permissionless market creation, integration, and composability.\n\nFor more information about Perennial, please visit their [github](https://github.com/equilibria-xyz/perennial-mono) & [documentation](http://docs.perennial.finance).  \n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the  [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \n\nAll Critical and High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.\n\nRewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. \n\nCritical payouts above __USD 50 000__ are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the [coverage agreement](https://github.com/sherlock-protocol/sherlock-reports/tree/main/coverage-agreements) between Perennial and Sherlock should be referenced.\n\nHence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of __USD 50 000__, paid out by the Perennial team. \n\nAny loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: [https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7 ](https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7)\n\nIn addition, known issues highlighted in the following audit reports are also considered out of scope: \n- [https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits ](https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits)\n- [Code4rena Audit ](https://code4rena.com/reports/2021-12-perennial)\n\nIssues identified in previous audit reports may not be eligible for payout. \n\nTo be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.\n\n__KYC REQUIREMENT__\n\nName, government ID, and country of residence will be required to fulfill KYC.\n\nPayouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the __Perennial__ team directly and are done in __USDC__. Payments for Critical severity bug reports are done by __Sherlock__ with their bug bounty matching program and are done in __USDC__.\n",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n\n- Incorrect data supplied by third party oracles\n   - Not to exclude oracle manipulation/flash loan attacks\n- Basic economic governance attacks (e.g. 51% attack)\n- Lack of liquidity\n- Best practice critiques\n- Sybil attacks\n- Centralization risks\n\nThe following activities are prohibited by this bug bounty program:\n\n- Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n- Any testing with pricing oracles or third party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n",
      "assetsBodyV2": "Though only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.\n\nAll smart contracts of Perennial can be found at [https://github.com/equilibria-xyz/perennial-mono](https://github.com/equilibria-xyz/perennial-mono). However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": null,
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": null
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD 500,000"
          },
          {
            "level": "High",
            "payout": "USD 25,000"
          },
          {
            "level": "Medium",
            "payout": "USD 5,000"
          },
          {
            "level": "Low",
            "payout": "USD 1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.\"), mdx(\"p\", null, \"Perennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker\\u2019s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style). \"), mdx(\"p\", null, \"Takers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades. \"), mdx(\"p\", null, \"On a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.\"), mdx(\"p\", null, \"Perennial is minimialist at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.\"), mdx(\"p\", null, \"Perennial Features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Peer-to-Pool AMM\"), \" \\u2014 trade against a pool of capital, without having to find a counterparty to take the other side of a trade\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Zero price slippage\"), \" \\u2014 trade directly at the current price, regardless of size\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Cash-settled\"), \" \\u2014 trades settled in $USD, not crypto, in line the most popular crypto derivatives\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Utilization-based Funding Rate\"), \" \\u2014 funding varies with pool utilization, creating an extremely simple, continuous funding rate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Two-sided Leverage\"), \" \\u2014 Takers & Makers can both trade with significant leverage, amplifying capital efficiency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maximum LP flexibility\"), \" \\u2014 Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Developer-oriented & built for composability\"), \" \\u2014 With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Permissionless\"), \" \\u2014 permissionless market creation, integration, and composability.\")), mdx(\"p\", null, \"For more information about Perennial, please visit their \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-mono\"\n  }, \"github\"), \" & \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://docs.perennial.finance\"\n  }, \"documentation\"), \".  \"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Perennial is a DeFi-native derivatives primitive that allows for the creation of two-sided markets that trade exposure to an underlying price feed in a capital efficient manner.</p><p>Perennial acts as a peer-to-pool derivatives AMM that perpetually offers to take the other side of any Taker’s position directly at the oracle price, in exchange for a funding rate that floats based on utilization of the liquidity pool (Compound-style). </p><p>Takers (Traders) deposit collateral to get leveraged exposure to different price feeds (long, short, and exotic payoffs). Makers (Liquidity Providers) pool capital in the protocol to earn fees for taking the other side of Taker trades. </p><p>On a continuous, on-going basis, LPs and traders settle up; the losing side of the trade pays the winning side.</p><p>Perennial is minimialist at its core, designed to be a low-level, unopinionated primitive that lays the basic infrastructure and leaves the rest up to market creators and participants to define/optimize.</p><p>Perennial Features:</p><ul><li><strong>Peer-to-Pool AMM</strong> — trade against a pool of capital, without having to find a counterparty to take the other side of a trade</li><li><strong>Zero price slippage</strong> — trade directly at the current price, regardless of size</li><li><strong>Cash-settled</strong> — trades settled in $USD, not crypto, in line the most popular crypto derivatives</li><li><strong>Utilization-based Funding Rate</strong> — funding varies with pool utilization, creating an extremely simple, continuous funding rate</li><li><strong>Two-sided Leverage</strong> — Takers &amp; Makers can both trade with significant leverage, amplifying capital efficiency</li><li><strong>Maximum LP flexibility</strong> — Fuse is to Compound, as Perennial is to GMX. LPs (makers) can customize their risk exposure, pricing curve, hedging strategy (or lack thereof); Perennial makes very few assumption about this at the protocol level, giving LPs full control</li><li><strong>Developer-oriented &amp; built for composability</strong> — With just a few lines of code, developers can build exposure to any asset by customizing the payoff function, utilization curve (pricing), oracle, fee model, etc.</li><li><strong>Permissionless</strong> — permissionless market creation, integration, and composability.</li></ul><p>For more information about Perennial, please visit their <a href=\"https://github.com/equilibria-xyz/perennial-mono\">github</a> &amp; <a href=\"http://docs.perennial.finance\">documentation</a>.  </p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. \"), mdx(\"p\", null, \"All Critical and High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.\"), mdx(\"p\", null, \"Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. \"), mdx(\"p\", null, \"Critical payouts above \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \" are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sherlock-protocol/sherlock-reports/tree/main/coverage-agreements\"\n  }, \"coverage agreement\"), \" between Perennial and Sherlock should be referenced.\"), mdx(\"p\", null, \"Hence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 50 000\"), \", paid out by the Perennial team. \"), mdx(\"p\", null, \"Any loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7\"\n  }, \"https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7 \")), mdx(\"p\", null, \"In addition, known issues highlighted in the following audit reports are also considered out of scope: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits\"\n  }, \"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://code4rena.com/reports/2021-12-perennial\"\n  }, \"Code4rena Audit \"))), mdx(\"p\", null, \"Issues identified in previous audit reports may not be eligible for payout. \"), mdx(\"p\", null, \"To be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"KYC REQUIREMENT\")), mdx(\"p\", null, \"Name, government ID, and country of residence will be required to fulfill KYC.\"), mdx(\"p\", null, \"Payouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Perennial\"), \" team directly and are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \". Payments for Critical severity bug reports are done by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sherlock\"), \" with their bug bounty matching program and are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the  <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported. </p><p>All Critical and High severity bug reports must come with a PoC with an end-effect impacting an asset-in-scope in order to be considered for a reward. Explanations and statements are not accepted as PoC and code is required.</p><p>Rewards for critical smart contract vulnerabilities are further capped at 10% of economic damage, with the main consideration being the funds affected in addition to PR and brand considerations, at the discretion of the team. </p><p>Critical payouts above <strong>USD 50 000</strong> are done by Sherlock and will only be paid out for critical bugs that would result in a loss of funds and can be executed profitably, and this then excludes Sherlock critical bounty payouts for temporary freezing bugs. If further clarification is needed to decide on a Sherlock payout, the <a href=\"https://github.com/sherlock-protocol/sherlock-reports/tree/main/coverage-agreements\">coverage agreement</a> between Perennial and Sherlock should be referenced.</p><p>Hence, any Critical severity report that does not qualify for a payout from Sherlock will have a maximum payout of <strong>USD 50 000</strong>, paid out by the Perennial team. </p><p>Any loss of funds or yield due to improper product parameters set by the product owner are considered out of scope of the program. The settable product parameters can be viewed here: <a href=\"https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7\">https://github.com/equilibria-xyz/perennial-mono/blob/master/packages/perennial/contracts/interfaces/IParamProvider.sol#L7 </a></p><p>In addition, known issues highlighted in the following audit reports are also considered out of scope: </p><ul><li><a href=\"https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits\">https://github.com/equilibria-xyz/perennial-mono/tree/master/packages/perennial/audits </a></li><li><a href=\"https://code4rena.com/reports/2021-12-perennial\">Code4rena Audit </a></li></ul><p>Issues identified in previous audit reports may not be eligible for payout. </p><p>To be eligible for reward, impact from table below must be demonstrated where all thefts must be profitable and all freezing must be reasonably priced for the impact.</p><p><strong>KYC REQUIREMENT</strong></p><p>Name, government ID, and country of residence will be required to fulfill KYC.</p><p>Payouts for all bug reports are denominated in USD. Payouts for High, Medium and Low severity bug reports are handled by the <strong>Perennial</strong> team directly and are done in <strong>USDC</strong>. Payments for Critical severity bug reports are done by <strong>Sherlock</strong> with their bug bounty matching program and are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Though only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.\"), mdx(\"p\", null, \"All smart contracts of Perennial can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/equilibria-xyz/perennial-mono\"\n  }, \"https://github.com/equilibria-xyz/perennial-mono\"), \". However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Though only the proxy contracts are listed as in-scope, current implementation and any further updates to the implementation contracts are considered in scope. When reporting a bug, please make sure to select the relevant proxy smart contract as the target.</p><p>All smart contracts of Perennial can be found at <a href=\"https://github.com/equilibria-xyz/perennial-mono\">https://github.com/equilibria-xyz/perennial-mono</a>. However, only those in the Assets in Scope table are considered as in-scope of the bug bounty program.</p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
